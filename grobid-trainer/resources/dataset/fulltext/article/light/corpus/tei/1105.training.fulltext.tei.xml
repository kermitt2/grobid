<?xml version="1.0" ?>
<tei>
	<teiHeader>
		<fileDesc xml:id="0"/>
	</teiHeader>
	<text xml:lang="en">
			<head>1 Introduction<lb/></head>

			<p>The challenge with voting systems is to provide sufficient evidence to render<lb/> the outcome beyond dispute while at the same time ensuring ballot secrecy and<lb/> coercion resistance. Furthermore, the system has to be very easy to use and easily<lb/> understandable. The response from the crypto community has been to develop<lb/> the notion of End-to-End (E2E) Verifiability. A number of schemes have been<lb/> proposed and some even implemented and deployed, for example, Pret a Voter<lb/> <ref type="biblio">[28]</ref> Wombat <ref type="biblio">[3]</ref> and Scantegrity II <ref type="biblio">[29]</ref>, Helios https://vote.heliosvoting.org/,<lb/> Civitas <ref type="biblio">[10]</ref>, Pretty Good Democracy <ref type="biblio">[27]</ref>.<lb/></p>

			<p>Typically these schemes involve the creation of an encrypted version of the<lb/> vote at the time of casting. The voter gets to retain a copy of the encrypted<lb/> vote which she can later confirm is correctly posted to a secure, append-only<lb/> Web Bulletin Board (WBB). All the posted, encrypted ballots are then anony-<lb/>mously tabulated, either using mixes and decryption or exploiting homomorphic<lb/> properties of the encryption to tabulate under encryption and then decrypt the<lb/> result.<lb/></p>

			<p>The assurance arguments are rather subtle though, and some people object<lb/> to the use of crypto in voting on the grounds that the majority of the electorate<lb/> will not really understand it and its role. Indeed, German Federal law, according<lb/> to some interpretations, rules out the use of cryptography on the grounds that<lb/> anyone should be able to understand the mechanisms without requiring any spe-<lb/>cial knowledge. It is interesting therefore to explore the possibility of achieving<lb/> some form of verifiability without the use of crypto. An early example of this is<lb/> the article of Randell and Ryan <ref type="biblio">[25]</ref> that uses scratch strips as an analogue of<lb/> crypto. Another fine example is Rivest&apos;s ThreeBallot system <ref type="biblio">[26]</ref>.<lb/></p>

			<p>Another approach is to have private ballot identifiers that allow voters to look<lb/> up their vote in the clear on the WBB. Schneier in his book <ref type="biblio">[30]</ref> for example<lb/> suggests such an approach: voters are invited to invent their own random code<lb/> and submit it with their vote. A slightly more sophisticated approach, in which<lb/> the system and/or the voter&apos;s devices generates the numbers is presented in <ref type="biblio">[1]</ref>.<lb/></p>

			<p>Introducing ballot identifiers has the appeal that it provides voters with a<lb/> very simple, direct and easy to understand way to confirm that their vote is<lb/> present and correct in the tally. There are however two significant drawbacks:<lb/> care has to be taken to ensure that voters get distinct trackers and there is a<lb/> danger of coercion. The first is an issue if for example the system could identify<lb/> two voters likely to vote the same way and assigns them the same tracker. In<lb/> this case it just posts one vote against this tracker and is free to stuff another<lb/> vote of its own choice. The second danger is that a coercer requires the voter to<lb/> hand over her tracker to allow him to check how she voted. Notice though that<lb/> in this style of attack the coercer has a limited window of opportunity: he must<lb/> request that the tracker be handed over before the results are published. It is<lb/> this observation that we exploit to counter this threat: we arrange for the voters<lb/> to learn their tracker numbers only after the information has been posted to the<lb/> WBB.<lb/> This paper presents a scheme that addresses both of these shortcomings by:<lb/></p> 

			<item>– Guaranteeing that voters get unique trackers.<lb/> </item>

			<item>– Arranging for voters to learn their tracker only after the votes and corre-<lb/>sponding tracking numbers have been posted (in the clear).<lb/> </item>

			<p>We hope that by putting all the crypto under the bonnet, voters, election<lb/> officials etc. may find such a scheme more acceptable that conventional E2E<lb/> verifiable schemes, that require voters to handle encrypted ballots. Here the<lb/> voters just have to handle tracking numbers and votes in the clear. The scheme<lb/> is also interesting in that it appears to shift the trust model for voter devices:<lb/> in usual E2E schemes we need to worry about the voter&apos;s device encrypting the<lb/> vote correctly. This typically necessitates complicating the protocol with Benaloh<lb/> challenges, <ref type="biblio">[4]</ref>, or similar ballot assurance mechanisms. Now that voters get to<lb/> check their vote in the clear, a misbehaving device can be detected more readily,<lb/> and resulting in a simpler voting ceremony.<lb/></p>

			<p>A possible problem with the basic scheme, pointed out by Bill Roscoe, is that<lb/> a coerced voter might by mis-chance choose the coercer&apos;s tracking number when<lb/> she is deploying her coercion evasion strategy. Perhaps even more worrying is the<lb/> possibility that the coercer will simply claim, falsely, that the tracker revealed<lb/> by the voter is his and hence he &quot; knows &quot; that voter has not revealed her true<lb/> tracker. This puts the voter in a very difficult situation. It seems that her best<lb/> strategy is to stick to her guns and insist that she has revealed her true tracker.<lb/> She does not know whether or not the coercer is telling the truth and indeed,<lb/> ironically, the coercer does not have any means to prove to her that it is his<lb/> tracker.<lb/></p>

			<p>In a large elections with a small number of candidates the odds of lighting<lb/> on the coercer&apos;s tracker will typically be small (unless the coercer is backing a<lb/> serious loser), but even the remote possibility may be worrying to some voters.<lb/> Furthermore, the coercer might claim, falsely, that the tracker is his, placing the<lb/> voter in a difficult situation. Of course, for this to arise, the coercer must himself<lb/> be a voter, and so the attack does not arise if the coercer is an outsider.<lb/></p>

			<p>It is not immediately obvious how to counter this danger, but an enhancement<lb/> to the basic scheme which counter this possibility is described in section 8,<lb/> however it comes at a cost of a less transparent tally. The Selene scheme is in<lb/> any case targeted at low coercion threat environments and so in such a context<lb/> this problem could be regarded as minor. We argue that, in some contexts, the<lb/> benefits arising from the greater degree of transparency outweigh the rather<lb/> remote threat. In any event, we will argue that the basic scheme still provides<lb/> receipt-freeness, if not complete coercion resistance.<lb/></p>

			<p>It is worth noting that the constructions presented here could be thought of as<lb/> a possible add-on to other schemes to provide a transparent form of verifiability.<lb/> Indeed we could start with a simple, un-verifiable scheme that simply delivers<lb/> encrypted votes to the server.<lb/></p>

			<head>2 Background<lb/></head>

			<p>Coercion can come in many flavours, from implicit, the coercer does&apos;t have to say<lb/> anything, folk just know how they are expected to vote, to full-on: your personal<lb/> coercer is on hand 24/7 to assist you in making the right voting choice. Making<lb/> a voting system resistant to the latter form is extremely difficult, arguably im-<lb/>possible if the coercer really is observing the voter throughout the voting period.<lb/> The Selene scheme is aimed at contexts where the coercion threat is closer to<lb/> the former end of the spectrum: the coercer will issue some instructions and<lb/> ask some questions. Selene will manage to mitigate such coercion attacks and at<lb/> the same time allow the voters to directly verify that their vote is counted as<lb/> intended.<lb/></p>

			<head>3 Cryptographic Primitives<lb/></head>

			<p>The parties involved. The parties involved in the protocol are: the n voters, the<lb/> t Tellers, and the Election Authority (EA) that initially sets up the protocol.<lb/> Further a public WBB is used for verifiable communication whereas private<lb/> channels are used to send secret information which need to equivocated in case<lb/> of coercion.<lb/></p>

			<p>Web Bulletin Board. In common with most E2E verifiable systems we will as-<lb/>sume the existence of a secure WBB. This can be thought of as an append-only<lb/> secure broadcast mechanism: everyone has a consistent view of the information<lb/> posted and, once posted, information cannot be removed. For a more detailed<lb/> discussion and a possible implementation see <ref type="biblio">[20]</ref>.<lb/></p>

			<p>Signature, threshold encryption and verifiable re-encryption mix protocols. We<lb/> assume an (k, t)-threshold ElGamal encryption system without any trusted au-<lb/>thority and with verifiable proofs of honest decryption. The cryptosystem must<lb/> be such that any subset k of the t parties are able to securely decrypt a given<lb/> ciphertext with a corresponding transcript of correct decryption. In our case<lb/> the t parties correspond to the Tellers. One example of such scheme is given in<lb/> Cramer et al. <ref type="biblio">[13]</ref>. In this work we denote by {x} the ElGamal encryption of<lb/> x. In addition we will make use of a digital signature scheme S = (Sign, Verify)<lb/> to sign the encrypted votes <ref type="biblio">[16]</ref>. Further, we will use re-encryption mix nets, in<lb/> particular also parallel verifiable shuffles protocols <ref type="biblio">[24]</ref>.<lb/> </p>

			<p>Plaintext equivalence test and proofs. Consider two ElGamal ciphertexts (a 1 , b 1 )<lb/> and (a 2 , b 2 ), encrypted with the same key sk, whose plaintexts are respectively<lb/> m 1 and m 2 . Assume that the private part sk is distributed among Tellers T 1 , . . . , T t .<lb/> Then T 1 , . . . , T t can execute a protocol to determine if m 1 = m 2 without leaking<lb/> anything else. To do that, they compute (a, b) = (a 1 /b 1 , a 2 /b 2 ) and execute a<lb/> threshold decryption of (a r , b r ) for a random distributively generated exponent<lb/> r. At the end if the decryption returns 1, then they agree on m 1 = m 2 , or on<lb/> m 1 = m 2 otherwise. For two ciphertexts c 1 and c 2 , we denote by PET(c1, c2) = 1<lb/> if the plaintext equivalence test holds for c 1 and c 2 . Proofs of correct threshold<lb/> decryption performed in a plaintext equivalence test are added for public verifi-<lb/>ability.<lb/> </p>

			<p>RO model, the Fiat-Shamir heuristic, NIZKPoK and signatures. In our protocol<lb/> we will make use of an ideal hash function modelled as a Random Oracle (RO, in<lb/> short) <ref type="biblio">[2]</ref>. The Fiat-Shamir heuristic <ref type="biblio">[14]</ref> combined with the RO model will offer<lb/> us the powerful tool of Non-Interactive Zero-Knowledge Proofs of Knowledge<lb/> (NIZKPoK, in short). Actually we will need stronger variants of the Fiat-Shamir<lb/> heuristic <ref type="biblio">[6]</ref>. We will give more details in Appendix A.<lb/> </p>

			<p>Exponentiation mixes. Our protocol will benefit from the exponentiation mix<lb/> construct from <ref type="biblio">[19]</ref>. Here a list of Public Keys pk i of the voters are put through<lb/> a sequence of exponentiation mixes: the i-th mix server MS i takes the batch of<lb/> outputs from the previous server, raises each term to a secret common power<lb/> s i , subjects the resulting terms to a secret shuffle π i and outputs the result to<lb/> MS i+1 . The first server takes the original list of PKs. The net effect is a list:<lb/> </p>

			<formula>(g x ρ(i) •s ) i∈[n] ,<lb/> </formula>

			<p>where:<lb/></p> 

			<formula>π =<lb/> [n]<lb/> 1<lb/> ρ i , s =<lb/> [n]<lb/> 1<lb/> s i ,<lb/> </formula>

			<p>and g s is also published by the last Teller.<lb/> Any voter V i , i ∈ [n] can identify her pseudo-PK, pk * in the list by computing<lb/> (g s ) xi and finding the match.<lb/></p>

			<head>4 Related Work<lb/></head>

			<p>E2E verifiable voting now has quite a long and rich literature, with many schemes<lb/> having been proposed, both for in-person and remote, e.g. internet, voting. Here<lb/> we will just mention some of the most closely related schemes. Note, Selene<lb/> as presented here is intended for internet voting, but it would doubtless be<lb/> straigforward to adapt it to in-person voting.<lb/></p> 

			<p>The most notable verifiable, internet voting scheme is Adida&apos;s Helios,<lb/> https://vote.heliosvoting.org/. Helios is not receipt-free, but recently the Bele-<lb/>nios RF scheme, <ref type="biblio">[11]</ref>, has been proposed to provide receipt freeness.<lb/> Juels et al <ref type="biblio">[21]</ref> proposed a formal definition of coercion resistance and a<lb/> credential-based mechanism to achieve this. The Civitas system, <ref type="biblio">[10]</ref>,<lb/> http://www.cs.cornell.edu/projects/civitas/, implements this approach, with some<lb/> enhancements.<lb/></p>

			<p>The idea of voters having a private tracking number with which they can look<lb/> up their vote in the clear on a bulletin board appears to go back the Schneier&apos;s<lb/> &quot; Applied Cryptography &quot; book in which he suggests that voters choose a pass-<lb/>word to identify their vote. Much later the idea is revived for use in voting during<lb/> ANR (Agence National de la Rechrche) funding committee meetings. A scheme<lb/> that has some similarities to Selene in that votes appear in the clear alongside<lb/> identifying number, is Trivitas, <ref type="biblio">[8]</ref>. Here however the clear-text votes appear<lb/> on the bulletin board at an intermediate step, followed by further mixing and<lb/> filtering. Hence the voters do not verify their vote directly in the tally.<lb/></p>

			<head>5 The Set-up Phase<lb/></head>

			<p>The EA creates the threshold election key and keys share. Ideally this should<lb/> be in a distributed, dealerless fashion <ref type="biblio">[13]</ref>. We assume that voters already have<lb/> PK/SK pairs. When voters register for the election we assume that they, or more<lb/> precisely their devices, create a fresh, ephemeral trapdoor key pair.<lb/></p>

			<p>We now describe the construction whose goal is to inform voters of their<lb/> tracking numbers, i.e. the number assigned to them and unique to them, in a way<lb/> that provides them with high confidence that it is correct but allowing them to<lb/> deny it if coerced. We do this generating trapdoor, Pedersen-style commitments<lb/> to the tracking numbers.<lb/></p>

			<p>The tracking numbers should be rather sparse and easily distinguishable.<lb/> Each voter holds the trapdoor to her commitment which allows her to lie to<lb/> a coercer if necessary. An additional advantage of this construction is that it<lb/> would appear unnecessary to authenticate the message notifying the voter of<lb/> the recommitment value as it would be hard for an attacker to compute an<lb/> alternative value that would open the commitment to another valid tracking<lb/> number. This avoids the need to introduce an authentication mechanism to such<lb/> notifications which could introduce coercion threats if done naively. Designated<lb/> Verifier Signatures would be a way to sidestep such coercion threats, but they<lb/> would significantly complicate the scheme. Now the voter can construct such a<lb/> message herself for any tracking number of her choice.<lb/></p>

			<head>Distributed Generation of the Encrypted Tracker Numbers</head> 

			<p>The Elec-<lb/>tion Authority publicly creates the tracking numbers n i and also computes g ni<lb/> (to ensure that the resulting values fall in the appropriate subgroup) as well as<lb/> the (trivial) ElGamal encryptions of the g ni : {g ni } P K T and posts these terms<lb/> to the WBB.<lb/></p>

			<formula>n i , g ni , {g ni } pk T<lb/></formula>

			<p>The (Mix) Tellers now put the last, encrypted terms through a sequence of<lb/> verifiable, re-encryption mixes to yield:<lb/></p> 

			<formula>{g n π(i) }<lb/> pk T<lb/></formula> 

			<p>These are now assigned to the voters&apos; PKs<lb/></p> 

			<formula>(pk i , {g n π(i) }<lb/> pk T<lb/>)<lb/></formula>

			<p>Note that, thanks to the mixing, the assignment of these numbers to the<lb/> voters is not known to any party, aside from a collusion of all the mix Tellers.<lb/> Note also that as this is a verified mix, as long as all the input numbers are<lb/> unique it is guaranteed that each voter will be assigned a unique (encrypted)<lb/> number. We still need to ensure that the number revealed to each voter is the<lb/> number assigned to them in the above construction, and we will see this next.<lb/></p>

			<head>5.1 Distributed Generation of the Tracker Number Commitments<lb/></head>

			<p>Now, each Teller is required to produce n pairs of terms of the form:<lb/></p> 

			<formula>({h<lb/> ri,j<lb/> i } pk T , {g ri,j } pk T )<lb/></formula>

			<p>We have to provide NIZKPoK proofs that these terms are well-formed, i.e.<lb/> that the r i,j exponents in the two terms are indeed identical and known and that<lb/> the Teller knows such value, we present these in Appendix A. In addition we will<lb/> have to assume that such proofs be non-malleable as we will explain later.<lb/></p>

			<item>Here, for notational convenience, h i := g xi = pk i .<lb/></item> 

			<p>Thus we now have a n × t array of such pairs, the columns corresponding<lb/> to the Tellers and the rows to the voter ids. Now, for each voter, we form the<lb/> product across the columns of the first elements to give:<lb/></p>

			<formula>{h ri<lb/> i } pk T =<lb/> t<lb/> j=1<lb/> {h<lb/> ri,j<lb/> i } pk T<lb/></formula>

			<p>Where, due to the multiplicative homomorphic properties of ElGamal,<lb/></p>

			<formula>r i :=<lb/> t<lb/> j=1<lb/> r i,j<lb/></formula>

			<p>Now we form the product of the {h ri<lb/> i } pk T and the {g n π(i) } pk T :<lb/></p> 

			<formula>{h ri<lb/> i · g n π(i) } pk T = {h ri<lb/> i } pk T · {g n π(i) } pk T<lb/></formula>

			<p>This gives us the encryption under the Teller&apos;s PK of the trapdoor com-<lb/>mitments to the tracking numbers: (h ri<lb/> i · g n π(i) ). We can now have a threshold<lb/> set of Tellers perform verified, partial decryptions of these terms to reveal the<lb/> commitments:<lb/></p>

			<formula>C i := h ri<lb/> i · g n π(i)<lb/></formula>

			<p>All of these steps are posted, along with NIZKPoK proofs and audits, to the<lb/> WBB.<lb/></p> 

			<p>It seems that the Tellers cannot cheat in any effective way here aside from<lb/> injecting invalid randoms which will result eventually in the voters being unable<lb/> to open their commitment to a valid tracking number. But in any case, any such<lb/> cheating will be detected by checks on the NIZKPoK proofs or random audits.<lb/> Now, for each voter there will be a tuple of terms posted to the WBB:<lb/></p>

				<formula>(pk i , {g n π(i) } pk T , h ri<lb/> i · g n π(i) , )<lb/></formula>

			<p>The last entry of this tuple is left blank awaiting the voter&apos;s encrypted vote.<lb/></p>

			<head>5.2 Voting<lb/></head>

			<p>Voter V i casts her vote in the form:<lb/></p>

			<formula>(Sign V i ({Vote i } pk T ), Π i ),<lb/></formula>

			<p>where the ballot is signed either with the voter&apos;s true PK, or with her pseudo-<lb/>PK if this has been configured (see Section 3), and Π i is a non-interactive proof<lb/> of knowledge of the plaintext. The signature and proofs are needed to ensure<lb/> ballot independence <ref type="biblio">[15, 12]</ref>, and to prevent an attacker copying, re-encrypting<lb/> a previously cast vote as his own. 1 Note that in conjunction with Selene such a<lb/> copying attack would be particularly virulent: the attacker copies the victim&apos;s<lb/> vote and casts it as his own. When the votes and trackers are reveled he sees<lb/> exactly how the victim voted.<lb/></p> 

			<p>It is important that the server check for duplication of encrypted votes. It is<lb/> also advisable to post the votes only once voting is closed. The signatures and<lb/> proofs are checked for validity and, if valid, the encrypted votes are now paired<lb/> off with the PK or pseudo-PK (and encrypted tracking number) with which they<lb/> were signed. Double votes are handled according to the policy in operation, e.g.<lb/> only the last vote cast by V i is retained. Thus we get a list of tuples on the WBB:<lb/></p>

			<formula>(pk i , {g n π(i) } pk T , (h ri<lb/> i · g n π(i) ), Sign V i ({Vote i } pk T , Π i ))<lb/></formula>

			<p>After voting has closed, the encrypted ballots are posted alongside their<lb/> (pseudo-)identity.<lb/></p>

			<head>5.3 Mixing and Decryption<lb/></head>

			<p>Now, for each row on the WBB, the second and forth terms of these tuples are<lb/> extracted and the signature and proofs striped off the forth term. This gives<lb/> pairs of the form:<lb/></p>

			<formula>({g n π(i) } pk T , {Vote i } pk T )<lb/></formula>

			<p>These are now put through a verifiable, parallel shuffle, e.g. <ref type="biblio">[24]</ref>. Once this<lb/> is done, a threshold set of the Tellers perform a verifiable decryption of these<lb/> shuffled pairs. All of these steps along with the proofs are posted to the WBB.<lb/> Thus, finally we have a list of pairs: tracking number, vote:<lb/> </p>

			<formula>(g n π(i) , Vote i )<lb/></formula> 

			<p>from which the tracker/vote pair can immediately be derived: (n π(i) , Vote i ).<lb/></p>

			<head>5.4 Notification of Tracker Numbers<lb/></head>

			<p>For the notification of tracking numbers we will think of the Pedersen commit-<lb/>ments whose construction we described earlier as forming the β component, i.e.<lb/> the h r · m, of an ElGamal encryption under the voter&apos;s PK, but with the α<lb/> component, i.e. the g r , kept hidden. Thus we think of an ElGamal encryption<lb/> as being represented:<lb/> </p>

			<formula>(α, β) := (g r , h r · m)<lb/> </formula>

			<p>The goal then is to reveal the α term to the voter in a deniable fashion.<lb/></p> 

			<p>Once the trackers and votes have been made available on the WBB for a<lb/> sufficient period for the voters to note any alternative trackers as may be required<lb/> to parry any attempted coercion, the Tellers send the voter V j their share of the<lb/> g rj,i over a private channel:<lb/></p>

			<formula>T j → V i : g rj,i<lb/></formula>

			<p>Once V i &apos;s device has received these from all the Tellers it combines them to<lb/> form g ri , the α term which along with the β term of the commitment h ri<lb/> i · g n π(i)<lb/> to give the ElGamal encryption of g n π(i) w.r.t. the voter&apos;s PK h i :<lb/></p>

			<formula>(g ri , h ri<lb/> i · g n π(i) )<lb/></formula>

			<p>The voter can now decrypt this in the usual fashion using her secret key x i ,<lb/> thus revealing g n π(i) and hence n π(i) .<lb/></p>

			<p>The potential attacks of the Tellers and how we counter them. The α term is sent<lb/> to the voter without any proof of origin. This is more user-friendly because such<lb/> communications have to be deniable and should be faked by the voter in case of<lb/> coercion. The point is that an adversary, even if colluding with all the Tellers,<lb/> can only construct an α term that opens up to a valid tracker different from the<lb/> true tracker of the voter with negligible probability. The precise statement and<lb/> assumptions can be found in Appendix B.<lb/></p>

			<p>The voter, or more precisely her device, can compute an alternative g ri term<lb/> that will decrypt to an alternative, valid tracker of her choice. Suppose that she<lb/> wants her commitment to decrypt to the tracker value m * := g n * , she inputs<lb/> this to her device along with the commitment value β i and the device computes<lb/> the fake α term α :<lb/></p>

			<formula>α =<lb/> β i<lb/> m *<lb/> x -1<lb/></formula>

			<p>On the other hand it is intractable to anyone not knowing the trapdoor, i.e.<lb/> x i , to perform such a computation, see Appendix B for a proof. Note also that<lb/> for the privacy of the tracking numbers we don&apos;t really need to encrypt the g ri<lb/> terms, the trackers are still protected by the encryption under the voter&apos;s PK.<lb/> However, it is still important to send these terms to the voter over a private<lb/> channel to ensure that they are deniable.<lb/></p>

			<p>Another potential attack lies in the fact that a Teller could create his g rj<lb/> term with knowledge of the g ri &apos;s terms of the other Tellers so that the product<lb/> of all r i &apos;s be known to him. This would be possible if the NIZKPoK proofs be<lb/> malleable and in fact this is the case if care is not taken when applying the Fiat-<lb/>Shamir heuristic. In Appendix A we discuss how it is possible to use standard<lb/> technique to make a NIZKPoK non-malleable. We stress that assuming that the<lb/> NIZKPoK be non-malleable the aforementioned attack is nullified.<lb/></p>

			<head>6 The Voter Experience<lb/></head>

			<p>A goal of the design of this protocol is to make the voter experience as simple and<lb/> intuitive as possible. We assume that the voters already possess public (signing)<lb/> keys and trapdoor keys. First we describe the ceremony in the case that the<lb/> voter does not experience any coercion. Then we describe the steps needed to<lb/> counter a coercer.<lb/></p>

			<head>6.1 The Core Ceremony<lb/></head>

			<item>– The voter receives an invitation to vote along with a ballot.<lb/> </item>

			<item>– The voter inputs her choice and her device encrypts this under the Election<lb/> PK and signs this. The device sends this to the Election Server. The device<lb/> stores a copy of this.<lb/></item>

			<p>After a suitable period the tracking number/vote pairs are anonymised and<lb/> decrypted and displayed on the WBB. The voters receive an invite to visit the<lb/> WBB, but will only be necessary at this stage if the voter has been coerced.<lb/> </p>

			<item>– After a suitable delay, the voter receives a notification of the α term, which<lb/> she inputs to her device to allow it to extract her tracking number. Once she<lb/> has this she can visit the WBB and confirm that her vote appears correctly<lb/> against this tracker.<lb/></item>

			<p>The last step is optional, to enable to voter to check that her vote was<lb/> correctly recorded and entered into the tally. She can skip this if she is not<lb/> interested in performing such a check.<lb/></p>

			<head>6.2 The Ceremony in the Event of Coercion<lb/></head>

			<p>If she is being coerced she needs to take some additional, coercion evasion steps,<lb/> shown in italics:<lb/> </p>

			<item>– The voter receives an invitation to vote along with a ballot.<lb/></item>

			<item>– The voter inputs her choice and her device encrypts this under the Election<lb/> PK and signs this. The device sends this to the Election Server. The device<lb/> stores a copy of this and the tracker commitment.<lb/> This is strictly optional (and arguably perhaps unnecessary).<lb/> </item>

			<item>– After a suitable period the Tracker numbers and votes are anonymised and<lb/> decrypted. The (tracker, vote) pairs are displayed on the WBB and the voter<lb/> receives an invite to visit this. She visits the WBB and notes down a tracking<lb/> number that appears against the vote demanded by the coercer.<lb/></item> 

			<item>– The voter inputs this fake tracking number into her device and it outputs a<lb/> fake α term that coupled with her commitment, the β term of the ElGamal<lb/> encryption of her tracker, will decrypt to the fake tracker.<lb/> </item>

			<item>– After a suitable delay, the voter receives a notification of her &quot; true &quot; α term,<lb/> which she inputs to her device to allow it to extract her tracking number<lb/> from the commitment.<lb/> </item>

			<item>– If the coercer demands that she reveal her tracking number she &quot; reveals &quot; the<lb/> fake one. If he further demands that she reveals the alpha notification value,<lb/> she reveals the fake α she computed earlier.<lb/> </item>

			<item>– Once she has her tracker she can visit the WBB and confirm that her vote<lb/> appears correctly against this tracker.<lb/></item>

			<p>Of course, she should also notify the appropriate authorities that coercion<lb/> was attempted.<lb/></p>

			<head>6.3 Enhancements<lb/></head>

			<p>Here we describe some optional enhancements to the basic scheme.<lb/></p>

			<head>Pseudonymous Credentials</head> 

			<p>We can add an extra layer of anonymity by<lb/> generating pseudonyms using the rather elegant exponentiation mix described<lb/> in Section 3.<lb/></p>

			<p>After the mixing, the WBB will be equipped with a list of pairs comprising<lb/> a pseudo-PK, and an encrypted tracking number:<lb/> (pk *<lb/> ρ(i) , {g n π(i) } pk T )<lb/> This helps conceal the identities of those who cast votes, thus helping to<lb/> counter forced abstention attacks. Note however that a really determined coercer<lb/> can still force a voter to reveal her singing key and so can breach this anonymity.<lb/></p>

			<p>To counter such a coercer we need a more sophisticated mechanism described in<lb/> the next section.<lb/></p>

			<head>6.4 Malleable Signatures<lb/></head>

			<p>Cortier et al. <ref type="biblio">[11]</ref>, following Blazy et al. <ref type="biblio">[7]</ref>, put forward an elegant mechanism<lb/> to make the voter to lose control and knowledge of the randomness used to form<lb/> the final ballot stored in the ballot box. This is done by introducing a voting<lb/> server, that is trusted for receipt-freeness (i.e., it is assumed not to collaborate<lb/> with potential coercers) but not for privacy and correctness.<lb/></p>

			<p>The voting server receives a ballot c of a voter along with her signature σ.<lb/> The server then re-randomizes c producing the new ballot c and is further able<lb/> to compute a new signature σ for c . The voting server posts on the WBB c and<lb/> σ and anyone can check that σ be a valid signature on c under the verification<lb/> key of the voter.<lb/></p>

			<p>Moreover, the voting server can compute this transformed signature on the<lb/> re-randomized ciphertext without knowing neither decryption key nor signing<lb/> key nor the plaintext. The security guarantess that it is infeasible to compute a<lb/> signature on a ciphertext that encrypts a message of which no encryption has<lb/> been signed. The same mechanism can be added to Selene to prevent coercion<lb/> attacks at casting time.<lb/></p>

			<head>6.5 Selene as an Add-on<lb/></head>

			<p>It is interesting to note that the constructions described above could in many<lb/> cases be added to an existing scheme, one without any verification features or<lb/> perhaps one having conventional E2E verification involving encrypted receipts.<lb/> Indeed, in some cases it could even be retro-fitted to an election that had already<lb/> taken place. Suppose that a Helios vote had been conducted and contested. The<lb/> trapdoor commitments to the trackers could be generated and associated to the<lb/> voters as described above and the mixes and decryptions performed afresh. For<lb/> this to work, the base scheme must use encryption such that we can run a parallel<lb/> shuffle with the corresponding encrypted trackers.<lb/></p>

			<head>7 Analysis<lb/></head>

			<p>In this section we give a brief informal analysis of the security properties of<lb/> Selene. A full, formal security analysis is postponed for future research.<lb/></p>

			<head>7.1 Verifiability and Verification<lb/></head>

			<p>If we think of Selene as an add-on to a base scheme, the universal verifiability<lb/> of Selene is at least as strong as the base vote casting. In section 5.2 this is<lb/> a Helios like scheme, but as mentioned in section 6.5 it could also be a more<lb/> general scheme. Such schemes most often provide tallied-as-stored security, i.e.<lb/> that the vote is tallied as cast by the device of the voter.<lb/></p> 

			<p>However, Selene could also to some extent be added to a vote casting scheme<lb/> without universal verifiability. Indeed, the strength of Selene is to provide ad-<lb/>ditional individual direct verification that the vote is tallied as intended by the<lb/> voter.<lb/></p>

			<p>The security of the tracker construction relies on interested parties checking<lb/> the proofs and calculations done on WBB as follows, but note the latter are<lb/> universally verifiable:<lb/> </p>

			<item>– Check that the trackers, n i , written in plain on the WBB are indeed unique<lb/> and their exponentiations g ni and the trivial encryptions thereof are correct<lb/> (section 5).<lb/> </item>

			<item>– Check the ZK proofs for the mix of the encrypted trackers (section 5). This<lb/> is to ensure both privacy and verifiability. We will elaborate on this in next<lb/> subsection.<lb/> </item>

			<item>– Check the ZK proofs from the Tellers that the terms {h<lb/> ri,j<lb/> i } pk T , {g ri,j } pk T<lb/> are well-formed. Further, it is checked that these are correctly multiplied<lb/> together to give a commitment to the tracking number (section 5.1). It then<lb/> follows from the theorem in appendix B that an adversary with overwhelming<lb/> probability cannot fake the α term, which the voter receives and uses together<lb/> with the commitment to decrypt the tracker. This of course assumes that<lb/> the voter&apos;s secret key x i = log g h i is not known to the adversary. We will<lb/> comment on this below.<lb/> </item>

			<item>– Check the proofs in the verifiable parallel shuffle of the voter/tracker pairs<lb/> and their decryption (section 5.3). As in a standard voting scheme using<lb/> mixing for tallying this ensures that the tally is correct and in this case it<lb/> further means that the tracker in the commitment is indeed the one shown<lb/> next to the vote in the tally.<lb/></item>

			<p>We conclude that if these checks are performed then a voter, who decrypts to<lb/> a valid tracker, can be confident that this is the unique tracker assigned to her<lb/> and the corresponding vote on the tally board is the vote stored encrypted on<lb/> WBB.<lb/></p> 

			<p>More elaborate schemes also provide some security for the vote being stored<lb/> as intended, even when the voter&apos;s device is malicious e.g. via Benaloh challenges<lb/> <ref type="biblio">[4]</ref> or by employing hardware tokens <ref type="biblio">[18]</ref>. Selene, can however also provide ver-<lb/>ifiability in this respect. Checking the vote in the tally can reveal if a malicious<lb/> device altered the intended vote. This requires that the voter checks her vote on<lb/> an app or another device not controlled by the adversary. Further, the signature<lb/> key used to cast the vote can also be different from the secret key x i used to<lb/> retrieve the tracker. In this case the device used to cast the vote does not even<lb/> need to know x i . This means that the adversary cannot calculate an alternative<lb/> value for the α term and it will be more difficult to launch an attack. A voter<lb/> can then even use the same device to receive the α term, then store it and first<lb/> then reveal the secret key to get the tracker. Later the voter can then check if it<lb/> gives the right tracker on another device.<lb/></p>

			<head>7.2 Ballot privacy<lb/></head>

			<p>The Selene scheme requires that the underlying ballot casting mechanism pro-<lb/>vides good privacy. Thus the encryption algorithm and its implementation used<lb/> to encrypt the vote should ensure the secrecy of the vote. The first mix of the<lb/> encrypted trackers means that only an adversary controlling all the mix servers<lb/> would know the association of the tracking numbers to the voters, assuming<lb/> that the proofs of the mixing have been checked. The posted commitments to<lb/> the tracking numbers are perfectly hiding unless the adversary colludes with all<lb/> the Tellers. Finally the parallel mix preserve ballot privacy for both the vote<lb/> and the tracker just like in a standard vote scheme using tallying via mix nets.<lb/> Finally, the α term, if this should come in the hand of an adversary, does not<lb/> reveal the tracker since it just a part of an ElGamal encryption of the tracker.<lb/></p>

			<head>7.3 Receipt-freeness<lb/></head>

			<p>In their seminal paper Benaloh and Tuinstra <ref type="biblio">[5]</ref> defines receipt-free (which they<lb/> call uncoercibility) informally as &quot; no voter should be able to convince any other<lb/> participant of the value of its vote &quot; .<lb/></p>

			<p>If the vote casting scheme is receipt-free, e.g. by employing the model of<lb/> BeleniosRF <ref type="biblio">[11]</ref> for the vote casting, then Selene is receipt-free. Basically the<lb/> extra information that the voter has in Selene is the unique tracking number.<lb/> However, the voter can simply fake this (and importantly the corresponding<lb/> α term) since the tally board is presented before the tracker retrieval. We do<lb/> need to assume that he attacker cannot monitor the communication of the α<lb/> terms to the voters. As mentioned before, it can happen that the voter chooses<lb/> a fake tracker which coincide the tracker of the coercer, however, this does not<lb/> constitute a proof of how she voted, it just undermines her claim to that tracker<lb/> and associated vote.<lb/></p>

			<p>To which extent this makes Selene vote buyer resistant is a subject of future<lb/> research. The point is that even though the voter cannot prove her vote, she<lb/> does have extra information, namely the tracker which is unique to her.<lb/></p>

			<p>We also mention that Italian style (aka signature) attacks may be possible<lb/> here when we are dealing with complex ballots. For some voting methods we may<lb/> be able to counter this by splitting up the ballot into components and mixing<lb/> separately.<lb/></p>

			<head>7.4 Coercion: Threats and Mitigation<lb/></head>

			<p>For Selene to be coercion resistant, we firstly need that this is true for the vote<lb/> casting part. Some degree of coercion resistance can be obtained by combining<lb/> BeleniosRF <ref type="biblio">[11]</ref> with vote updating. Another possibility for partial coercion<lb/> resistance is to use the scheme by Kulyk, Teague and Volkamer <ref type="biblio">[22]</ref> where each<lb/> voter can cast several vote values and only the sum of these will count in the<lb/> end. The total number of votes are hidden in a cloud of null votes which any<lb/> participant can cast for the voter.<lb/></p>

			<p>For Selene the extra tracker verification step however also opens up for a<lb/> coercion possibility: the coercer can demand to observe the receipt of the g rj,i .<lb/> Of course the voter can always create a fake term g r<lb/> j,i and pretend to the coercer<lb/> that this is the term that was sent to her, see section 5.4. Further, the terms<lb/> are sent at randomized times and the coercer will thus have to intensively follow<lb/> the voter. However, the possibility of receiving a wrong term while the coercer<lb/> is present, might be discouraging for the voter. A possibility to circumvent this<lb/> is to allow voters to secretly contact the voting authorities to request that only<lb/> the fake g rj,i term that the voter has calculated be communicated back to her.<lb/> They are now safe from the coercion threat, but a coerced voter have lost the<lb/> individual verifiability. This suggests a novel form of coercion resistance, distinct<lb/> from the conventional one in which the voter gets to cast her intended vote and<lb/> to verify it, or coercion evidence, <ref type="biblio">[17]</ref>, in which she gets to verify her vote but<lb/> it might be nullified. Here she gets to cast her vote but if coerced may lose the<lb/> possibility to verify it.<lb/></p>

			<p>The coercion problem might escalate if the coercer is colluding (or pretends<lb/> to be) with one of the Tellers. The voter then has to guess which g rj,i to fake (this<lb/> is incidentally also a problem in Civitas <ref type="biblio">[10]</ref>). In the BeleniosRF construction<lb/> there is a voting authority which is trusted for the receipt-freeness, and in this<lb/> case we can circumvent this danger by letting this authority receive the g rj,i<lb/> terms and only forward the g ri to the voter.<lb/></p>

			<p>True coercion-resistant vote schemes often work with credentials, e.g. Civitas<lb/> <ref type="biblio">[10]</ref>. The voting authority knows the true credential, and the voter can provide<lb/> the coercer(s) with fake credential(s). Where Civitas is not directly compatible<lb/> with Selene, one can imagine to combine its credential construction and the extra<lb/> null votes of <ref type="biblio">[22]</ref> to create a true coercion-resistant scheme compatible with the<lb/> tracker construction. In this case the extra credentials can also be used to make<lb/> the tracker retrieval coercion-resistant. A scheme could be as follows. After the<lb/> tally board is created we allow a certain time for the voters to note the trackers,<lb/> construct fake α-terms and contact the voting authorities privately with these<lb/> terms. After this time the voter can log in to the voting system to get the α term,<lb/> however the credential is also used in this process. The voting authority provide<lb/> the true α term if the correct credential is used. If a fake credential is used, the<lb/> system outputs the corresponding faked α-term which has been provided by the<lb/> voter.<lb/></p>

			<head>7.5 Dispute Resolution<lb/></head>

			<p>Dispute resolution, the ability for a judge to determine the cheating or malfunc-<lb/>tioning component or party when an error is reported, is quite hard to achieve,<lb/> especially in the internet voting context. In Selene this could be tricky. If a voter<lb/> claims that the vote corresponding to their tracker is not what they cast, it is<lb/> hard to determine if it is the voter who is lying or mis-remembering, or the<lb/> system that cheated. But this is a problem with the tracking number approach<lb/> anyway.<lb/></p>

			<p>If a voter insists that the vote on the WBB is wrong, we could resolve this<lb/> if the voter is prepared to sacrifice their ballot privacy by allowing threshold<lb/> decryptions of their ballot for example. This has to be performed with great care<lb/> and suitable controls, and presumably in camera to avoid introducing coercion<lb/> opportunities.<lb/></p>

			<head>8 Selene II<lb/></head>

			<p>The drawback of Selene is that a coerced voter might have the misfortune of<lb/> choosing the coercer&apos;s tracking number, or the coercer simply claims, falsely,<lb/> that this is his tracker. If the threats of the coercer are sufficiently unpleasant<lb/> this possibility could be enough to deflect the voter from voting her intent. The<lb/> goal of this construction is to provide voters with a set of alternative trackers,<lb/> each pointing to one of the candidates, in such a way that these trackers are<lb/> unique to her. If coerced she simply points to the tracker from this set that<lb/> points to the coercers requested candidate, and now the coercer cannot claim<lb/> ownership of this tracker. The tally board will now contain c•v additional tracking<lb/> numbers, where c is the number of the candidates and v is the number of the<lb/> voters. These will give one extra vote per candidate per voter which has to be<lb/> subtracted in the tally. This is ok for simple plurality style elections, but not<lb/> for more elaborate social choice functions, at least not without some adaptation.<lb/> This aspect of the scheme is reminiscent of Rivest&apos;s ThreeBallot <ref type="biblio">[26]</ref>.<lb/></p>

			<p>The necessary extra assumption for this construction is that the encryption<lb/> scheme used to encrypt the cast votes must support Plaintext Equivalence Tests<lb/> (PETs) (see Section 3). This happens to hold for both the schemes <ref type="biblio">[11]</ref> and <ref type="biblio">[22]<lb/></ref> discussed above. For the uncoerced voter this alternative scheme will be just like<lb/> standard Selene. For the coerced voter, the difference is that she can request<lb/> c extra trackers corresponding to a vote for each of the candidates, and these<lb/> trackers are unique to her and cannot coincide with the one of the coercer. Of<lb/> course, care is needed to ensure that a coercer cannot detect such a request, but<lb/> in fact, as we will see shortly, it is possible to make public the c trackers assigned<lb/> to each voter. This removes the need for a coerced voter to specifically request<lb/> them.<lb/></p>

			<p>Thus we start by constructing a total of v · (c + 1) tracking numbers which<lb/> are exponentiated and encrypted trivially as in Selene I:<lb/></p> 

			<formula>n a , g na , {g na } P K T , a = 1, . . . , c · v + v<lb/></formula> 

			<p>As before, the (Mix) Tellers put the last encrypted terms through a sequence<lb/> of verifiable, re-encryption mixes and get:<lb/></p> 

			<p>{g n π(a) }<lb/> P K T<lb/></p>

			<p>These are now assigned to the voters&apos; PKs in groups of c + 1. Let us for<lb/> simplicity denote the trackers given to voter i as n i,k with i = 1, . . . , v, k =<lb/> 1, . . . , c + 1<lb/></p>

			<formula>(P K i , {g n i,k }<lb/> P K T )<lb/></formula>

			<p>Nobody knows the permutation relating the original n a s and the n i,k s. Just as<lb/> in Selene, the Tellers construct a trapdoor commitment, in this case to the last<lb/> tracker n i,c+1<lb/></p>

			<formula>C i := h ri<lb/> i · g ni,c+1<lb/></formula> 

			<p>where r i :=<lb/> t<lb/> j=1 r i,j<lb/></p>

			<p>Now, for each voter there will be a tuple of terms posted to the WBB:<lb/></p>

			<formula>P K i , ({g ni,1 } P K T , {Cand 1 } PK T ) . . . , ({g n i,c } PK T , {Cand c } PK T ),<lb/> ({g ni,c+1 } P K T , h ri<lb/> i · g ni,c+1 , )<lb/> .<lb/></formula>

			<p>The last entry of this tuple is left blank awaiting the voter&apos;s encrypted vote.<lb/> The first c trackers are assigned to a vote for each of the candidates, named<lb/> Cand 1 to Cand c here. The encryptions of these candidates are done with trivial<lb/> randomness for verifiability.<lb/></p>

			<p>The voter now cast her vote {Vote i } PK T which is added to the last entry with<lb/> a corresponding signature and a non-interactive zero knowledge proof. Let us<lb/> denote this Π i . The WBB now have the following tuple for each voter<lb/></p>

			<formula>P K i , ({g ni,1 } P K T , {Cand 1 } PK T ), . . . , ({g n i,c } PK T , {Cand c } PK T ),<lb/> ({g ni,c+1 } P K T , h ri<lb/> i · g ni,c+1 , {Vote i } PK T , Π i )<lb/> .<lb/></formula>

			<p>The tally board is then created by running all pairs of trackers and corre-<lb/>sponding votes through the Mix-net and decrypting to get<lb/></p> 

			<formula>(g na , Vote a ), a = 1, . . . , c · v + v<lb/> </formula>

			<p>By construction this contains an extra vote for each candidate for all voters.<lb/></p>

			<head>8.1 Notification of Tracker Numbers<lb/></head>

			<p>Finally the voters are notified of their tracker n i,c+1 as in Selene, and they can<lb/> use this to check their vote on the tally board. Of course, the verification is not as<lb/> transparent as for the basic Selene scheme: as we will see each voter has revealed<lb/> to them c trackers each of which points to a distinct candidate or option. The<lb/> basic Selene construction notifies them of their &quot; real &quot; tracker, which should point<lb/> to the vote that they cast. Furthermore, the construction guarantees that there<lb/> will be another vote on the WBB identical to the one their tracker points to.<lb/> But this requires a degree of understanding or at least confidence in the crypto.<lb/> It seems that this loss of transparency is an inevitable consequence of seeking a<lb/> higher level of coercion resistance.<lb/></p> 

			<p>For the corresponding voter, the Election Authority takes the pairs<lb/></p>

			<formula>({g ni,1 } P K T , {Cand 1 } PK T ), . . . , ({g n i,c } PK T , {Cand c } PK T ), ({g n i,c+1 } PK T , {Vote i } PK T )<lb/></formula>

			<p>and re-encrypts these for anonymity of the coerced voter. Then it sends these<lb/> re-encrypted terms to a Mix-net that mixes the first c pairs to get:<lb/></p>

			<formula>({g n i,π (1) } P K T , {Cand π (1) } PK T ), . . . , ({g n i,π (c) } PK T , {Cand π (c) } PK T ),<lb/> ({g ni,c+1 } P K T , {Vote i } PK T ).<lb/></formula>

			<p>These pairs are then sent to the Tellers which performs a PET between<lb/> the first c encrypted votes and the last actually cast vote Vote i . Only one of<lb/> these should match assuming a valid vote has been cast. Let us denote the<lb/> corresponding tracker n i,, , that is Vote i = Cand . The corresponding pair is<lb/> removed, then the remaining c encrypted tracking numbers are run through a<lb/> further Mix-net (to ensure ballot privacy) and decrypted by the tellers. The<lb/> result is a set of c trackers<lb/></p> 

			<formula>{n i,k | k = 1, . . . , c + 1} \ {n i,, }<lb/></formula> 

			<p>in which each points to a different candidate. These are posted to the WBB<lb/> against the voter&apos;s ID. Since these are unique to the voter, she can use these safely<lb/> as fake trackers. Of course, the tracker corresponding to the chosen candidate is<lb/> precisely the tracker that the voter will get via the standard Selene approach.<lb/></p>

			<head>8.2 Alternative Approach<lb/></head>

			<p>We will now briefly describe an alternative way of decreasing the chance of<lb/> being caught lying about a faked tracker. The main advantage compared to the<lb/> previous approach is that the tally board this time contains precisely all the votes<lb/> and no extra votes. The idea is simply to remove some of the trackers from this<lb/> final tally on the WBB, say at least two for each candidate, the precise number<lb/> can be changed according to the coercion level. The coerced voter can now claim<lb/> that she is one of the unlucky participants who do not have a tracker on the<lb/> tally board. This could also have happened to the coercer, but since there is at<lb/> least two blanks for every candidate, this is still a possible scenario. If we want<lb/> protection against a coercer who is controlling more voters even more trackers<lb/> need to be removed.<lb/></p>

			<p>Unlike standard Selene, the real trackers, which in this case need to be ran-<lb/>dom, cannot be shown before the tally board creation. Instead the trackers g ni<lb/> are created secretly by the EA, i.e. they are directly posted on WBB as<lb/></p> 

			<formula>{g ni } pk T .<lb/></formula>

			<p>Further, the trackers are drawn from a domain M which has a cardinality being<lb/> polynomial in the security parameter. We think of this set as being known to<lb/> the participants and there has to be an efficient algorithm searching it.<lb/></p>

			<p>The scheme now follows the basic scheme until after the parallel shuffle.<lb/> The decryption of the voter/tracker pairs is now done such that the vote part<lb/> is decrypted first. In the first two instances of a vote for a given candidate the<lb/> corresponding tracker is not decrypted, but the remaining are. The EA assists in<lb/> retrieving the trackers from the exponentiated trackers. Alternatively a version<lb/> of the scheme without exponentiation can also be used. The uniqueness of the<lb/> (revealed) trackers can directly be checked.<lb/></p>

			<p>All voters can retrieve their trackers as in basic Selene, however, a few will not<lb/> find their tracker because it was not decrypted. These voters can check whether<lb/> their tracker belong to M . Since this set is polynomial in size, Theorem 2 in<lb/> Appendix B will also hold in this case, i.e. it is with overwhelming probability<lb/> impossible for an adversary, even colluding with all Tellers, to construct a faked<lb/> α term opening to an element in the set M .<lb/></p>

			<p>The major drawback is than some voters now have lost their ability to check<lb/> their cast vote in the tally. These might protest and even reveal their tracker<lb/> number which they obtain in the Selene construction, and which will be one<lb/> of the removed trackers. However, they cannot prove that this was really their<lb/> tracker. This is important because the coercer can ask the coerced voter what<lb/> her tracker number is, but she can then simply choose a random number from<lb/> M different from all the published trackers. The main danger is if the coerced<lb/> voter by chance then chooses the actual tracker of the coercer (in case he really<lb/> also have one of the missing trackers). However, this probability is<lb/> </p>

			<formula>2<lb/> L<lb/> ·<lb/> 1<lb/> |M | - 2c<lb/> </formula>

			<p>if we removed 2c trackers and in the case that L votes were cast for the coercer&apos;s<lb/> candidate. This is not negligible, but can be controlled and kept very low by<lb/> adjusting the size of M and the security parameter.<lb/></p>

			<head>9 Conclusions<lb/></head>

			<p>We present a new voting protocol, based on the idea of tracking numbers but with<lb/> the twist that voters do not learn their number until after voting has finished<lb/> and the tracker/vote pairs have been posted to the bulletin board. This prevents<lb/> the usual coercer attack on such tracking number systems: the coercer demands<lb/> that the voter hand over her tracking number before the results are posted. We<lb/> also provide a mix net construction that ensures that each voter gets a unique<lb/> tracking number, preventing the attack of assigning the same tracker to voters<lb/> likely to vote the same way. Furthermore, the construction ensures a high level<lb/> of assurance that the voter receives the correct tracker while ensuring that this<lb/> is deniable to a third party.<lb/></p>

			<p>The resulting scheme provides a good level of verifiability and coercion resis-<lb/>tance while at the same time providing a very direct and simple to understand<lb/> mechanism for voter verification. The protocol is not crypto free, but the crypto<lb/> is used in a way that is quite transparent to the voter it is all under the bonnet<lb/> as it were. In particular the voter verification step involves just tracking numbers<lb/> and votes in the clear. Voters do not have to handle encrypted ballots as is the<lb/> case for previous E2E verifiable schemes. A further advantage appears to be that<lb/> we avoid the need to audit the ballots created by the voter&apos;s device. Typically<lb/> this necessitates the introduction of some kind of cut-and-chose protocol into the<lb/> voting ceremony, significantly complicating the voter experience. Now, because<lb/> the voter gets to check her vote in the clear we can sidestep this complication,<lb/> but at the cost of a more complex dispute resolution procedure.<lb/></p>

			<p>In is interesting to note that the Selene construction can be thought of as<lb/> an add-on to an existing non-verifiable scheme, or indeed a conventional E2E<lb/> verifiable scheme for which people want a greater degree of transparency in the<lb/> verification. Indeed Selene could even be retrofitted to a cryptographic election<lb/> that has been contested. Note further that an option is to run the basic Selene<lb/> I scheme but if a significant level of coercion is reported before and during the<lb/> vote casting period, the Selene II constructions could be dynamically added to<lb/> the WBB give the higher degree of coercion resistance.</p>


	</text>
</tei>
