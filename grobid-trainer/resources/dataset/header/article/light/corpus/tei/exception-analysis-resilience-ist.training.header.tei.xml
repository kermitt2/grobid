<?xml version="1.0" ?>
<tei xml:space="preserve">
	<teiHeader>
		<fileDesc xml:id="_exception-analysis-resilience-ist"/>
	</teiHeader>
	<text xml:lang="en">
		<front>
<lb/>
	<docTitle>
	<titlePart>Exception Handling Analysis and Transformation Using Fault Injection:<lb/> Study of Resilience Against Unanticipated Exceptions<lb/></titlePart>
	</docTitle>

	<byline>
	<docAuthor>Benoit Cornu, Lionel Seinturier, and Martin Monperrus<lb/></docAuthor>
	</byline>

	<byline>
	<affiliation>University of Lille &amp; INRIA,</affiliation>
	</byline>

	<address>Lille, France<lb/></address>

	<date>December 18, 2014</date>

	Abstract<lb/>
	<div type="abstract">Context: In software, there are the error cases that<lb/> are anticipated at specification and design time, those<lb/> encountered at development and testing time, and those<lb/> that were never anticipated before happening in produc-<lb/>tion. Is it possible to learn from the anticipated er-<lb/>rors during design to analyze and improve the resilience<lb/> against the unanticipated ones in production?<lb/> Objective: In this paper, we aim at analyzing and im-<lb/>proving how software handles unanticipated exceptions.<lb/> The first objective is to set up contracts about excep-<lb/>tion handling and a way to assess them automatically.<lb/> The second one is to improve the resilience capabilities<lb/> of software by transforming the source code.<lb/> Method: We devise an algorithm, called short-circuit<lb/> testing, which injects exceptions during test suite exe-<lb/>cution so as to simulate unanticipated errors. It is a<lb/> kind of fault-injection techniques dedicated to exception-<lb/>handling. This algorithm collects data that is used for<lb/> verifying two formal contracts that capture two resilience<lb/> properties w.r.t. exceptions: the source-independence<lb/> and pure-resilience contracts. Then we propose a code<lb/> modification technique, called &quot;catch-stretching&quot; which<lb/> allows error-recovery code (of the form of catch blocks)<lb/> to be more resilient.<lb/> Results: Our evaluation is performed on 9 open-source<lb/> software applications and consists in analyzing 241 catch<lb/> blocks executed during test suite execution. Our results<lb/> show that 101/214 of them (47%) expose resilience prop-<lb/>erties as defined by our exception contracts and that<lb/> 84/214 of them (39%) can be transformed to be more<lb/> resilient.<lb/> Conclusion: Our work shows that it is possible to rea-<lb/>son on software resilience by injecting exceptions dur-<lb/>ing test suite execution. The collected information al-<lb/>lows us to apply one source code transformation that<lb/> improves the resilience against unanticipated exceptions.<lb/> This works best if the test suite exercises the exceptional<lb/> programming language constructs in many di erent sce-<lb/>narios.</div>

		</front>
	</text>
</tei>
