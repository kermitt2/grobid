<?xml version="1.0" ?>
<tei xml:space="preserve">
	<teiHeader>
		<fileDesc xml:id="_2104.10542v1"/>
	</teiHeader>
	<text xml:lang="en">
		<front>
<lb/>

	<note type="doctype">Tutorial:<lb/> </note>

	<docTitle>
	<titlePart>Designing Distributed Software in mCRL2<lb/></titlePart>
	</docTitle>
	
	<byline>
	<docAuthor>Jan Friso Groote [0000−0003−2196−6587] and Jeroen J.A.<lb/> Keiren [0000−0002−5772−9527]<lb/></docAuthor>
	</byline>

	<byline>
	<affiliation>Department of Mathematics and Computer Science,<lb/> Eindhoven University of Technology,</affiliation>
	</byline>

	<address>The Netherlands<lb/></address>

	<email>{J.F.Groote,J.J.A.Keiren}@tue.nl<lb/></email>

	Abstract.
	<div type="abstract">Distributed software is very tricky to implement correctly as<lb/> some errors only occur in peculiar situations. For such errors testing is<lb/> not effective. Mathematically proving correctness is hard and time con-<lb/>suming, and therefore, it is rarely done. Fortunately, there is a technique<lb/> in between, namely model checking, that, if applied with skill, is both<lb/> efficient and able to find rare errors.<lb/> In this tutorial we show how to create behavioural models of par-<lb/>allel software, how to specify requirements using modal formulas, and<lb/> how to verify these. For that we use the mCRL2 language and toolset<lb/> (www.mcrl2.org/). We discuss the design of an evolution of well-known<lb/> mutual exclusion protocols, and how model checking not only provides<lb/> insight in their behaviour and correctness, but also guides their design.<lb/></div>

	Keywords:
	<keyword>Model checking • Parallel software • Distributed software •<lb/> mCRL2 toolset • Counterexamples<lb/></keyword>

	<idno>arXiv:2104.10542v1 [cs.LO]</idno>

	<date>21 Apr 2021</date>

		</front>
	</text>
</tei>
