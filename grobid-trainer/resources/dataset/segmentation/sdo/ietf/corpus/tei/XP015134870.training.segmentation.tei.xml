<?xml version="1.0" ?>
<tei xml:space="preserve">
	<teiHeader>
		<fileDesc xml:id="0"/>
	</teiHeader>
	<text xml:lang="en">
			<front>server date 20190827; downloaded by EPO on 20190829 <lb/>6TiSCH <lb/>P. Thubert, Ed. <lb/>Internet-Draft <lb/>Cisco Systems <lb/>Intended status: Informational <lb/>August 27, 2019 <lb/>Expires: February 28, 2020 <lb/>An Architecture for IPv6 over the TSCH mode of IEEE 802.15.4 <lb/>draft-ietf-6tisch-architecture-26 <lb/>Abstract <lb/>This document describes a network architecture that provides low-<lb/>latency, low-jitter and high-reliability packet delivery. It <lb/>combines a high-speed powered backbone and subnetworks using IEEE <lb/>802.15.4 time-slotted channel hopping (TSCH) to meet the requirements <lb/>of LowPower wireless deterministic applications. <lb/>Status of This Memo <lb/>This Internet-Draft is submitted in full conformance with the <lb/>provisions of BCP 78 and BCP 79. <lb/>Internet-Drafts are working documents of the Internet Engineering <lb/>Task Force (IETF). Note that other groups may also distribute <lb/>working documents as Internet-Drafts. The list of current Internet-<lb/>Drafts is at https://datatracker.ietf.org/drafts/current/. <lb/>Internet-Drafts are draft documents valid for a maximum of six months <lb/>and may be updated, replaced, or obsoleted by other documents at any <lb/>time. It is inappropriate to use Internet-Drafts as reference <lb/>material or to cite them other than as &quot;work in progress.&quot; <lb/>This Internet-Draft will expire on February 28, 2020. <lb/>Copyright Notice <lb/>Copyright (c) 2019 IETF Trust and the persons identified as the <lb/>document authors. All rights reserved. <lb/>This document is subject to BCP 78 and the IETF Trust&apos;s Legal <lb/>Provisions Relating to IETF Documents <lb/>(https://trustee.ietf.org/license-info) in effect on the date of <lb/>publication of this document. Please review these documents <lb/>carefully, as they describe your rights and restrictions with respect <lb/>to this document. Code Components extracted from this document must <lb/>include Simplified BSD License text as described in Section 4.e of <lb/>the Trust Legal Provisions and are provided without warranty as <lb/>described in the Simplified BSD License. <lb/></front>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 1] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<div type="toc">Table of Contents <lb/>1. Introduction . . . . . . . . . . . . . . . . . . . . . . . . <lb/>3 <lb/>2. Terminology . . . . . . . . . . . . . . . . . . . . . . . . . <lb/>5 <lb/>2.1. New Terms . . . . . . . . . . . . . . . . . . . . . . . . <lb/>5 <lb/>2.2. Abbreviations . . . . . . . . . . . . . . . . . . . . . . 10 <lb/>2.3. Related Documents . . . . . . . . . . . . . . . . . . . . 11 <lb/>3. High Level Architecture . . . . . . . . . . . . . . . . . . . 12 <lb/>3.1. A Non-Broadcast Multi-Access Radio Mesh Network . . . . . 12 <lb/>3.2. A Multi-Link Subnet Model . . . . . . . . . . . . . . . . 14 <lb/>3.3. TSCH: A Deterministic MAC Layer . . . . . . . . . . . . . 16 <lb/>3.4. Scheduling TSCH . . . . . . . . . . . . . . . . . . . . . 17 <lb/>3.5. Distributed vs. Centralized Routing . . . . . . . . . . . 18 <lb/>3.6. Forwarding Over TSCH . . . . . . . . . . . . . . . . . . 19 <lb/>3.7. 6TiSCH Stack . . . . . . . . . . . . . . . . . . . . . . 20 <lb/>3.8. Communication Paradigms and Interaction Models . . . . . 22 <lb/>4. Architecture Components . . . . . . . . . . . . . . . . . . . 23 <lb/>4.1. 6LoWPAN (and RPL) . . . . . . . . . . . . . . . . . . . . 23 <lb/>4.1.1. RPL-Unaware Leaves and 6LoWPAN ND . . . . . . . . . . 23 <lb/>4.1.2. 6LBR and RPL Root . . . . . . . . . . . . . . . . . . 23 <lb/>4.2. Network Access and Addressing . . . . . . . . . . . . . . 24 <lb/>4.2.1. Join Process . . . . . . . . . . . . . . . . . . . . 24 <lb/>4.2.2. Registration . . . . . . . . . . . . . . . . . . . . 26 <lb/>4.3. TSCH and 6top . . . . . . . . . . . . . . . . . . . . . . 28 <lb/>4.3.1. 6top . . . . . . . . . . . . . . . . . . . . . . . . 28 <lb/>4.3.2. Scheduling Functions and the 6top protocol . . . . . 29 <lb/>4.3.3. 6top and RPL Objective Function operations . . . . . 31 <lb/>4.3.4. Network Synchronization . . . . . . . . . . . . . . . 31 <lb/>4.3.5. Slotframes and CDU matrix . . . . . . . . . . . . . . 33 <lb/>4.3.6. Distributing the reservation of cells . . . . . . . . 34 <lb/>4.4. Schedule Management Mechanisms . . . . . . . . . . . . . 35 <lb/>4.4.1. Static Scheduling . . . . . . . . . . . . . . . . . . 35 <lb/>4.4.2. Neighbor-to-neighbor Scheduling . . . . . . . . . . . 36 <lb/>4.4.3. Remote Monitoring and Schedule Management . . . . . . 36 <lb/>4.4.4. Hop-by-hop Scheduling . . . . . . . . . . . . . . . . 39 <lb/>4.5. On Tracks . . . . . . . . . . . . . . . . . . . . . . . . 39 <lb/>4.5.1. General Behavior of Tracks . . . . . . . . . . . . . 40 <lb/>4.5.2. Serial Track . . . . . . . . . . . . . . . . . . . . 40 <lb/>4.5.3. Complex Track with Replication and Elimination . . . 41 <lb/>4.5.4. DetNet End-to-end Path . . . . . . . . . . . . . . . 41 <lb/>4.5.5. Cell Reuse . . . . . . . . . . . . . . . . . . . . . 42 <lb/>4.6. Forwarding Models . . . . . . . . . . . . . . . . . . . . 43 <lb/>4.6.1. Track Forwarding . . . . . . . . . . . . . . . . . . 43 <lb/>4.6.2. IPv6 Forwarding . . . . . . . . . . . . . . . . . . . 46 <lb/>4.6.3. Fragment Forwarding . . . . . . . . . . . . . . . . . 46 <lb/>4.7. Advanced 6TiSCH Routing . . . . . . . . . . . . . . . . . 48 <lb/>4.7.1. Packet Marking and Handling . . . . . . . . . . . . . 48 <lb/>4.7.2. Replication, Retries and Elimination . . . . . . . . 49 <lb/></div>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 2] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<div type="toc">5. IANA Considerations . . . . . . . . . . . . . . . . . . . . . 51 <lb/>6. Security Considerations . . . . . . . . . . . . . . . . . . . 51 <lb/>6.1. Availability of Remote Services . . . . . . . . . . . . . 51 <lb/>6.2. Selective Jamming . . . . . . . . . . . . . . . . . . . . 52 <lb/>6.3. MAC-Layer Security . . . . . . . . . . . . . . . . . . . 52 <lb/>6.4. Time Synchronization . . . . . . . . . . . . . . . . . . 53 <lb/>6.5. Validating ASN . . . . . . . . . . . . . . . . . . . . . 54 <lb/>6.6. Network Keying and Rekeying . . . . . . . . . . . . . . . 54 <lb/>7. Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . 56 <lb/>7.1. Contributors . . . . . . . . . . . . . . . . . . . . . . 56 <lb/>7.2. Special Thanks . . . . . . . . . . . . . . . . . . . . . 57 <lb/>7.3. And Do not Forget . . . . . . . . . . . . . . . . . . . . 57 <lb/>8. References . . . . . . . . . . . . . . . . . . . . . . . . . 58 <lb/>8.1. Normative References . . . . . . . . . . . . . . . . . . 58 <lb/>8.2. Informative References . . . . . . . . . . . . . . . . . 62 <lb/>Appendix A. Related Work In Progress . . . . . . . . . . . . . . 67 <lb/>A.1. Unchartered IETF work items . . . . . . . . . . . . . . . 68 <lb/>A.1.1. 6TiSCH Zerotouch security . . . . . . . . . . . . . . 68 <lb/>A.1.2. 6TiSCH Track Setup . . . . . . . . . . . . . . . . . 68 <lb/>A.1.3. Using BIER in a 6TiSCH Network . . . . . . . . . . . 69 <lb/>A.2. External (non-IETF) work items . . . . . . . . . . . . . 69 <lb/>Author&apos;s Address . . . . . . . . . . . . . . . . . . . . . . . . 70 <lb/></div>

			<body>1. Introduction <lb/>Wireless Networks enable a wide variety of devices of any size to get <lb/>interconnected, often at a very low marginal cost per device, at any <lb/>range, and in circumstances where wiring may be impractical, for <lb/>instance on fast-moving or rotating devices. <lb/>On the other hand, Deterministic Networking maximizes the packet <lb/>delivery ratio within a bounded latency so as to enable mission-<lb/>critical machine-to-machine (M2M) operations. Applications that need <lb/>such networks are presented in [I-D.ietf-detnet-use-cases] and <lb/>[I-D.bernardos-raw-use-cases], which presents a number of additional <lb/>use cases for Reliable and Available Wireless networks. The <lb/>considered applications include Professional Media, Industrial <lb/>Automation Control Systems (IACS), building automation, in-vehicle <lb/>command and control, commercial automation and asset tracking with <lb/>mobile scenarios, as well as gaming, drones and edge robotic control, <lb/>and home automation applications. <lb/>The Timeslotted Channel Hopping (TSCH) [RFC7554] mode of the IEEE <lb/>Std. 802.15.4 [IEEE802154] Medium Access Control (MAC) was introduced <lb/>with the IEEE Std. 802.15.4e [IEEE802154e] amendment and is now <lb/>retrofitted in the main standard. For all practical purposes, this <lb/>document is expected to be insensitive to the revisions of that <lb/>standard, which is thus referenced without a date. TSCH is both a <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 3] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>Time-Division Multiplexing and a Frequency-Division Multiplexing <lb/>technique whereby a different channel can be used for each <lb/>transmission, and that allows to schedule transmissions for <lb/>deterministic operations, and applies to the slower and most energy <lb/>constrained wireless use cases. <lb/>The scheduled operation provides for a more reliable experience which <lb/>can be used to monitor and manage resources, e.g., energy and water, <lb/>in a more efficient fashion. <lb/>Proven Deterministic Networking standards for use in Process Control, <lb/>including ISA100.11a [ISA100.11a] and WirelessHART [WirelessHART], <lb/>have demonstrated the capabilities of the IEEE Std. 802.15.4 TSCH MAC <lb/>for high reliability against interference, low-power consumption on <lb/>well-known flows, and its applicability for Traffic Engineering (TE) <lb/>from a central controller. <lb/>To enable the convergence of Information Technology (IT) and <lb/>Operational Technology (OT) in Low-Power Lossy Networks (LLNs), the <lb/>6TiSCH Architecture supports an IETF suite of protocols over the IEEE <lb/>Std. 802.15.4 TSCH MAC to provide IP connectivity for energy and <lb/>otherwise constrained wireless devices. <lb/>The 6TiSCH Architecture relies on IPv6 [RFC8200] and the use of <lb/>routing to provide large scaling capabilities. The addition of a <lb/>high-speed federating backbone adds yet another degree of scalability <lb/>to the design. The backbone is typically a Layer-2 transit Link such <lb/>as an Ethernet bridged network, but it can also be a more complex <lb/>routed structure. <lb/>The 6TiSCH Architecture introduces an IPv6 Multi-Link subnet model <lb/>that is composed of a federating backbone and a number of IEEE Std. <lb/>802.15.4 TSCH low-power wireless networks federated and synchronized <lb/>by Backbone Routers. If the backbone is a Layer-2 transit Link then <lb/>the Backbone Routers can operate as an IPv6 Neighbor Discovery (IPv6 <lb/>ND) [RFC4861] proxy. <lb/>The 6TiSCH Architecture leverages 6LoWPAN [RFC4944] to adapt IPv6 to <lb/>the constrained media and RPL [RFC6550] for the distributed routing <lb/>operations. <lb/>Centralized routing refers to a model where routes are computed and <lb/>resources are allocated from a central controller. This is <lb/>particularly helpful to schedule deterministic multihop <lb/>transmissions. In contrast, Distributed Routing refers to a model <lb/>that relies on concurrent peer to peer protocol exchanges for TSCH <lb/>resource allocation and routing operations. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 4] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>The architecture defines mechanisms to establish and maintain routing <lb/>and scheduling in a centralized, distributed, or mixed fashion, for <lb/>use in multiple OT environments. It is applicable in particular to <lb/>highly scalable solutions such as used in Advanced Metering <lb/>Infrastructure [AMI] solutions that leverage distributed routing to <lb/>enable multipath forwarding over large LLN meshes. <lb/>2. Terminology <lb/>2.1. New Terms <lb/>The draft does not reuse terms from the IEEE Std. 802.15.4 <lb/>[IEEE802154] standard such as &quot;path&quot; or &quot;link&quot; which bear a meaning <lb/>that is quite different from classical IETF parlance. <lb/>This document adds the following terms: <lb/>6TiSCH (IPv6 over the TSCH mode of IEEE 802.15.4): 6TiSCH defines an <lb/>adaptation sublayer for IPv6 over TSCH called 6top, a set <lb/>of protocols for setting up a TSCH schedule in <lb/>distributed approach, and a security solution. 6TiSCH may <lb/>be extended in the future for other MAC/PHY pairs <lb/>providing a service similar to TSCH. <lb/>6top (6TiSCH Operation Sublayer): The next higher layer of the IEEE <lb/>Std. 802.15.4 TSCH MAC layer. 6top provides the <lb/>abstraction of an IP link over a TSCH MAC, schedules <lb/>packets over TSCH cells, and exposes a management <lb/>interface to schedule TSCH cells. <lb/>6P (6top Protocol): The protocol defined in [RFC8480]. 6P enables <lb/>Layer-2 peers to allocate, move or deallocate cells in <lb/>their respective schedules to communicate. 6P operates <lb/>at the 6top layer. <lb/>6P Transaction: A 2-way or 3-way sequence of 6P messages used by <lb/>Layer-2 peers to modify their communication schedule. <lb/>ASN (Absolute Slot Number): Defined in [IEEE802154], the ASN is the <lb/>total number of timeslots that have elapsed since the <lb/>Epoch Time when the TSCH network started. Incremented by <lb/>one at each timeslot. It is wide enough to not roll over <lb/>in practice. <lb/>bundle: <lb/>A group of equivalent scheduled cells, i.e., cells <lb/>identified by different [slotOffset, channelOffset], <lb/>which are scheduled for a same purpose, with the same <lb/>neighbor, with the same flags, and the same slotframe. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 5] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>The size of the bundle refers to the number of cells it <lb/>contains. For a given slotframe length, the size of the <lb/>bundle translates directly into bandwidth. A bundle is a <lb/>local abstraction that represents a half-duplex link for <lb/>either sending or receiving, with bandwidth that amounts <lb/>to the sum of the cells in the bundle. <lb/>Layer-2 vs. Layer-3 bundle: Bundles are associated for either <lb/>Layer-2 (switching) or Layer-3 (routing) forwarding <lb/>operations. A pair of Layer-3 bundles (one for each <lb/>direction) maps to an IP Link with a neighbor, whereas a <lb/>set of Layer-2 bundles (of an &quot;arbitrary&quot; cardinality and <lb/>direction) corresponds to the relation of one or more <lb/>incoming bundle(s) from the previous-hop neighbor(s) with <lb/>one or more outgoing bundle(s) to the next-hop <lb/>neighbor(s) along a Track as part of the switching role, <lb/>which may include replication and elimination. <lb/>CCA (Clear Channel Assessment): A mechanism defined in [IEEE802154] <lb/>whereby nodes listen to the channel before sending to <lb/>detect ongoing transmissions from other parties. Because <lb/>the network is synchronized, CCA cannot be used to detect <lb/>colliding transmissions within the same network, but it <lb/>can be used to detect other radio networks in vicinity. <lb/>cell: <lb/>A unit of transmission resource in the CDU matrix, a cell <lb/>is identified by a slotOffset and a channelOffset. A <lb/>cell can be scheduled or unscheduled. <lb/>Channel Distribution/Usage (CDU) matrix: : A matrix of cells (i,j) <lb/>representing the spectrum (channel) distribution among <lb/>the different nodes in the 6TiSCH network. The CDU <lb/>matrix has width in timeslots, equal to the period of the <lb/>network scheduling operation, and height equal to the <lb/>number of available channels. Every cell (i,j) in the <lb/>CDU, identified by (slotOffset, channelOffset), belongs <lb/>to a specific chunk. <lb/>channelOffset: Identifies a row in the TSCH schedule. The number of <lb/>channelOffset values is bounded by the number of <lb/>available frequencies. The channelOffset translates into <lb/>a frequency with a function that depends on the absolute <lb/>time when the communication takes place, resulting in a <lb/>channel hopping operation. <lb/>chunk: <lb/>A well-known list of cells, distributed in time and <lb/>frequency, within a CDU matrix. A chunk represents a <lb/>portion of a CDU matrix. The partition of the CDU matrix <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 6] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>in chunks is globally known by all the nodes in the <lb/>network to support the appropriation process, which is a <lb/>negotiation between nodes within an interference domain. <lb/>A node that manages to appropriate a chunk gets to decide <lb/>which transmissions will occur over the cells in the <lb/>chunk within its interference domain, i.e., a parent node <lb/>will decide when the cells within the appropriated chunk <lb/>are used and by which node, among its children. <lb/>CoJP (Constrained Join Protocol): The Constrained Join Protocol <lb/>(CoJP) enables a pledge to securely join a 6TiSCH network <lb/>and obtain network parameters over a secure channel. <lb/>Minimal Security Framework for 6TiSCH <lb/>[I-D.ietf-6tisch-minimal-security] defines the minimal <lb/>CoJP setup with pre-shared keys defined. In that mode, <lb/>CoJP can operate with a single round trip exchange. <lb/>dedicated cell: A cell that is reserved for a given node to transmit <lb/>to a specific neighbor. <lb/>deterministic network: The generic concept of deterministic network <lb/>is defined in [I-D.ietf-detnet-architecture]. When <lb/>applied to 6TiSCH, it refers to the reservation of Tracks <lb/>which guarantees an end-to-end latency and optimizes the <lb/>Packet Delivery Ratio (PDR) for well-characterized flows. <lb/>distributed cell reservation: A reservation of a cell done by one or <lb/>more in-network entities. <lb/>distributed Track reservation: A reservation of a Track done by one <lb/>or more in-network entities. <lb/>EB (Enhanced Beacon): A special frame defined in [IEEE802154] used <lb/>by a node, including the JP, to announce the presence of <lb/>the network. It contains enough information for a pledge <lb/>to synchronize to the network. <lb/>hard cell: A scheduled cell which the 6top sublayer may not <lb/>relocate. <lb/>hopping sequence: Ordered sequence of frequencies, identified by a <lb/>Hopping_Sequence_ID, used for channel hopping when <lb/>translating the channelOffset value into a frequency. <lb/>IE (Information Element): Type-Length-Value containers placed at the <lb/>end of the MAC header, used to pass data between layers <lb/>or devices. Some IE identifiers are managed by the IEEE <lb/>[IEEE802154]. Some IE identifiers are managed by the <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 7] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>IETF [RFC8137], and <lb/>[I-D.ietf-6tisch-enrollment-enhanced-beacon] uses one <lb/>subtype to support the selection of the Join Proxy. <lb/>join process: The overall process that includes the discovery of the <lb/>network by pledge(s) and the execution of the join <lb/>protocol. <lb/>join protocol: The protocol that allows the pledge to join the <lb/>network. The join protocol encompasses authentication, <lb/>authorization and parameter distribution. The join <lb/>protocol is executed between the pledge and the JRC. <lb/>joined node: The new device, after having completed the join <lb/>process, often just called a node. <lb/>JP (Join Proxy): Node already part of the 6TiSCH network that serves <lb/>as a relay to provide connectivity between the pledge and <lb/>the JRC. The JP announces the presence of the network by <lb/>regularly sending EB frames. <lb/>JRC (Join Registrar/Coordinator): Central entity responsible for the <lb/>authentication, authorization and configuration of the <lb/>pledge. <lb/>link: <lb/>A communication facility or medium over which nodes can <lb/>communicate at the Link-Layer, the layer immediately <lb/>below IP. In 6TiSCH, the concept is implemented as a <lb/>collection of Layer-3 bundles. Note: the IETF parlance <lb/>for the term &quot;Link&quot; is adopted, as opposed to the IEEE <lb/>Std. 802.15.4 terminology. <lb/>Operational Technology: OT refers to technology used in automation, <lb/>for instance in industrial control networks. The <lb/>convergence of IT and OT is the main object of the <lb/>Industrial Internet of Things (IIOT). <lb/>pledge: <lb/>A new device that attempts to join a 6TiSCH network. <lb/>(to) relocate a cell: The action operated by the 6top sublayer of <lb/>changing the slotOffset and/or channelOffset of a soft <lb/>cell. <lb/>(to) schedule a cell: The action of turning an unscheduled cell into <lb/>a scheduled cell. <lb/>scheduled cell: A cell which is assigned a neighbor MAC address <lb/>(broadcast address is also possible), and one or more of <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 8] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>the following flags: TX, RX, Shared and Timekeeping. A <lb/>scheduled cell can be used by the IEEE Std. 802.15.4 TSCH <lb/>implementation to communicate. A scheduled cell can <lb/>either be a hard or a soft cell. <lb/>SF (6top Scheduling Function): The cell management entity that adds <lb/>or deletes cells dynamically based on application <lb/>networking requirements. The cell negotiation with a <lb/>neighbor is done using 6P. <lb/>SFID (6top Scheduling Function Identifier): A 4-bit field <lb/>identifying an SF. <lb/>shared cell: A cell marked with both the &quot;TX&quot; and &quot;shared&quot; flags. <lb/>This cell can be used by more than one transmitter node. <lb/>A back-off algorithm is used to resolve contention. <lb/>slotframe: A collection of timeslots repeating in time, analogous to <lb/>a superframe in that it defines periods of communication <lb/>opportunities. It is characterized by a slotframe_ID, <lb/>and a slotframe_size. Multiple slotframes can coexist in <lb/>a node&apos;s schedule, i.e., a node can have multiple <lb/>activities scheduled in different slotframes, based on <lb/>the priority of its packets/traffic flows. The timeslots <lb/>in the Slotframe are indexed by the SlotOffset; the first <lb/>timeslot is at SlotOffset 0. <lb/>slotOffset: A column in the TSCH schedule, i.e., the number of <lb/>timeslots since the beginning of the current iteration of <lb/>the slotframe. <lb/>soft cell: A scheduled cell which the 6top sublayer can relocate. <lb/>time source neighbor: A neighbor that a node uses as its time <lb/>reference, and to which it needs to keep its clock <lb/>synchronized. <lb/>timeslot: <lb/>A basic communication unit in TSCH which allows a <lb/>transmitter node to send a frame to a receiver neighbor, <lb/>and that receiver neighbor to optionally send back an <lb/>acknowledgment. <lb/>Track: <lb/>A Track is a Directed Acyclic Graph (DAG) that is used as <lb/>a complex multi-hop path to the destination(s) of the <lb/>path. In the case of unicast traffic, the Track is a <lb/>Destination Oriented DAG (DODAG) where the Root of the <lb/>DODAG is the destination of the unicast traffic. A Track <lb/>enables replication, elimination and reordering functions <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 9] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>on the way (more on those functions in the Deterministic <lb/>Networking Architecture [I-D.ietf-detnet-architecture]). <lb/>A Track reservation locks physical resources such as <lb/>cells and buffers in every node along the DODAG. A Track <lb/>is associated with a owner that can be for instance the <lb/>destination of the Track. <lb/>TrackID: <lb/>A TrackID is either globally unique, or locally unique to <lb/>the Track owner, in which case the identification of the <lb/>owner must be provided together with the TrackID to <lb/>provide a full reference to the Track. If the Track <lb/>owner is the destination of the Track then the <lb/>destination IP address of packets along the Track can be <lb/>used as identification of the owner and a local <lb/>InstanceID [RFC6550] can be used as TrackID. In that <lb/>case, a RPL Packet Information [RFC6550] in an IPv6 <lb/>packet can unambiguously identify the Track and can be <lb/>expressed in a compressed form using [RFC8138]. <lb/>TSCH: <lb/>A medium access mode of the IEEE Std. 802.15.4 <lb/>[IEEE802154] standard which uses time synchronization to <lb/>achieve ultra-low-power operation, and channel hopping to <lb/>enable high reliability. <lb/>TSCH Schedule: A matrix of cells, each cell indexed by a slotOffset <lb/>and a channelOffset. The TSCH schedule contains all the <lb/>scheduled cells from all slotframes and is sufficient to <lb/>qualify the communication in the TSCH network. The <lb/>number of channelOffset values (the &quot;height&quot; of the <lb/>matrix) is equal to the number of available frequencies. <lb/>Unscheduled Cell: A cell which is not used by the IEEE Std. 802.15.4 <lb/>TSCH implementation. <lb/>2.2. Abbreviations <lb/>This document uses the following abbreviations: <lb/>6BBR: 6LoWPAN Backbone Router (router with a proxy ND function) <lb/>6LBR: 6LoWPAN Border Router (authoritative on DAD) <lb/>6LN: 6LoWPAN Node <lb/>6LR: 6LoWPAN Router (relay to the registration process) <lb/>6CIO: Capability Indication Option <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 10] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>(E)ARO: (Extended) Address Registration Option <lb/>(E)DAR: (Extended) Duplicate Address Request <lb/>(E)DAC: (Extended) Duplicate Address Confirmation <lb/>DAD: Duplicate Address Detection <lb/>DODAG: Destination-Oriented Directed Acyclic Graph <lb/>LLN: Low-Power and Lossy Network (a typical IoT network) <lb/>NA: <lb/>Neighbor Advertisement <lb/>NCE: Neighbor Cache Entry <lb/>ND: <lb/>Neighbor Discovery <lb/>NDP: Neighbor Discovery Protocol <lb/>PCE: Path Computation Element <lb/>NME: Network Management Entity <lb/>ROVR: Registration Ownership Verifier (pronounced rover) <lb/>RPL: IPv6 Routing Protocol for LLNs (pronounced ripple) <lb/>RA: <lb/>Router Advertisement <lb/>RS: <lb/>Router Solicitation <lb/>TSCH: timeslotted Channel Hopping <lb/>TID: Transaction ID (a sequence counter in the EARO) <lb/>2.3. Related Documents <lb/>The draft also conforms to the terms and models described in <lb/>[RFC3444] and [RFC5889] and uses the vocabulary and the concepts <lb/>defined in [RFC4291] for the IPv6 Architecture and refers [RFC4080] <lb/>for reservation <lb/>The draft uses domain-specific terminology defined or referenced in: <lb/>6LoWPAN ND &quot;Neighbor Discovery Optimization for Low-power and <lb/>Lossy Networks&quot; [RFC6775] and &quot;Registration Extensions for 6LoWPAN <lb/>Neighbor Discovery&quot; [RFC8505], <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 11] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>&quot;Terms Used in Routing for Low-Power and Lossy Networks (LLNs)&quot; <lb/>[RFC7102], <lb/>and RPL &quot;Objective Function Zero for the Routing Protocol for Low-<lb/>Power and Lossy Networks (RPL)&quot; [RFC6552], and &quot;RPL: IPv6 Routing <lb/>Protocol for Low-Power and Lossy Networks&quot; [RFC6550]. <lb/>Other terms in use in LLNs are found in &quot;Terminology for Constrained-<lb/>Node Networks&quot; [RFC7228]. <lb/>Readers are expected to be familiar with all the terms and concepts <lb/>that are discussed in <lb/>o &quot;Neighbor Discovery for IP version 6&quot; [RFC4861], and &quot;IPv6 <lb/>Stateless Address Autoconfiguration&quot; [RFC4862]. <lb/>In addition, readers would benefit from reading: <lb/>o &quot;Problem Statement and Requirements for IPv6 over Low-Power <lb/>Wireless Personal Area Network (6LoWPAN) Routing&quot; [RFC6606], <lb/>o &quot;Multi-Link Subnet Issues&quot; [RFC4903], and <lb/>o &quot;IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs): <lb/>Overview, Assumptions, Problem Statement, and Goals&quot; [RFC4919] <lb/>prior to this specification for a clear understanding of the art in <lb/>ND-proxying and binding. <lb/>3. High Level Architecture <lb/>3.1. A Non-Broadcast Multi-Access Radio Mesh Network <lb/>A 6TiSCH network is an IPv6 [RFC8200] subnet which, in its basic <lb/>configuration illustrated in Figure 1, is a single Low-Power Lossy <lb/>Network (LLN) operating over a synchronized TSCH-based mesh. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 12] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>---+--------............ ------------<lb/>| <lb/>External Network <lb/>| <lb/>| <lb/>+-----+ <lb/>+-----+ <lb/>| NME | <lb/>| <lb/>| LLN Border <lb/>| PCE | <lb/>| <lb/>| router (6LBR) <lb/>+-----+ <lb/>+-----+ <lb/>o <lb/> o <lb/>o <lb/>o <lb/>o <lb/>o <lb/>o <lb/>o <lb/>o <lb/>o 6LoWPAN + RPL o <lb/>o <lb/>o <lb/>o <lb/>o <lb/>o <lb/> Figure 1: Basic Configuration of a 6TiSCH Network <lb/>Inside a 6TiSCH LLN, nodes rely on 6LoWPAN Header Compression <lb/>(6LoWPAN HC) [RFC6282] to encode IPv6 packets. From the perspective <lb/>of the network layer, a single LLN interface (typically an IEEE Std. <lb/>802.15.4-compliant radio) may be seen as a collection of Links with <lb/>different capabilities for unicast or multicast services. <lb/>6TiSCH nodes join a mesh network by attaching to nodes that are <lb/>already members of the mesh (see Section 4.2.1). The security <lb/>aspects of the join process are further detailed in Section 6. In a <lb/>mesh network, 6TiSCH nodes are not necessarily reachable from one <lb/>another at Layer-2 and an LLN may span over multiple links. <lb/>This forms a homogeneous non-broadcast multi-access (NBMA) subnet, <lb/>which is beyond the scope of IPv6 Neighbor Discovery (IPv6 ND) <lb/>[RFC4861][RFC4862]. 6LoWPAN Neighbor Discovery (6LoWPAN ND) <lb/>[RFC6775][RFC8505] specifies extensions to IPv6 ND that enable ND <lb/>operations in this type of subnet that can be protected against <lb/>address theft and impersonation with [I-D.ietf-6lo-ap-nd]. <lb/>Once it has joined the 6TiSCH network, a node acquires IPv6 Addresses <lb/>and register them using 6LoWPAN ND. This guarantees that the <lb/>addresses are unique and protects the address ownership over the <lb/>subnet, more in Section 4.2.2. <lb/>Within the NBMA subnet, RPL [RFC6550] enables routing in the so-<lb/>called Route Over fashion, either in storing (stateful) or non-<lb/>storing (stateless, with routing headers) mode. From there, some <lb/>nodes can act as routers for 6LoWPAN ND and RPL operations, as <lb/>detailed in Section 4.1. <lb/>With TSCH, devices are time-synchronized at the MAC level. The use <lb/>of a particular RPL Instance for time synchronization is discussed in <lb/>Section 4.3.4. With this mechanism, the time synchronization starts <lb/>at the RPL Root and follows the RPL loopless routing topology. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 13] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>RPL forms Destination Oriented Directed Acyclic Graphs (DODAGs) <lb/>within Instances of the protocol, each Instance being associated with <lb/>an Objective Function (OF) to form a routing topology. A particular <lb/>6TiSCH node, the LLN Border Router (6LBR), acts as RPL Root, 6LoWPAN <lb/>HC terminator, and Border Router for the LLN to the outside. The <lb/>6LBR is usually powered. More on RPL Instances can be found in <lb/>section 3.1 of RPL [RFC6550], in particular &quot;3.1.2. RPL Identifiers&quot; <lb/>and &quot;3.1.3. Instances, DODAGs, and DODAG Versions&quot;. RPL adds <lb/>artifacts in the data packets that are compressed with a 6LoWPAN <lb/>addition 6LoRH [RFC8138]. <lb/>Additional routing and scheduling protocols may be deployed to <lb/>establish on-demand Peer-to-Peer routes with particular <lb/>characteristics inside the 6TiSCH network. This may be achieved in a <lb/>centralized fashion by a Path Computation Element (PCE) [PCE] that <lb/>programs both the routes and the schedules inside the 6TiSCH nodes, <lb/>or by in a distributed fashion using a reactive routing protocol and <lb/>a Hop-by-Hop scheduling protocol. <lb/>This architecture expects that a 6LoWPAN node can connect as a leaf <lb/>to a RPL network, where the leaf support is the minimal functionality <lb/>to connect as a host to a RPL network without the need to participate <lb/>to the full routing protocol. The architecture also expects that a <lb/>6LoWPAN node that is not aware at all of the RPL protocol may also <lb/>connect as described in [I-D.ietf-roll-unaware-leaves]. <lb/>3.2. A Multi-Link Subnet Model <lb/>An extended configuration of the subnet comprises multiple LLNs as <lb/>illustrated in Figure 2. In the extended configuration, a Routing <lb/>Registrar [RFC8505] may be connected to the node that acts as RPL <lb/>Root and / or 6LoWPAN 6LBR and provides connectivity to the larger <lb/>campus / factory plant network over a high-speed backbone or a back-<lb/>haul link. The Routing registrar may perform IPv6 ND proxy <lb/>operations, or redistribute the registration in a routing protocol <lb/>such as OSPF [RFC5340] or BGP [RFC2545], or inject a route in a <lb/>mobility protocol such as MIPv6 [RFC6275], NEMO [RFC3963], or LISP <lb/>[RFC6830]. <lb/>Multiple LLNs can be interconnected and possibly synchronized over a <lb/>backbone, which can be wired or wireless. The backbone can operate <lb/>with IPv6 ND [RFC4861][RFC4862] procedures or an hybrid of IPv6 ND <lb/>and 6LoWPAN ND [RFC6775][RFC8505][I-D.ietf-6lo-ap-nd]. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 14] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>| <lb/>+-----+ <lb/>+-----+ <lb/>+-----+ <lb/>(default) | <lb/>| <lb/>(Optional) | <lb/>| <lb/>| <lb/>| IPv6 <lb/>Router | <lb/>| <lb/>6LBR | <lb/>| <lb/>| <lb/>| Node <lb/>+-----+ <lb/>+-----+ <lb/>+-----+ <lb/>| Backbone side <lb/>| <lb/>| <lb/>--------+---+--------------------+-+---------------+------+---<lb/>| <lb/>| <lb/>| <lb/>+-----------+ <lb/>+-----------+ <lb/>+-----------+ <lb/>| Routing <lb/>| <lb/>| Routing <lb/>| <lb/>| Routing <lb/>| <lb/>| Registrar | <lb/>| Registrar | <lb/>| Registrar | <lb/>+-----------+ <lb/>+-----------+ <lb/>+-----------+ <lb/> o <lb/>Wireless side <lb/>o o <lb/>o o <lb/>o o <lb/>o o <lb/>o o <lb/>o o o <lb/>o o o o o <lb/>o <lb/>6TiSCH <lb/>o <lb/>6TiSCH <lb/>o o <lb/>o o 6TiSCH o <lb/>o <lb/>o LLN <lb/>o o <lb/>o o LLN <lb/>o <lb/>o <lb/>LLN <lb/>o <lb/>o <lb/>o o o o <lb/>o o o o o <lb/>o o <lb/>o <lb/>o <lb/>Figure 2: Extended Configuration of a 6TiSCH Network <lb/>A Routing Registrar that performs proxy IPv6 ND operations over the <lb/>backbone on behalf of the 6TiSCH nodes is called a Backbone Router <lb/>(6BBR) [I-D.ietf-6lo-backbone-router]. The 6BBRs are placed along <lb/>the wireless edge of a Backbone, and federate multiple wireless links <lb/>to form a single MultiLink Subnet. The 6BBRs synchronize with one <lb/>another over the backbone, so as to ensure that the multiple LLNs <lb/>that form the IPv6 subnet stay tightly synchronized. <lb/>The use of multicast can also be reduced on the backbone with a <lb/>registrar that would contribute to Duplicate Address Detection as <lb/>well as Address Lookup using only unicast request/response exchanges. <lb/>[I-D.thubert-6man-unicast-lookup] is a proposed method that presents <lb/>an example of how to this could be achieved with an extension of <lb/>[RFC8505], using an optional 6LBR as a SubNet-level registrar, as <lb/>illustrated in Figure 2. <lb/>As detailed in Section 4.1 the 6LBR that serves the LLN and the Root <lb/>of the RPL network need to share information about the devices that <lb/>are learned through either 6LoWPAN ND or RPL but not both. The <lb/>preferred way of achieving this is to collocate/combine them. The <lb/>combined RPL Root and 6LBR may be collocated with the 6BBR, or <lb/>directly attached to the 6BBR. In the latter case, it leverages the <lb/>extended registration process defined in [RFC8505] to proxy the <lb/>6LoWPAN ND registration to the 6BBR on behalf of the LLN nodes, so <lb/>that the 6BBR may in turn perform proxy classical ND operations over <lb/>the backbone. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 15] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>The DetNet Architecture [I-D.ietf-detnet-architecture] studies <lb/>Layer-3 aspects of Deterministic Networks, and covers networks that <lb/>span multiple Layer-2 domains. If the Backbone is Deterministic <lb/>(such as defined by the Time Sensitive Networking WG at IEEE), then <lb/>the Backbone Router ensures that the end-to-end deterministic <lb/>behavior is maintained between the LLN and the backbone. <lb/>3.3. TSCH: A Deterministic MAC Layer <lb/>Though at a different time scale (several orders of magnitude), both <lb/>IEEE Std. 802.1TSN and IEEE Std. 802.15.4 TSCH standards provide <lb/>Deterministic capabilities to the point that a packet that pertains <lb/>to a certain flow may traverse a network from node to node following <lb/>a precise schedule, as a train that enters and then leaves <lb/>intermediate stations at precise times along its path. <lb/>With TSCH, time is formatted into timeslots, and individual <lb/>communication cells are allocated to unicast or broadcast <lb/>communication at the MAC level. The time-slotted operation reduces <lb/>collisions, saves energy, and enables to more closely engineer the <lb/>network for deterministic properties. The channel hopping aspect is <lb/>a simple and efficient technique to combat multipath fading and co-<lb/>channel interference. <lb/>6TiSCH builds on the IEEE Std. 802.15.4 TSCH MAC and inherits its <lb/>advanced capabilities to enable them in multiple environments where <lb/>they can be leveraged to improve automated operations. The 6TiSCH <lb/>Architecture also inherits the capability to perform a centralized <lb/>route computation to achieve deterministic properties, though it <lb/>relies on the IETF DetNet Architecture <lb/>[I-D.ietf-detnet-architecture], and IETF components such as the PCE <lb/>[PCE], for the protocol aspects. <lb/>On top of this inheritance, 6TiSCH adds capabilities for distributed <lb/>routing and scheduling operations based on the RPL routing protocol <lb/>and capabilities to negotiate schedule adjustments between peers. <lb/>These distributed routing and scheduling operations simplify the <lb/>deployment of TSCH networks and enable wireless solutions in a larger <lb/>variety of use cases from operational technology in general. <lb/>Examples of such use-cases in industrial environments include plant <lb/>setup and decommissioning, as well as monitoring of lots of lesser <lb/>importance measurements such as corrosion and events and mobile <lb/>workers accessing local devices. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 16] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>3.4. Scheduling TSCH <lb/>A scheduling operation attributes cells in a Time-Division-<lb/>Multiplexing (TDM) / Frequency-Division Multiplexing (FDM) matrix <lb/>called the Channel distribution/usage (CDU) to either individual <lb/>transmissions or as multi-access shared resources. The CDU matrix <lb/>can be formatted in chunks that can be allocated exclusively to <lb/>particular nodes to enable distributed scheduling without collision. <lb/>More in Section 4.3.5. <lb/>From the standpoint of a 6TiSCH node (at the MAC layer), its schedule <lb/>is the collection of the timeslots at which it must wake up for <lb/>transmission, and the channels to which it should either send or <lb/>listen at those times. The schedule is expressed as one or more <lb/>slotframes that repeat over and over. Slotframes may collide and <lb/>require a device to wake up at a same time, in which case the <lb/>slotframe with the highest priority is actionable. <lb/>The 6top sublayer (see Section 4.3 for more) hides the complexity of <lb/>the schedule from the upper layers. The Link abstraction that IP <lb/>traffic utilizes is composed of a pair of Layer-3 cell bundles, one <lb/>to receive and one to transmit. Some of the cells may be shared, in <lb/>which case the 6top sublayer must perform some arbitration. <lb/>Scheduling enables multiple communications at a same time in a same <lb/>interference domain using different channels; but a node equipped <lb/>with a single radio can only either transmit or receive on one <lb/>channel at any point of time. Scheduled cells that fulfil the same <lb/>role, e.g., receive IP packets from a peer, are grouped in bundles. <lb/>The 6TiSCH architecture identifies four ways a schedule can be <lb/>managed and CDU cells can be allocated: Static Scheduling, Neighbor-<lb/>to-Neighbor Scheduling, Centralized (or Remote) Monitoring and <lb/>Schedule Management, and Hop-by-hop Scheduling. <lb/>Static Scheduling: This refers to the minimal 6TiSCH operation <lb/>whereby a static schedule is configured for the whole network for <lb/>use in a Slotted ALOHA [S-ALOHA] fashion. The static schedule is <lb/>distributed through the native methods in the TSCH MAC layer and <lb/>does not preclude other scheduling operations to co-exist on a <lb/>same 6TiSCH network. A static schedule is necessary for basic <lb/>operations such as the join process and for interoperability <lb/>during the network formation, which is specified as part of the <lb/>Minimal 6TiSCH Configuration [RFC8180]. <lb/>Neighbor-to-Neighbor Scheduling: This refers to the dynamic <lb/>adaptation of the bandwidth of the Links that are used for IPv6 <lb/>traffic between adjacent peers. Scheduling Functions such as the <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 17] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>&quot;6TiSCH Minimal Scheduling Function (MSF)&quot; [I-D.ietf-6tisch-msf] <lb/>influence the operation of the MAC layer to add, update and remove <lb/>cells in its own, and its peer&apos;s schedules using 6P [RFC8480], for <lb/>the negotiation of the MAC resources. <lb/>Centralized (or Remote) Monitoring and Schedule Management: This <lb/>refers to the central computation of a schedule and the capability <lb/>to forward a frame based on the cell of arrival. In that case, <lb/>the related portion of the device schedule as well as other device <lb/>resources are managed by an abstract Network Management Entity <lb/>(NME), which may cooperate with the PCE to minimize the <lb/>interaction with and the load on the constrained device. This <lb/>model is the TSCH adaption of the &quot;DetNet Architecture&quot; <lb/>[I-D.ietf-detnet-architecture], and it enables Traffic Engineering <lb/>with deterministic properties. <lb/>Hop-by-hop Scheduling: This refers to the possibility to reserves <lb/>cells along a path for a particular flow using a distributed <lb/>mechanism. <lb/>It is not expected that all use cases will require all those <lb/>mechanisms. Static Scheduling with minimal configuration one is the <lb/>only one that is expected in all implementations, since it provides a <lb/>simple and solid basis for convergecast routing and time <lb/>distribution. <lb/>A deeper dive in those mechanisms can be found in Section 4.4. <lb/>3.5. Distributed vs. Centralized Routing <lb/>6TiSCH enables a mixed model of centralized routes and distributed <lb/>routes. Centralized routes can for example be computed by an entity <lb/>such as a PCE. 6TiSCH leverages the RPL [RFC6550] routing protocol <lb/>for interoperable distributed routing operations. <lb/>Both methods may inject routes in the Routing Tables of the 6TiSCH <lb/>routers. In either case, each route is associated with a 6TiSCH <lb/>topology that can be a RPL Instance topology or a Track. The 6TiSCH <lb/>topology is indexed by a RPLInstanceID, in a format that reuses the <lb/>RPLInstanceID as defined in RPL. <lb/>RPL [RFC6550] is applicable to Static Scheduling and Neighbor-to-<lb/>Neighbor Scheduling. The architecture also supports a centralized <lb/>routing model for Remote Monitoring and Schedule Management. It is <lb/>expected that a routing protocol that is more optimized for point-to-<lb/>point routing than RPL [RFC6550], such as the Asymmetric AODV-P2P-RPL <lb/>in Low-Power and Lossy Networks&quot; [I-D.ietf-roll-aodv-rpl] AODV-RPL), <lb/>which derives from the Ad Hoc On-demand Distance Vector Routing <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 18] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>(AODV) [I-D.ietf-manet-aodvv2] will be selected for Hop-by-hop <lb/>Scheduling. <lb/>Both RPL and PCE rely on shared sources such as policies to define <lb/>Global and Local RPLInstanceIDs that can be used by either method. <lb/>It is possible for centralized and distributed routing to share a <lb/>same topology. Generally they will operate in different slotframes, <lb/>and centralized routes will be used for scheduled traffic and will <lb/>have precedence over distributed routes in case of conflict between <lb/>the slotframes. <lb/>3.6. Forwarding Over TSCH <lb/>The 6TiSCH architecture supports three different forwarding models. <lb/>One is the classical IPv6 Forwarding, where the node selects a <lb/>feasible successor at Layer-3 on a per packet basis and based on its <lb/>routing table. The second derives from Generic MPLS (G-MPLS) for so-<lb/>called Track Forwarding, whereby a frame received at a particular <lb/>timeslot can be switched into another timeslot at Layer-2 without <lb/>regard to the upper layer protocol. The third model is the 6LoWPAN <lb/>Fragment Forwarding, which allows to forward individual 6loWPAN <lb/>fragments along a route that is setup by the first fragment. <lb/>In more details: <lb/>IPv6 Forwarding: This is the classical IP forwarding model, with a <lb/>Routing Information Based (RIB) that is installed by the RPL <lb/>routing protocol and used to select a feasible successor per <lb/>packet. The packet is placed on an outgoing Link, that the 6top <lb/>layer maps into a (Layer-3) bundle of cells, and scheduled for <lb/>transmission based on QoS parameters. Besides RPL, this model <lb/>also applies to any routing protocol which may be operated in the <lb/>6TiSCH network, and corresponds to all the distributed scheduling <lb/>models, Static, Neighbor-to-Neighbor and Hop-by-Hop Scheduling. <lb/>G-MPLS Track Forwarding: This model corresponds to the Remote <lb/>Monitoring and Schedule Management. In this model, a central <lb/>controller (hosting a PCE) computes and installs the schedules in <lb/>the devices per flow. The incoming (Layer-2) bundle of cells from <lb/>the previous node along the path determines the outgoing (Layer-2) <lb/>bundle towards the next hop for that flow as determined by the <lb/>PCE. The programmed sequence for bundles is called a Track and <lb/>can assume DAG shapes that are more complex than a simple direct <lb/>sequence of nodes. <lb/>6LoWPAN Fragment Forwarding: This is a hybrid model that derives <lb/>from IPv6 forwarding for the case where packets must be fragmented <lb/>at the 6LoWPAN sublayer. The first fragment is forwarded like any <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 19] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>IPv6 packet and leaves a state in the intermediate hops to enable <lb/>forwarding of the next fragments that do not have a IP header <lb/>without the need to recompose the packet at every hop. <lb/>A deeper dive on these operations can be found in Section 4.6. <lb/>The following table summarizes how the forwarding models apply to the <lb/>various routing and scheduling possibilities: <lb/>+-------------------+------------+----------------------------------+ <lb/>| Forwarding Model | Routing <lb/>| <lb/>Scheduling <lb/>| <lb/>+===================+============+==================================+ <lb/>| <lb/>| <lb/>| <lb/>Static (Minimal Configuration) | <lb/>+ classical IPv6 <lb/>+ <lb/>RPL <lb/>+----------------------------------+ <lb/>| <lb/>/ <lb/>| <lb/>| <lb/>Neighbor-to-Neighbor (SF+6P) <lb/>| <lb/>+ 6LoWPAN Fragment +------------+----------------------------------+ <lb/>| <lb/>| Reactive | <lb/>Hop-by-Hop (AODV-RPL) <lb/>| <lb/>+-------------------+------------+----------------------------------+ <lb/>|G-MPLS Track Fwding| <lb/>PCE <lb/>|Remote Monitoring and Schedule Mgt| <lb/>+-------------------+------------+----------------------------------+ <lb/>3.7. 6TiSCH Stack <lb/>The IETF proposes multiple techniques for implementing functions <lb/>related to routing, transport or security. <lb/>The 6TiSCH architecture limits the possible variations of the stack <lb/>and recommends a number of base elements for LLN applications to <lb/>control the complexity of possible deployments and device <lb/>interactions, and to limit the size of the resulting object code. In <lb/>particular, UDP [RFC0768], IPv6 [RFC8200] and the Constrained <lb/>Application Protocol [RFC7252] (CoAP) are used as the transport / <lb/>binding of choice for applications and management as opposed to TCP <lb/>and HTTP. <lb/>The resulting protocol stack is represented in Figure 4: <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 20] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>+--------+--------+ <lb/>| Applis | CoJP | <lb/>+--------+--------+--------------+-----+ <lb/>| CoAP / OSCORE <lb/>| 6LoWPAN ND | RPL | <lb/>+-----------------+--------------+-----+ <lb/>| <lb/>UDP <lb/>| <lb/>ICMPv6 <lb/>| <lb/>+-----------------+--------------------+ <lb/>| <lb/>IPv6 <lb/>| <lb/>+--------------------------------------+----------------------+ <lb/>| <lb/>6LoWPAN HC <lb/>/ <lb/>6LoRH HC <lb/>| Scheduling Functions | <lb/>+--------------------------------------+----------------------+ <lb/>| <lb/>6top inc. 6top protocol <lb/>| <lb/>+-------------------------------------------------------------+ <lb/>| <lb/>IEEE Std. 802.15.4 TSCH <lb/>| <lb/>+-------------------------------------------------------------+ <lb/>Figure 4: 6TiSCH Protocol Stack <lb/>RPL is the routing protocol of choice for LLNs. So far, there was no <lb/>identified need to define a 6TiSCH specific Objective Function. The <lb/>Minimal 6TiSCH Configuration [RFC8180] describes the operation of RPL <lb/>over a static schedule used in a Slotted ALOHA fashion [S-ALOHA], <lb/>whereby all active slots may be used for emission or reception of <lb/>both unicast and multicast frames. <lb/>The 6LoWPAN Header Compression [RFC6282] is used to compress the IPv6 <lb/>and UDP headers, whereas the 6LoWPAN Routing Header (6LoRH) [RFC8138] <lb/>is used to compress the RPL artifacts in the IPv6 data packets, <lb/>including the RPL Packet Information (RPI), the IP-in-IP <lb/>encapsulation to/from the RPL Root, and the Source Route Header (SRH) <lb/>in non-storing mode. &quot;When to use RFC 6553, 6554 and IPv6-in-IPv6&quot; <lb/>[I-D.ietf-roll-useofrplinfo] provides the details on when headers or <lb/>encapsulation are needed. <lb/>The Object Security for Constrained RESTful Environments (OSCORE) <lb/>[I-D.ietf-core-object-security], is leveraged by the Constrained Join <lb/>Protocol (CoJP) and is expected to be the primary protocol for the <lb/>protection of the application payload as well. The application <lb/>payload may also be protected by the Datagram Transport Layer <lb/>Security (DTLS) [RFC6347] sitting either under CoAP or over CoAP so <lb/>it can traverse proxies. <lb/>The 6TiSCH Operation sublayer (6top) is a sublayer of a Logical Link <lb/>Control (LLC) that provides the abstraction of an IP link over a TSCH <lb/>MAC and schedules packets over TSCH cells, as further discussed in <lb/>the next sections, providing in particular dynamic cell allocation <lb/>with the 6top Protocol (6P) [RFC8480]. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 21] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>The reference stack presented in this document was implemented and <lb/>interop-tested by a conjunction of opensource, IETF and ETSI efforts. <lb/>One goal is to help other bodies to adopt the stack as a whole, <lb/>making the effort to move to an IPv6-based IoT stack easier. <lb/>For a particular environment, some of the choices that are made in <lb/>this architecture may not be relevant. For instance, RPL is not <lb/>required for star topologies and mesh-under Layer-2 routed networks, <lb/>and the 6LoWPAN compression may not be sufficient for ultra-<lb/>constrained cases such as some Low-Power Wide Area (LPWA) networks. <lb/>In such cases, it is perfectly doable to adopt a subset of the <lb/>selection that is presented hereafter and then select alternate <lb/>components to complete the solution wherever needed. <lb/>3.8. Communication Paradigms and Interaction Models <lb/>Section 2.1 provides the terms of Communication Paradigms and <lb/>Interaction Models, in relation with &quot;On the Difference between <lb/>Information Models and Data Models&quot; [RFC3444]. A Communication <lb/>Paradigm would be an abstract view of a protocol exchange, and would <lb/>come with an Information Model for the information that is being <lb/>exchanged. In contrast, an Interaction Model would be more refined <lb/>and could point to standard operation such as a Representational <lb/>state transfer (REST) &quot;GET&quot; operation and would match a Data Model <lb/>for the data that is provided over the protocol exchange. <lb/>Section 2.1.3 of [I-D.ietf-roll-rpl-industrial-applicability] and <lb/>next sections discuss application-layer paradigms, such as Source-<lb/>sink (SS) that is a Multipeer to Multipeer (MP2MP) model primarily <lb/>used for alarms and alerts, Publish-subscribe (PS, or pub/sub) that <lb/>is typically used for sensor data, as well as Peer-to-peer (P2P) and <lb/>Peer-to-multipeer (P2MP) communications. <lb/>Additional considerations on Duocast -one sender, two receivers for <lb/>redundancy -and its N-cast generalization are also provided. Those <lb/>paradigms are frequently used in industrial automation, which is a <lb/>major use case for IEEE Std. 802.15.4 TSCH wireless networks with <lb/>[ISA100.11a] and [WirelessHART], that provides a wireless access to <lb/>[HART] applications and devices. <lb/>This document focuses on Communication Paradigms and Interaction <lb/>Models for packet forwarding and TSCH resources (cells) management. <lb/>Management mechanisms for the TSCH schedule at Link-Layer (one-hop), <lb/>Network-layer (multihop along a Track), and Application-layer (remote <lb/>control) are discussed in Section 4.4. Link-Layer frame forwarding <lb/>interactions are discussed in Section 4.6, and Network-layer Packet <lb/>routing is addressed in Section 4.7. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 22] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>4. Architecture Components <lb/>4.1. 6LoWPAN (and RPL) <lb/>A RPL DODAG is formed of a Root, a collection of routers, and leaves <lb/>that are hosts. Hosts are nodes which do not forward packets that <lb/>they did not generate. RPL-aware leaves will participate to RPL to <lb/>advertise their own addresses, whereas RPL-unaware leaves depend on a <lb/>connected RPL router to do so. RPL interacts with 6LoWPAN ND at <lb/>multiple levels, in particular at the Root and in the RPL-unaware <lb/>leaves. <lb/>4.1.1. RPL-Unaware Leaves and 6LoWPAN ND <lb/>RPL needs a set of information to advertise a leaf node through a <lb/>Destination Advertisement Object (DAO) message and establish <lb/>reachability. <lb/>&quot;Routing for RPL Leaves&quot; [I-D.ietf-roll-unaware-leaves] details the <lb/>basic interaction of 6LoWPAN ND and RPL and enables a plain 6LN that <lb/>supports [RFC8505] to obtain return connectivity via the RPL network <lb/>as an RPL-unaware leaf. The leaf indicates that it requires <lb/>reachability services for the Registered Address from a Routing <lb/>Registrar by setting a &apos;R&apos; flag in the Extended Address Registration <lb/>Option [RFC8505], and it provides a TID that maps to a sequence <lb/>number in section 7 of RPL [RFC6550]. <lb/>[I-D.ietf-roll-unaware-leaves] also enables the leaf to signal the <lb/>RPL InstanceID that it wants to participate to using the Opaque field <lb/>of the EARO. On the backbone, the InstanceID is expected to be <lb/>mapped to an overlay that matches the RPL Instance, e.g., a Virtual <lb/>LAN (VLAN) or a virtual routing and forwarding (VRF) instance. <lb/>Though at the time of this writing the above specification enables a <lb/>model where the separation is possible, this architecture recommends <lb/>to collocate the functions of 6LBR and RPL Root. <lb/>4.1.2. 6LBR and RPL Root <lb/>With the 6LowPAN ND [RFC6775], information on the 6LBR is <lb/>disseminated via an Authoritative Border Router Option (ABRO) in RA <lb/>messages. [RFC8505] extends [RFC6775] to enable a registration for <lb/>routing and proxy ND. The capability to support [RFC8505] is <lb/>indicated in the 6LoWPAN Capability Indication Option (6CIO). The <lb/>discovery and liveliness of the RPL Root are obtained through RPL <lb/>[RFC6550] itself. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 23] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>When 6LoWPAN ND is coupled with RPL, the 6LBR and RPL Root <lb/>functionalities are co-located in order that the address of the 6LBR <lb/>be indicated by RPL DIO messages and to associate the unique ID from <lb/>the EDAR/EDAC [RFC8505] exchange with the state that is maintained by <lb/>RPL. <lb/>Section 7 of [I-D.ietf-roll-unaware-leaves] specifies how the DAO <lb/>messages are used to reconfirm the registration, thus eliminating a <lb/>duplication of functionality between DAO and EDAR/EDAC messages, as <lb/>illustrated in Figure 7. [I-D.ietf-roll-unaware-leaves] also <lb/>provides the protocol elements that are needed when the 6LBR and RPL <lb/>Root functionalities are not co-located. <lb/>Even though the Root of the RPL network is integrated with the 6LBR, <lb/>it is logically separated from the Backbone Router (6BBR) that is <lb/>used to connect the 6TiSCH LLN to the backbone. This way, the Root <lb/>has all information from 6LoWPAN ND and RPL about the LLN devices <lb/>attached to it. <lb/>This architecture also expects that the Root of the RPL network <lb/>(proxy-)registers the 6TiSCH nodes on their behalf to the 6BBR, for <lb/>whatever operation the 6BBR performs on the backbone, such as ND <lb/>proxy, or redistribution in a routing protocol. This relies on an <lb/>extension of the 6LoWPAN ND registration described in <lb/>[I-D.ietf-6lo-backbone-router]. <lb/>This model supports the movement of a 6TiSCH device across the Multi-<lb/>Link Subnet, and allows the proxy registration of 6TiSCH nodes deep <lb/>into the 6TiSCH LLN by the 6LBR / RPL Root. This is why in [RFC8505] <lb/>the Registered Address is signaled in the Target Address field of the <lb/>NS message as opposed to the IPv6 Source Address, which, in the case <lb/>of a proxy registration, is that of the 6LBR / RPL Root itself. <lb/>4.2. Network Access and Addressing <lb/>4.2.1. Join Process <lb/>A new device, called the pledge, undergoes the join protocol to <lb/>become a node in a 6TiSCH network. This usually occurs only once <lb/>when the device is first powered on. The pledge communicates with <lb/>the Join Registrar/Coordinator (JRC) of the network through a Join <lb/>Proxy (JP), a radio neighbor of the pledge. <lb/>The JP is discovered though MAC layer beacons. When multiple JPs <lb/>from possibly multiple networks are visible, trial and error till an <lb/>acceptable position in the right network is obtained becomes <lb/>ineffficient. [I-D.ietf-6tisch-enrollment-enhanced-beacon] adds a <lb/>new subtype in the Information Element that was delegated to the IETF <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 24] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>[RFC8137] and provides visibility on the network that can be joined <lb/>and the willingness by the JP and the Root to be used by the pledge. <lb/>The join protocol provides the following functionality: <lb/>o Mutual authentication <lb/>o Authorization <lb/>o Parameter distribution to the pledge over a secure channel <lb/>Minimal Security Framework for 6TiSCH <lb/>[I-D.ietf-6tisch-minimal-security] defines the minimal mechanisms <lb/>required for this join process to occur in a secure manner. The <lb/>specification defines the Constrained Join Protocol (CoJP) that is <lb/>used to distribute the parameters to the pledge over a secure session <lb/>established through OSCORE [I-D.ietf-core-object-security], and a <lb/>secure configuration of the network stack. In the minimal setting <lb/>with pre-shared keys (PSKs), CoJP allows the pledge to join after a <lb/>single round-trip exchange with the JRC. The provisioning of the PSK <lb/>to the pledge and the JRC needs to be done out of band, through a <lb/>&apos;one-touch&apos; bootstrapping process, which effectively enrolls the <lb/>pledge into the domain managed by the JRC. <lb/>In certain use cases, the &apos;one touch&apos; bootstrapping is not feasible <lb/>due to the operational constraints and the enrollment of the pledge <lb/>into the domain needs to occur in-band. This is handled through a <lb/>&apos;zero-touch&apos; extension of the Minimal Security Framework for 6TiSCH. <lb/>Zero touch [I-D.ietf-6tisch-dtsecurity-zerotouch-join] extension <lb/>leverages the &apos;Bootstrapping Remote Secure Key Infrastructures <lb/>(BRSKI)&apos; [[I-D.ietf-anima-bootstrapping-keyinfra] work to establish a <lb/>shared secret between a pledge and the JRC without necessarily having <lb/>them belong to a common (security) domain at join time. This happens <lb/>through inter-domain communication occurring between the JRC of the <lb/>network and the domain of the pledge, represented by a fourth entity, <lb/>Manufacturer Authorized Signing Authority (MASA). Once the zero-<lb/>touch exchange completes, the CoJP exchange defined in <lb/>[I-D.ietf-6tisch-minimal-security] is carried over the secure session <lb/>established between the pledge and the JRC. <lb/>Figure 5 depicts the join process and where a Link-Local Address <lb/>(LLA) is used, versus a Global Unicast Address (GUA). <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 25] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>6LoWPAN Node <lb/>6LR <lb/>6LBR <lb/>Join Registrar <lb/>MASA <lb/>(pledge) <lb/>(Join Proxy) <lb/>(Root) <lb/>/Coordinator (JRC) <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| 6LoWPAN ND <lb/>|6LoWPAN ND+RPL | IPv6 network |IPv6 network | <lb/>| <lb/>LLN link <lb/>|Route-Over mesh|(the Internet)|(the Internet)| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>Layer-2 <lb/>| <lb/>| <lb/>| <lb/>| <lb/>|enhanced beacon| <lb/>| <lb/>| <lb/>| <lb/>|&lt;--------------| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>NS (EARO) | <lb/>| <lb/>| <lb/>| <lb/>| (for the LLA) | <lb/>| <lb/>| <lb/>| <lb/>|--------------&gt;| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>NA (EARO) | <lb/>| <lb/>| <lb/>| <lb/>|&lt;--------------| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| (Zero-touch | <lb/>| <lb/>| <lb/>| <lb/>| <lb/>handshake) | <lb/>(Zero-touch handshake) <lb/>| (Zero-touch | <lb/>| <lb/>using LLA <lb/>| <lb/>using GUA <lb/>| handshake) | <lb/>|&lt;-------------&gt;|&lt;----------------------------&gt;|&lt;------------&gt;| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| CoJP Join Req | <lb/>| <lb/>| <lb/>| \ <lb/>| using LLA <lb/>| <lb/>| <lb/>| <lb/>| | <lb/>|--------------&gt;| <lb/>| <lb/>| <lb/>| | <lb/>| <lb/>| <lb/>CoJP Join Request <lb/>| <lb/>| | <lb/>| <lb/>| <lb/>using GUA <lb/>| <lb/>| | <lb/>| <lb/>|-----------------------------&gt;| <lb/>| | C <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| | o <lb/>| <lb/>| <lb/>CoJP Join Response <lb/>| <lb/>| | J <lb/>| <lb/>| <lb/>using GUA <lb/>| <lb/>| | P <lb/>| <lb/>|&lt;-----------------------------| <lb/>| | <lb/>|CoJP Join Resp | <lb/>| <lb/>| <lb/>| | <lb/>| using LLA <lb/>| <lb/>| <lb/>| <lb/>| | <lb/>|&lt;--------------| <lb/>| <lb/>| <lb/>| / <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>Figure 5: Join process in a Multi-Link Subnet. Parentheses () denote <lb/>optional exchanges. <lb/>4.2.2. Registration <lb/>Once the pledge successfully completes the CoJP protocol and becomes <lb/>a network node, it obtains the network prefix from neighboring <lb/>routers and registers its IPv6 addresses. As detailed in <lb/>Section 4.1, the combined 6LoWPAN ND 6LBR and Root of the RPL network <lb/>learn information such as the device Unique ID (from 6LoWPAN ND) and <lb/>the updated Sequence Number (from RPL), and perform 6LoWPAN ND proxy <lb/>registration to the 6BBR of behalf of the LLN nodes. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 26] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>Figure 6 illustrates the initial IPv6 signaling that enables a 6LN to <lb/>form a global address and register it to a 6LBR using 6LoWPAN ND <lb/>[RFC8505], is then carried over RPL to the RPL Root, and then to the <lb/>6BBR. This flow happens just once when the address is created and <lb/>first registered. <lb/>6LoWPAN Node <lb/>6LR <lb/>6LBR <lb/>6BBR <lb/>(RPL leaf) <lb/>(router) <lb/>(Root) <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| 6LoWPAN ND <lb/>|6LoWPAN ND+RPL | 6LoWPAN ND <lb/>| IPv6 ND <lb/>| <lb/>LLN link <lb/>|Route-Over mesh|Ethernet/serial| Backbone <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| RS (mcast) <lb/>| <lb/>| <lb/>| <lb/>|--------------&gt;| <lb/>| <lb/>| <lb/>|-----------&gt; <lb/>| <lb/>| <lb/>| <lb/>|------------------&gt; <lb/>| <lb/>| <lb/>| RA (unicast) | <lb/>| <lb/>| <lb/>|&lt;--------------| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| NS(EARO) <lb/>| <lb/>| <lb/>| <lb/>|--------------&gt;| <lb/>| <lb/>| <lb/>| 6LoWPAN ND <lb/>| Extended DAR | <lb/>| <lb/>| <lb/>|--------------&gt;| <lb/>| <lb/>| <lb/>| <lb/>| NS(EARO) <lb/>| <lb/>| <lb/>| <lb/>|--------------&gt;| <lb/>| <lb/>| <lb/>| <lb/>| NS-DAD <lb/>| <lb/>| <lb/>| <lb/>|------&gt; <lb/>| <lb/>| <lb/>| <lb/>| (EARO) <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| NA(EARO) <lb/>|&lt;timeout&gt; <lb/>| <lb/>| <lb/>|&lt;--------------| <lb/>| <lb/>| Extended DAC | <lb/>| <lb/>| <lb/>|&lt;--------------| <lb/>| <lb/>| NA(EARO) <lb/>| <lb/>| <lb/>| <lb/>|&lt;--------------| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>Figure 6: Initial Registration Flow over Multi-Link Subnet <lb/>Figure 7 illustrates the repeating IPv6 signaling that enables a 6LN <lb/>to keep a global address alive and registered to its 6LBR using <lb/>6LoWPAN ND to the 6LR, RPL to the RPL Root, and then 6LoWPAN ND again <lb/>to the 6BBR, which avoids repeating the Extended DAR/DAC flow across <lb/>the network when RPL can suffice as a keep-alive mechanism. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 27] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>6LoWPAN Node <lb/>6LR <lb/>6LBR <lb/>6BBR <lb/>(RPL leaf) <lb/>(router) <lb/>(Root) <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| 6LoWPAN ND <lb/>|6LoWPAN ND+RPL | 6LoWPAN ND <lb/>| IPv6 ND <lb/>| <lb/>LLN link <lb/>|Route-Over mesh| ant IPv6 link | Backbone <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| NS(EARO) <lb/>| <lb/>| <lb/>| <lb/>|--------------&gt;| <lb/>| <lb/>| <lb/>| NA(EARO) <lb/>| <lb/>| <lb/>| <lb/>|&lt;--------------| <lb/>| <lb/>| <lb/>| <lb/>| DAO <lb/>| <lb/>| <lb/>| <lb/>|--------------&gt;| <lb/>| <lb/>| <lb/>| DAO-ACK <lb/>| <lb/>| <lb/>| <lb/>|&lt;--------------| <lb/>| <lb/>| <lb/>| <lb/>| NS(EARO) <lb/>| <lb/>| <lb/>| <lb/>|--------------&gt;| <lb/>| <lb/>| <lb/>| NA(EARO) <lb/>| <lb/>| <lb/>| <lb/>|&lt;--------------| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>Figure 7: Next Registration Flow over Multi-Link Subnet <lb/>As the network builds up, a node should start as a leaf to join the <lb/>RPL network, and may later turn into both a RPL-capable router and a <lb/>6LR, so as to accept leaf nodes to recursively join the network. <lb/>4.3. TSCH and 6top <lb/>4.3.1. 6top <lb/>6TiSCH expects a high degree of scalability together with a <lb/>distributed routing functionality based on RPL. To achieve this <lb/>goal, the spectrum must be allocated in a way that allows for spatial <lb/>reuse between zones that will not interfere with one another. In a <lb/>large and spatially distributed network, a 6TiSCH node is often in a <lb/>good position to determine usage of the spectrum in its vicinity. <lb/>With 6TiSCH, the abstraction of an IPv6 link is implemented as a pair <lb/>of bundles of cells, one in each direction. IP Links are only <lb/>enabled between RPL parents and children. The 6TiSCH operation is <lb/>optimal when the size of a bundle is such that both the energy wasted <lb/>in idle listening and the packet drops due to congestion loss are <lb/>minimized, while packets are forwarded within an acceptable latency. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 28] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>Use cases for distributed routing are often associated with a <lb/>statistical distribution of best-effort traffic with variable needs <lb/>for bandwidth on each individual link. The 6TiSCH operation can <lb/>remain optimal if RPL parents can adjust dynamically, and with enough <lb/>reactivity to match the variations of best-effort traffic, the amount <lb/>of bandwidth that is used to communicate between themselves and their <lb/>children, in both directions. In turn, the agility to fulfill the <lb/>needs for additional cells improves when the number of interactions <lb/>with other devices and the protocol latencies are minimized. <lb/>6top is a logical link control sitting between the IP layer and the <lb/>TSCH MAC layer, which provides the link abstraction that is required <lb/>for IP operations. The 6top protocol, 6P, which is specified in <lb/>[RFC8480], is one of the services provided by 6top. In particular, <lb/>the 6top services are available over a management API that enables an <lb/>external management entity to schedule cells and slotframes, and <lb/>allows the addition of complementary functionality, for instance a <lb/>Scheduling Function that manages a dynamic schedule management based <lb/>on observed resource usage as discussed in Section 4.4.2. For this <lb/>purpose, the 6TiSCH architecture differentiates &quot;soft&quot; cells and <lb/>&quot;hard&quot; cells. <lb/>4.3.1.1. Hard Cells <lb/>&quot;Hard&quot; cells are cells that are owned and managed by a separate <lb/>scheduling entity (e.g., a PCE) that specifies the slotOffset/ <lb/>channelOffset of the cells to be added/moved/deleted, in which case <lb/>6top can only act as instructed, and may not move hard cells in the <lb/>TSCH schedule on its own. <lb/>4.3.1.2. Soft Cells <lb/>In contrast, &quot;soft&quot; cells are cells that 6top can manage locally. <lb/>6top contains a monitoring process which monitors the performance of <lb/>cells, and can add, remove soft cells in the TSCH schedule to adapt <lb/>to the traffic needs, or move one when it performs poorly. To <lb/>reserve a soft cell, the higher layer does not indicate the exact <lb/>slotOffset/channelOffset of the cell to add, but rather the resulting <lb/>bandwidth and QoS requirements. When the monitoring process triggers <lb/>a cell reallocation, the two neighbor devices communicating over this <lb/>cell negotiate its new position in the TSCH schedule. <lb/>4.3.2. Scheduling Functions and the 6top protocol <lb/>In the case of soft cells, the cell management entity that controls <lb/>the dynamic attribution of cells to adapt to the dynamics of variable <lb/>rate flows is called a Scheduling Function (SF). <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 29] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>There may be multiple SFs with more or less aggressive reaction to <lb/>the dynamics of the network. <lb/>An SF may be seen as divided between an upper bandwidth adaptation <lb/>logic that is not aware of the particular technology that is used to <lb/>obtain and release bandwidth, and an underlying service that maps <lb/>those needs in the actual technology, which means mapping the <lb/>bandwidth onto cells in the case of TSCH using the 6top protocol as <lb/>illustrated in Figure 8. <lb/>+------------------------+ <lb/>+------------------------+ <lb/>| Scheduling Function <lb/>| <lb/>| Scheduling Function <lb/>| <lb/>| Bandwidth adaptation | <lb/>| Bandwidth adaptation | <lb/>+------------------------+ <lb/>+------------------------+ <lb/>| Scheduling Function <lb/>| <lb/>| Scheduling Function <lb/>| <lb/>| TSCH mapping to cells | <lb/>| TSCH mapping to cells | <lb/>+------------------------+ <lb/>+------------------------+ <lb/>| 6top cells negotiation | &lt;-6P -&gt; | 6top cells negotiation | <lb/>+------------------------+ <lb/>+------------------------+ <lb/>Device A <lb/>Device B <lb/>Figure 8: SF/6P stack in 6top <lb/>The SF relies on 6top services that implement the 6top Protocol (6P) <lb/>[RFC8480] to negotiate the precise cells that will be allocated or <lb/>freed based on the schedule of the peer. It may be for instance that <lb/>a peer wants to use a particular time slot that is free in its <lb/>schedule, but that timeslot is already in use by the other peer for a <lb/>communication with a third party on a different cell. 6P enables the <lb/>peers to find an agreement in a transactional manner that ensures the <lb/>final consistency of the nodes state. <lb/>MSF [I-D.ietf-6tisch-msf] is one of the possible scheduling <lb/>functions. MSF uses the rendez-vous slot from [RFC8180] for network <lb/>discovery, neighbor discovery, and any other broadcast. <lb/>For basic unicast communication with any neighbor, each node uses a <lb/>receive cell at a well-known slotOffset/channelOffset, derived from a <lb/>hash of their own MAC address. Nodes can reach any neighbor by <lb/>installing a transmit (shared) cell with slotOffset/channelOffset <lb/>derived from the neighbor&apos;s MAC address. <lb/>For child-parent links, MSF continuously monitors the load to/from <lb/>parents and children. It then uses 6P to install/remove unicast <lb/>cells whenever the current schedule appears to be under-/over-<lb/>provisioned. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 30] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>4.3.3. 6top and RPL Objective Function operations <lb/>An implementation of a RPL [RFC6550] Objective Function (OF), such as <lb/>the RPL Objective Function Zero (OF0) [RFC6552] that is used in the <lb/>Minimal 6TiSCH Configuration [RFC8180] to support RPL over a static <lb/>schedule, may leverage, for its internal computation, the information <lb/>maintained by 6top. <lb/>An OF may require metrics about reachability, such as the Expected <lb/>Transmission Count (ETX) metric [RFC6551]. 6top creates and <lb/>maintains an abstract neighbor table, and this state may be leveraged <lb/>to feed an OF and/or store OF information as well. A neighbor table <lb/>entry may contain a set of statistics with respect to that specific <lb/>neighbor. <lb/>The neighbor information may include the time when the last packet <lb/>has been received from that neighbor, a set of cell quality metrics, <lb/>e.g., received signal strength indication (RSSI) or link quality <lb/>indicator (LQI), the number of packets sent to the neighbor or the <lb/>number of packets received from it. This information can be made <lb/>available through 6top management APIs and used for instance to <lb/>compute a Rank Increment that will determine the selection of the <lb/>preferred parent. <lb/>6top provides statistics about the underlying layer so the OF can be <lb/>tuned to the nature of the TSCH MAC layer. 6top also enables the RPL <lb/>OF to influence the MAC behavior, for instance by configuring the <lb/>periodicity of IEEE Std. 802.15.4 Extended Beacons (EBs). By <lb/>augmenting the EB periodicity, it is possible to change the network <lb/>dynamics so as to improve the support of devices that may change <lb/>their point of attachment in the 6TiSCH network. <lb/>Some RPL control messages, such as the DODAG Information Object (DIO) <lb/>are ICMPv6 messages that are broadcast to all neighbor nodes. With <lb/>6TiSCH, the broadcast channel requirement is addressed by 6top by <lb/>configuring TSCH to provide a broadcast channel, as opposed to, for <lb/>instance, piggybacking the DIO messages in Layer-2 Enhanced Beacons <lb/>(EBs), which would produce undue timer coupling among layers, packet <lb/>size issues and could conflict with the policy of production networks <lb/>where EBs are mostly eliminated to conserve energy. <lb/>4.3.4. Network Synchronization <lb/>Nodes in a TSCH network must be time synchronized. A node keeps <lb/>synchronized to its time source neighbor through a combination of <lb/>frame-based and acknowledgment-based synchronization. To maximize <lb/>battery life and network throughput, it is advisable that RPL ICMP <lb/>discovery and maintenance traffic (governed by the trickle timer) be <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 31] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>somehow coordinated with the transmission of time synchronization <lb/>packets (especially with enhanced beacons). <lb/>This could be achieved through an interaction of the 6top sublayer <lb/>and the RPL objective Function, or could be controlled by a <lb/>management entity. <lb/>Time distribution requires a loop-free structure. Nodes taken in a <lb/>synchronization loop will rapidly desynchronize from the network and <lb/>become isolated. 6TiSCH uses a RPL DAG with a dedicated global <lb/>Instance for the purpose of time synchronization. That Instance is <lb/>referred to as the Time Synchronization Global Instance (TSGI). The <lb/>TSGI can be operated in either of the 3 modes that are detailed in <lb/>section 3.1.3 of RPL [RFC6550], &quot;Instances, DODAGs, and DODAG <lb/>Versions&quot;. Multiple uncoordinated DODAGs with independent Roots may <lb/>be used if all the Roots share a common time source such as the <lb/>Global Positioning System (GPS). <lb/>In the absence of a common time source, the TSGI should form a single <lb/>DODAG with a virtual Root. A backbone network is then used to <lb/>synchronize and coordinate RPL operations between the backbone <lb/>routers that act as sinks for the LLN. Optionally, RPL&apos;s periodic <lb/>operations may be used to transport the network synchronization. <lb/>This may mean that 6top would need to trigger (override) the trickle <lb/>timer if no other traffic has occurred for such a time that nodes may <lb/>get out of synchronization. <lb/>A node that has not joined the TSGI advertises a MAC level Join <lb/>Priority of 0xFF to notify its neighbors that is not capable of <lb/>serving as time parent. A node that has joined the TSGI advertises a <lb/>MAC level Join Priority set to its DAGRank() in that Instance, where <lb/>DAGRank() is the operation specified in section 3.5.1 of [RFC6550], <lb/>&quot;Rank Comparison&quot;. <lb/>The provisioning of a RPL Root is out of scope for both RPL and this <lb/>Architecture, whereas RPL enables to propagate configuration <lb/>information down the DODAG. This applies to the TSGI as well; a Root <lb/>is configured or obtains by unspecified means the knowledge of the <lb/>RPLInstanceID for the TSGI. The Root advertises its DagRank in the <lb/>TSGI, that must be less than 0xFF, as its Join Priority in its IEEE <lb/>Std. 802.15.4 Extended Beacons (EB). <lb/>A node that reads a Join Priority of less than 0xFF should join the <lb/>neighbor with the lesser Join Priority and use it as time parent. If <lb/>the node is configured to serve as time parent, then the node should <lb/>join the TSGI, obtain a Rank in that Instance and start advertising <lb/>its own DagRank in the TSGI as its Join Priority in its EBs. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 32] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>4.3.5. Slotframes and CDU matrix <lb/>6TiSCH enables IPv6 best effort (stochastic) transmissions over a MAC <lb/>layer that is also capable of scheduled (deterministic) <lb/>transmissions. A window of time is defined around the scheduled <lb/>transmission where the medium must, as much as practically feasible, <lb/>be free of contending energy to ensure that the medium is free of <lb/>contending packets when time comes for a scheduled transmission. One <lb/>simple way to obtain such a window is to format time and frequencies <lb/>in cells of transmission of equal duration. This is the method that <lb/>is adopted in IEEE Std. 802.15.4 TSCH as well as the Long Term <lb/>Evolution (LTE) of cellular networks. <lb/>The 6TiSCH architecture defines a global concept that is called a <lb/>Channel Distribution and Usage (CDU) matrix to describe that <lb/>formatting of time and frequencies, <lb/>A CDU matrix is defined centrally as part of the network definition. <lb/>It is a matrix of cells with a height equal to the number of <lb/>available channels (indexed by ChannelOffsets) and a width (in <lb/>timeslots) that is the period of the network scheduling operation <lb/>(indexed by slotOffsets) for that CDU matrix. There are different <lb/>models for scheduling the usage of the cells, which place the <lb/>responsibility of avoiding collisions either on a central controller <lb/>or on the devices themselves, at an extra cost in terms of energy to <lb/>scan for free cells (more in Section 4.4). <lb/>The size of a cell is a timeslot duration, and values of 10 to 15 <lb/>milliseconds are typical in 802.15.4 TSCH to accommodate for the <lb/>transmission of a frame and an ack, including the security validation <lb/>on the receive side which may take up to a few milliseconds on some <lb/>device architecture. <lb/>A CDU matrix iterates over and over with a well-known channel <lb/>rotation called the hopping sequence. In a given network, there <lb/>might be multiple CDU matrices that operate with different width, so <lb/>they have different durations and represent different periodic <lb/>operations. It is recommended that all CDU matrices in a 6TiSCH <lb/>domain operate with the same cell duration and are aligned, so as to <lb/>reduce the chances of interferences from the Slotted ALOHA <lb/>operations. The knowledge of the CDU matrices is shared between all <lb/>the nodes and used in particular to define slotframes. <lb/>A slotframe is a MAC-level abstraction that is common to all nodes <lb/>and contains a series of timeslots of equal length and precedence. <lb/>It is characterized by a slotframe_ID, and a slotframe_size. A <lb/>slotframe aligns to a CDU matrix for its parameters, such as number <lb/>and duration of timeslots. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 33] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>Multiple slotframes can coexist in a node schedule, i.e., a node can <lb/>have multiple activities scheduled in different slotframes. A <lb/>slotframe is associated with a priority that may be related to the <lb/>precedence of different 6TiSCH topologies. The slotframes may be <lb/>aligned to different CDU matrices and thus have different width. <lb/>There is typically one slotframe for scheduled traffic that has the <lb/>highest precedence and one or more slotframe(s) for RPL traffic. The <lb/>timeslots in the slotframe are indexed by the SlotOffset; the first <lb/>cell is at SlotOffset 0. <lb/>When a packet is received from a higher layer for transmission, 6top <lb/>inserts that packet in the outgoing queue which matches the packet <lb/>best (Differentiated Services [RFC2474] can therefore be used). At <lb/>each scheduled transmit slot, 6top looks for the frame in all the <lb/>outgoing queues that best matches the cells. If a frame is found, it <lb/>is given to the TSCH MAC for transmission. <lb/>4.3.6. Distributing the reservation of cells <lb/>The 6TiSCH architecture introduces the concept of chunks <lb/>(Section 2.1) to distribute the allocation of the spectrum for a <lb/>whole group of cells at a time. The CDU matrix is formatted into a <lb/>set of chunks, possibly as illustrated in Figure 9, each of the <lb/>chunks identified uniquely by a chunk-ID. The knowledge of this <lb/>formatting is shared between all the nodes in a 6TiSCH network. It <lb/>could be conveyed during the join process, or codified into a profile <lb/>document, or obtained using some other mechanism. This is as opposed <lb/>to static scheduling that refers to the pre-programmed mechanism that <lb/>is specified in [RFC8180] and pre-exists to the distribution of the <lb/>chunk formatting. <lb/>+-----+-----+-----+-----+-----+-----+-----+ <lb/>+-----+ <lb/>chan.Off. 0 |chnkA|chnkP|chnk7|chnkO|chnk2|chnkK|chnk1| ... |chnkZ| <lb/>+-----+-----+-----+-----+-----+-----+-----+ <lb/>+-----+ <lb/>chan.Off. 1 |chnkB|chnkQ|chnkA|chnkP|chnk3|chnkL|chnk2| ... |chnk1| <lb/>+-----+-----+-----+-----+-----+-----+-----+ <lb/>+-----+ <lb/>... <lb/>+-----+-----+-----+-----+-----+-----+-----+ <lb/>+-----+ <lb/>chan.Off. 15 |chnkO|chnk6|chnkN|chnk1|chnkJ|chnkZ|chnkI| ... |chnkG| <lb/>+-----+-----+-----+-----+-----+-----+-----+ <lb/>+-----+ <lb/>0 <lb/>1 <lb/>2 <lb/>3 <lb/>4 <lb/>5 <lb/>6 <lb/>M <lb/>Figure 9: CDU matrix Partitioning in Chunks <lb/>The 6TiSCH Architecture envisions a protocol that enables chunk <lb/>ownership appropriation whereby a RPL parent discovers a chunk that <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 34] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>is not used in its interference domain, claims the chunk, and then <lb/>defends it in case another RPL parent would attempt to appropriate it <lb/>while it is in use. The chunk is the basic unit of ownership that is <lb/>used in that process. <lb/>As a result of the process of chunk ownership appropriation, the RPL <lb/>parent has exclusive authority to decide which cell in the <lb/>appropriated chunk can be used by which node in its interference <lb/>domain. In other words, it is implicitly delegated the right to <lb/>manage the portion of the CDU matrix that is represented by the <lb/>chunk. <lb/>Initially, those cells are added to the heap of free cells, then <lb/>dynamically placed into existing bundles, in new bundles, or <lb/>allocated opportunistically for one transmission. <lb/>Note that a PCE is expected to have precedence in the allocation, so <lb/>that a RPL parent would only be able to obtain portions that are not <lb/>in-use by the PCE. <lb/>4.4. Schedule Management Mechanisms <lb/>6TiSCH uses 4 paradigms to manage the TSCH schedule of the LLN nodes: <lb/>Static Scheduling, neighbor-to-neighbor Scheduling, remote monitoring <lb/>and scheduling management, and Hop-by-hop scheduling. Multiple <lb/>mechanisms are defined that implement the associated Interaction <lb/>Models, and can be combined and used in the same LLN. Which <lb/>mechanism(s) to use depends on application requirements. <lb/>4.4.1. Static Scheduling <lb/>In the simplest instantiation of a 6TiSCH network, a common fixed <lb/>schedule may be shared by all nodes in the network. Cells are <lb/>shared, and nodes contend for slot access in a slotted ALOHA manner. <lb/>A static TSCH schedule can be used to bootstrap a network, as an <lb/>initial phase during implementation, or as a fall-back mechanism in <lb/>case of network malfunction. This schedule is pre-established, for <lb/>instance decided by a network administrator based on operational <lb/>needs. It can be pre-configured into the nodes, or, more commonly, <lb/>learned by a node when joining the network using standard IEEE Std. <lb/>802.15.4 Information Elements (IE). Regardless, the schedule remains <lb/>unchanged after the node has joined a network. RPL is used on the <lb/>resulting network. This &quot;minimal&quot; scheduling mechanism that <lb/>implements this paradigm is detailed in [RFC8180]. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 35] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>4.4.2. Neighbor-to-neighbor Scheduling <lb/>In the simplest instantiation of a 6TiSCH network described in <lb/>Section 4.4.1, nodes may expect a packet at any cell in the schedule <lb/>and will waste energy idle listening. In a more complex <lb/>instantiation of a 6TiSCH network, a matching portion of the schedule <lb/>is established between peers to reflect the observed amount of <lb/>transmissions between those nodes. The aggregation of the cells <lb/>between a node and a peer forms a bundle that the 6top layer uses to <lb/>implement the abstraction of a link for IP. The bandwidth on that <lb/>link is proportional to the number of cells in the bundle. <lb/>If the size of a bundle is configured to fit an average amount of <lb/>bandwidth, peak traffic is dropped. If the size is configured to <lb/>allow for peak emissions, energy is be wasted idle listening. <lb/>As discussed in more details in Section 4.3, the 6top Protocol <lb/>[RFC8480] specifies the exchanges between neighbor nodes to reserve <lb/>soft cells to transmit to one another, possibly under the control of <lb/>a Scheduling Function (SF). Because this reservation is done without <lb/>global knowledge of the schedule of other nodes in the LLN, <lb/>scheduling collisions are possible. <lb/>And as discussed in Section 4.3.2, an optional Scheduling Function <lb/>(SF) is used to monitor bandwidth usage and perform requests for <lb/>dynamic allocation by the 6top sublayer. The SF component is not <lb/>part of the 6top sublayer. It may be collocated on the same device <lb/>or may be partially or fully offloaded to an external system. The <lb/>&quot;6TiSCH Minimal Scheduling Function (MSF)&quot; [I-D.ietf-6tisch-msf] <lb/>provides a simple scheduling function that can be used by default by <lb/>devices that support dynamic scheduling of soft cells. <lb/>Monitoring and relocation is done in the 6top layer. For the upper <lb/>layer, the connection between two neighbor nodes appears as a number <lb/>of cells. Depending on traffic requirements, the upper layer can <lb/>request 6top to add or delete a number of cells scheduled to a <lb/>particular neighbor, without being responsible for choosing the exact <lb/>slotOffset/channelOffset of those cells. <lb/>4.4.3. Remote Monitoring and Schedule Management <lb/>Remote monitoring and Schedule Management refers to a DetNet/SDN <lb/>model whereby an NME and a scheduling entity, associated with a PCE, <lb/>reside in a central controller and interact with the 6top layer to <lb/>control IPv6 Links and Tracks (Section 4.5) in a 6TiSCH network. The <lb/>composite centralized controller can assign physical resources (e.g., <lb/>buffers and hard cells) to a particular Track to optimize the <lb/>reliability within a bounded latency for a well-specified flow. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 36] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>The work at the 6TiSCH WG focused on non-deterministic traffic and <lb/>did not provide the generic data model that is necessary for the <lb/>controller to monitor and manage resources of the 6top sublayer. <lb/>This is deferred to future work, see Appendix A.1.2. <lb/>With respect to Centralized routing and scheduling, it is envisioned <lb/>that the related component of the 6TiSCH Architecture would be an <lb/>extension of the Deterministic Networking Architecture <lb/>[I-D.ietf-detnet-architecture], which studies Layer-3 aspects of <lb/>Deterministic Networks, and covers networks that span multiple <lb/>Layer-2 domains. <lb/>The DetNet architecture is a form of Software Defined Networking <lb/>(SDN) Architecture and is composed of three planes, a (User) <lb/>Application Plane, a Controller Plane (where the PCE operates), and a <lb/>Network Plane which can represent a 6TiSCH LLN. <lb/>Software-Defined Networking (SDN): Layers and Architecture <lb/>Terminology [RFC7426] proposes a generic representation of the SDN <lb/>architecture that is reproduced in Figure 10. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 37] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>o--------------------------------o <lb/>| <lb/>| <lb/>| +-------------+ <lb/>+----------+ | <lb/>| | Application | <lb/>| Service | | <lb/>| +-------------+ <lb/>+----------+ | <lb/>| <lb/>Application Plane <lb/>| <lb/>o---------------Y----------------o <lb/>| <lb/>*-----------------------------Y---------------------------------* <lb/>| <lb/>Network Services Abstraction Layer (NSAL) <lb/>| <lb/>*------Y------------------------------------------------Y-------* <lb/>| <lb/>| <lb/>| <lb/>Service Interface <lb/>| <lb/>| <lb/>| <lb/>o------Y------------------o <lb/>o---------------------Y------o <lb/>| <lb/>| <lb/>Control Plane | <lb/>| Management Plane <lb/>| <lb/>| <lb/>| +----Y----+ <lb/>+-----+ <lb/>| <lb/>| +-----+ <lb/>+----Y----+ | <lb/>| | Service | <lb/>| App | <lb/>| <lb/>| | App | <lb/>| Service | | <lb/>| +----Y----+ <lb/>+--Y--+ <lb/>| <lb/>| +--Y--+ <lb/>+----Y----+ | <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| *----Y-----------Y----* | <lb/>| *---Y---------------Y----* | <lb/>| | Control Abstraction | | <lb/>| | Management Abstraction | | <lb/>| | <lb/>Layer (CAL) <lb/>| | <lb/>| | <lb/>Layer (MAL) <lb/>| | <lb/>| *----------Y----------* | <lb/>| *----------Y-------------* | <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>o------------|------------o <lb/>o------------|---------------o <lb/>| <lb/>| <lb/>| CP <lb/>| MP <lb/>| Southbound <lb/>| Southbound <lb/>| Interface <lb/>| Interface <lb/>| <lb/>| <lb/>*------------Y---------------------------------Y----------------* <lb/>| <lb/>Device and resource Abstraction Layer (DAL) <lb/>| <lb/>*------------Y---------------------------------Y----------------* <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>o-------Y----------o <lb/>+-----+ <lb/>o--------Y----------o <lb/>| <lb/>| <lb/>| Forwarding Plane | <lb/>| App | <lb/>| Operational Plane | <lb/>| <lb/>| <lb/>o------------------o <lb/>+-----+ <lb/>o-------------------o <lb/>| <lb/>| <lb/>Network Device <lb/>| <lb/>+---------------------------------------------------------------+ <lb/>Figure 10: SDN Layers and Architecture Terminology per RFC 7426 <lb/>The PCE establishes end-to-end Tracks of hard cells, which are <lb/>described in more details in Section 4.6.1. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 38] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>The DetNet work is expected to enable end to end Deterministic Path <lb/>across heterogeneous network. This can be for instance a 6TiSCH LLN <lb/>and an Ethernet Backbone. <lb/>This model fits the 6TiSCH extended configuration, whereby a 6BBR <lb/>federates multiple 6TiSCH LLN in a single subnet over a backbone that <lb/>can be, for instance, Ethernet or Wi-Fi. In that model, 6TiSCH 6BBRs <lb/>synchronize with one another over the backbone, so as to ensure that <lb/>the multiple LLNs that form the IPv6 subnet stay tightly <lb/>synchronized. <lb/>If the Backbone is Deterministic, then the Backbone Router ensures <lb/>that the end-to-end deterministic behavior is maintained between the <lb/>LLN and the backbone. It is the responsibility of the PCE to compute <lb/>a deterministic path and to end across the TSCH network and an IEEE <lb/>Std. 802.1 TSN Ethernet backbone, and that of DetNet to enable end-<lb/>to-end deterministic forwarding. <lb/>4.4.4. Hop-by-hop Scheduling <lb/>A node can reserve a Track (Section 4.5) to one or more <lb/>destination(s) that are multiple hops away by installing soft cells <lb/>at each intermediate node. This forms a Track of soft cells. A <lb/>Track Scheduling Function above the 6top sublayer of each node on the <lb/>Track is needed to monitor these soft cells and trigger relocation <lb/>when needed. <lb/>This hop-by-hop reservation mechanism is expected to be similar in <lb/>essence to [RFC3209] and/or [RFC4080]/[RFC5974]. The protocol for a <lb/>node to trigger hop-by-hop scheduling is not yet defined. <lb/>4.5. On Tracks <lb/>The architecture introduces the concept of a Track, which is a <lb/>directed path from a source 6TiSCH node to one or more destination <lb/>6TiSCH node(s) across a 6TiSCH LLN. <lb/>A Track is the 6TiSCH instantiation of the concept of a Deterministic <lb/>Path as described in [I-D.ietf-detnet-architecture]. Constrained <lb/>resources such as memory buffers are reserved for that Track in <lb/>intermediate 6TiSCH nodes to avoid loss related to limited capacity. <lb/>A 6TiSCH node along a Track not only knows which bundles of cells it <lb/>should use to receive packets from a previous hop, but also knows <lb/>which bundle(s) it should use to send packets to its next hop along <lb/>the Track. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 39] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>4.5.1. General Behavior of Tracks <lb/>A Track is associated with Layer-2 bundles of cells with related <lb/>schedules and logical relationships and that ensure that a packet <lb/>that is injected in a Track will progress in due time all the way to <lb/>destination. <lb/>Multiple cells may be scheduled in a Track for the transmission of a <lb/>single packet, in which case the normal operation of IEEE Std. <lb/>802.15.4 Automatic Repeat-reQuest (ARQ) can take place; the <lb/>acknowledgment may be omitted in some cases, for instance if there is <lb/>no scheduled cell for a possible retry. <lb/>There are several benefits for using a Track to forward a packet from <lb/>a source node to the destination node. <lb/>1. Track forwarding, as further described in Section 4.6.1, is a <lb/>Layer-2 forwarding scheme, which introduces less process delay <lb/>and overhead than Layer-3 forwarding scheme. Therefore, LLN <lb/>Devices can save more energy and resource, which is critical for <lb/>resource constrained devices. <lb/>2. Since channel resources, i.e., bundles of cells, have been <lb/>reserved for communications between 6TiSCH nodes of each hop on <lb/>the Track, the throughput and the maximum latency of the traffic <lb/>along a Track are guaranteed and the jitter is maintained small. <lb/>3. By knowing the scheduled time slots of incoming bundle(s) and <lb/>outgoing bundle(s), 6TiSCH nodes on a Track could save more <lb/>energy by staying in sleep state during in-active slots. <lb/>4. Tracks are protected from interfering with one another if a cell <lb/>is scheduled to belong to at most one Track, and congestion loss <lb/>is avoided if at most one packet can be presented to the MAC to <lb/>use that cell. Tracks enhance the reliability of transmissions <lb/>and thus further improve the energy consumption in LLN Devices by <lb/>reducing the chances of retransmission. <lb/>4.5.2. Serial Track <lb/>A Serial (or simple) Track is the 6TiSCH version of a circuit; a <lb/>bundle of cells that are programmed to receive (RX-cells) is uniquely <lb/>paired to a bundle of cells that are set to transmit (TX-cells), <lb/>representing a Layer-2 forwarding state which can be used regardless <lb/>of the network layer protocol. A Serial Track is thus formed end-to-<lb/>end as a succession of paired bundles, a receive bundle from the <lb/>previous hop and a transmit bundle to the next hop along the Track. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 40] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>For a given iteration of the device schedule, the effective channel <lb/>of the cell is obtained by following in a loop a well-known hopping <lb/>sequence that started at Epoch time at the channelOffset of the cell, <lb/>which results in a rotation of the frequency that used for <lb/>transmission. The bundles may be computed so as to accommodate both <lb/>variable rates and retransmissions, so they might not be fully used <lb/>in the iteration of the schedule. <lb/>4.5.3. Complex Track with Replication and Elimination <lb/>The art of Deterministic Networks already include Packet Replication <lb/>and Elimination techniques. Example standards include the Parallel <lb/>Redundancy Protocol (PRP) and the High-availability Seamless <lb/>Redundancy (HSR) [IEC62439]. Similarly, and as opposed to a Serial <lb/>Track that is a sequence of nodes and links, a Complex Track is <lb/>shaped as a directed acyclic graph towards one or more destination(s) <lb/>to support multi-path forwarding and route around failures. <lb/>A Complex Track may branch off over non congruent branches for the <lb/>purpose of multicasting, and/or redundancy, in which case it <lb/>reconverges later down the path. This enables the Packet <lb/>Replication, Elimination and Ordering Functions (PREOF) defined by <lb/>Detnet. Packet ARQ, Replication, Elimination and Overhearing (PAREO) <lb/>adds radio-specific capabilities of Layer-2 ARQ and promiscuous <lb/>listening to redundant transmissions to compensate for the lossiness <lb/>of the medium and meet industrial expectations of a Reliable and <lb/>Available Wireless (RAW) network. Combining PAREO and PREOF, a Track <lb/>may extend beyond the 6TiSCH network in a larger DetNet network. <lb/>In the art of TSCH, a path does not necessarily support PRE but it is <lb/>almost systematically multi-path. This means that a Track is <lb/>scheduled so as to ensure that each hop has at least two forwarding <lb/>solutions, and the forwarding decision is to try the preferred one <lb/>and use the other in case of Layer-2 transmission failure as detected <lb/>by ARQ. Similarly, at each 6TiSCH hop along the Track, the PCE may <lb/>schedule more than one timeslot for a packet, so as to support <lb/>Layer-2 retries (ARQ). It is also possible that the field device <lb/>only uses the second branch if sending over the first branch fails. <lb/>4.5.4. DetNet End-to-end Path <lb/>Ultimately, DetNet [I-D.ietf-detnet-architecture] should enable to <lb/>extend a Track beyond the 6TiSCH LLN as illustrated in Figure 11. In <lb/>that example, a Track that is laid out from a field device in a <lb/>6TiSCH network to an IoT gateway that is located on an 802.1 Time-<lb/>Sensitive Networking (TSN) backbone. A 6TiSCH-Aware DetNet Service <lb/>Layer handles the Packet Replication, Elimination, and Ordering <lb/>Functions over the DODAG that forms a Track. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 41] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>The Replication function in the 6TiSCH Node sends a copy of each <lb/>packet over two different branches, and the PCE schedules each hop of <lb/>both branches so that the two copies arrive in due time at the <lb/>gateway. In case of a loss on one branch, hopefully the other copy <lb/>of the packet still makes it in due time. If two copies make it to <lb/>the IoT gateway, the Elimination function in the gateway ignores the <lb/>extra packet and presents only one copy to upper layers. <lb/>+-=-=-+ <lb/>| IoT | <lb/>| G/W | <lb/>+-=-=-+ <lb/>^ &lt;=== Elimination <lb/>Track branch <lb/>| | <lb/>+-=-=-=-+ +-=-=-=-=+ Subnet Backbone <lb/>| <lb/>| <lb/>+-=|-=+ <lb/>+-=|-=+ <lb/>| | | Backbone <lb/>| | | Backbone <lb/>o <lb/>| | | router <lb/>| | | router <lb/>+-=/-=+ <lb/>+-=|-=+ <lb/>o <lb/>/ <lb/>o <lb/> o-=-o-=-=/ <lb/>o <lb/>o <lb/>o-=-o-=/ <lb/>o <lb/>o <lb/>o o <lb/>o <lb/>o <lb/>\ / <lb/>o <lb/>o <lb/>LLN <lb/>o <lb/>o <lb/>v &lt;=== Replication <lb/>o <lb/> Figure 11: Example End-to-End DetNet Track <lb/>4.5.5. Cell Reuse <lb/>The 6TiSCH architecture provides means to avoid waste of cells as <lb/>well as overflows in the transmit bundle of a Track, as follows: <lb/>A TX-cell that is not needed for the current iteration may be reused <lb/>opportunistically on a per-hop basis for routed packets. When all of <lb/>the frame that were received for a given Track are effectively <lb/>transmitted, any available TX-cell for that Track can be reused for <lb/>upper layer traffic for which the next-hop router matches the next <lb/>hop along the Track. In that case, the cell that is being used is <lb/>effectively a TX-cell from the Track, but the short address for the <lb/>destination is that of the next-hop router. <lb/>It results in a frame that is received in a RX-cell of a Track with a <lb/>destination MAC address set to this node as opposed to the broadcast <lb/>MAC address must be extracted from the Track and delivered to the <lb/>upper layer. Note that a frame with an unrecognized destination MAC <lb/>address is dropped at the lower MAC layer and thus is not received at <lb/>the 6top sublayer. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 42] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>On the other hand, it might happen that there are not enough TX-cells <lb/>in the transmit bundle to accommodate the Track traffic, for instance <lb/>if more retransmissions are needed than provisioned. In that case, <lb/>and if the frame transports an IPv6 packet, then it can be placed for <lb/>transmission in the bundle that is used for Layer-3 traffic towards <lb/>the next hop along the Track. The MAC address should be set to the <lb/>next-hop MAC address to avoid confusion. <lb/>It results in a frame that is received over a Layer-3 bundle may be <lb/>in fact associated to a Track. In a classical IP link such as an <lb/>Ethernet, off-Track traffic is typically in excess over reservation <lb/>to be routed along the non-reserved path based on its QoS setting. <lb/>But with 6TiSCH, since the use of the Layer-3 bundle may be due to <lb/>transmission failures, it makes sense for the receiver to recognize a <lb/>frame that should be re-Tracked, and to place it back on the <lb/>appropriate bundle if possible. . A frame is re-Tracked by <lb/>scheduling it for transmission over the transmit bundle associated to <lb/>the Track, with the destination MAC address set to broadcast. <lb/>4.6. Forwarding Models <lb/>By forwarding, this document means the per-packet operation that <lb/>allows to deliver a packet to a next hop or an upper layer in this <lb/>node. Forwarding is based on pre-existing state that was installed <lb/>as a result of a routing computation Section 4.7. 6TiSCH supports <lb/>three different forwarding model:(G-MPLS) Track Forwarding, <lb/>(classical) IPv6 Forwarding and (6LoWPAN) Fragment Forwarding. <lb/>4.6.1. Track Forwarding <lb/>Forwarding along a Track can be seen as a Generalized Multi-protocol <lb/>Label Switching (G-MPLS) operation in that the information used to <lb/>switch a frame is not an explicit label, but rather related to other <lb/>properties of the way the packet was received, a particular cell in <lb/>the case of 6TiSCH. As a result, as long as the TSCH MAC (and <lb/>Layer-2 security) accepts a frame, that frame can be switched <lb/>regardless of the protocol, whether this is an IPv6 packet, a 6LoWPAN <lb/>fragment, or a frame from an alternate protocol such as WirelessHART <lb/>or ISA100.11a. <lb/>A data frame that is forwarded along a Track normally has a <lb/>destination MAC address that is set to broadcast -or a multicast <lb/>address depending on MAC support. This way, the MAC layer in the <lb/>intermediate nodes accepts the incoming frame and 6top switches it <lb/>without incurring a change in the MAC header. In the case of IEEE <lb/>Std. 802.15.4, this means effectively broadcast, so that along the <lb/>Track the short address for the destination of the frame is set to <lb/>0xFFFF. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 43] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>There are 2 modes for a Track, native mode and tunnel mode. <lb/>4.6.1.1. Native Mode <lb/>In native mode, the Protocol Data Unit (PDU) is associated with flow-<lb/>dependent meta-data that refers uniquely to the Track, so the 6top <lb/>sublayer can place the frame in the appropriate cell without <lb/>ambiguity. In the case of IPv6 traffic, this flow identification may <lb/>be done using a 6-tuple as discussed in [I-D.ietf-detnet-ip]. In <lb/>particular, implementations of this document should support <lb/>identification of DetNet flows based on the IPv6 Flow Label field. <lb/>The flow identification may also be done using a dedicated RPL <lb/>Instance (see section 3.1.3 of [RFC6550]), signaled in a RPL Packet <lb/>Information (more in section 11.2.2.1 of [RFC6550]). The flow <lb/>identification is validated at egress before restoring the <lb/>destination MAC address (DMAC) and punting to the upper layer. <lb/>Figure 12 illustrates the Track Forwarding operation which happens at <lb/>the 6top sublayer, below IP. <lb/>| Packet flowing across the network ^ <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>IPv6 <lb/>| <lb/>| <lb/>| <lb/>+--------------+ <lb/>| <lb/>| <lb/>| 6LoWPAN HC | <lb/>| <lb/>| <lb/>+--------------+ ingress <lb/>egress <lb/>| <lb/>6top <lb/>| <lb/>sets <lb/>+----+ <lb/>+----+ <lb/>restores <lb/>+--------------+ DMAC to <lb/>| <lb/>| <lb/>| <lb/>| <lb/>DMAC to <lb/>| <lb/>TSCH MAC <lb/>| <lb/>brdcst <lb/>| <lb/>| <lb/>| <lb/>| <lb/>dest <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>LLN PHY <lb/>| <lb/>+-------+ <lb/>+--...-----+ <lb/>+-------+ <lb/>+--------------+ <lb/>Ingress <lb/>Relay <lb/>Relay <lb/>Egress <lb/>Stack Layer <lb/>Node <lb/>Node <lb/>Node <lb/>Node <lb/>Figure 12: Track Forwarding, Native Mode <lb/>4.6.1.2. Tunnel Mode <lb/>In tunnel mode, the frames originate from an arbitrary protocol over <lb/>a compatible MAC that may or may not be synchronized with the 6TiSCH <lb/>network. An example of this would be a router with a dual radio that <lb/>is capable of receiving and sending WirelessHART or ISA100.11a frames <lb/>with the second radio, by presenting itself as an access Point or a <lb/>Backbone Router, respectively. In that mode, some entity (e.g., PCE) <lb/>can coordinate with a WirelessHART Network Manager or an ISA100.11a <lb/>System Manager to specify the flows that are transported. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 44] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>+--------------+ <lb/>| <lb/>IPv6 <lb/>| <lb/>+--------------+ <lb/>| 6LoWPAN HC | <lb/>+--------------+ <lb/>set <lb/>restore <lb/>| <lb/>6top <lb/>| <lb/>+DMAC+ <lb/>+DMAC+ <lb/>+--------------+ <lb/>to|brdcst <lb/>to|nexthop <lb/>| <lb/>TSCH MAC <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>LLN PHY <lb/>| <lb/>+-------+ <lb/>+--...-----+ <lb/>+-------+ <lb/>+--------------+ <lb/>| <lb/>ingress <lb/>egress <lb/>| <lb/>| <lb/>| <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>LLN PHY <lb/>| <lb/>| <lb/>| <lb/>+--------------+ <lb/>| Packet flowing across the network | <lb/>| <lb/>TSCH MAC <lb/>| <lb/>| <lb/>| <lb/>+--------------+ <lb/>| DMAC = <lb/>| DMAC = <lb/>|ISA100/WiHART | <lb/>| nexthop <lb/>v nexthop <lb/>+--------------+ <lb/>Source <lb/>Ingress <lb/>Egress <lb/>Destination <lb/>Stack Layer <lb/>Node <lb/>Node <lb/>Node <lb/>Node <lb/>Figure 13: Track Forwarding, Tunnel Mode <lb/>In that case, the flow information that identifies the Track at the <lb/>ingress 6TiSCH router is derived from the RX-cell. The DMAC is set <lb/>to this node but the flow information indicates that the frame must <lb/>be tunneled over a particular Track so the frame is not passed to the <lb/>upper layer. Instead, the DMAC is forced to broadcast and the frame <lb/>is passed to the 6top sublayer for switching. <lb/>At the egress 6TiSCH router, the reverse operation occurs. Based on <lb/>tunneling information of the Track, which may for instance indicate <lb/>that the tunneled datagram is an IP packet, the datagram is passed to <lb/>the appropriate Link-Layer with the destination MAC restored. <lb/>4.6.1.3. Tunneling Information <lb/>Tunneling information coming with the Track configuration provides <lb/>the destination MAC address of the egress endpoint as well as the <lb/>tunnel mode and specific data depending on the mode, for instance a <lb/>service access point for frame delivery at egress. <lb/>If the tunnel egress point does not have a MAC address that matches <lb/>the configuration, the Track installation fails. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 45] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>If the Layer-3 destination address belongs to the tunnel termination, <lb/>then it is possible that the IPv6 address of the destination is <lb/>compressed at the 6LoWPAN sublayer based on the MAC address. <lb/>Restoring the wrong MAC address at the egress would then also result <lb/>in the wrong IP address in the packet after decompression. For that <lb/>reason, a packet can be injected in a Track only if the destination <lb/>MAC address is effectively that of the tunnel egress point. It is <lb/>thus mandatory for the ingress router to validate that the MAC <lb/>address that was used at the 6LoWPAN sublayer for compression matches <lb/>that of the tunnel egress point before it overwrites it to broadcast. <lb/>The 6top sublayer at the tunnel egress point reverts that operation <lb/>to the MAC address obtained from the tunnel information. <lb/>4.6.2. IPv6 Forwarding <lb/>As the packets are routed at Layer-3, traditional QoS and Active <lb/>Queue Management (AQM) operations are expected to prioritize flows. <lb/>| Packet flowing across the network ^ <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>IPv6 <lb/>| <lb/>| <lb/>+-QoS+ <lb/>+-QoS+ <lb/>| <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| 6LoWPAN HC | <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>6top <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>TSCH MAC <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>LLN PHY <lb/>| <lb/>+-------+ <lb/>+--...-----+ <lb/>+-------+ <lb/>+--------------+ <lb/>Source <lb/>Ingress <lb/>Egress <lb/>Destination <lb/>Stack Layer <lb/>Node <lb/>Router <lb/>Router <lb/>Node <lb/>Figure 14: IP Forwarding <lb/>4.6.3. Fragment Forwarding <lb/>Considering that per section 4 of [RFC4944] 6LoWPAN packets can be as <lb/>large as 1280 bytes (the IPv6 minimum MTU), and that the non-storing <lb/>mode of RPL implies Source Routing that requires space for routing <lb/>headers, and that a IEEE Std. 802.15.4 frame with security may carry <lb/>in the order of 80 bytes of effective payload, an IPv6 packet might <lb/>be fragmented into more than 16 fragments at the 6LoWPAN sublayer. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 46] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>This level of fragmentation is much higher than that traditionally <lb/>experienced over the Internet with IPv4 fragments, where <lb/>fragmentation is already known as harmful. <lb/>In the case to a multihop route within a 6TiSCH network, Hop-by-Hop <lb/>recomposition occurs at each hop to reform the packet and route it. <lb/>This creates additional latency and forces intermediate nodes to <lb/>store a portion of a packet for an undetermined time, thus impacting <lb/>critical resources such as memory and battery. <lb/>[I-D.ietf-6lo-minimal-fragment] describes a framework for forwarding <lb/>fragments end-to-end across a 6TiSCH route-over mesh. Within that <lb/>framework, [I-D.ietf-lwig-6lowpan-virtual-reassembly] details a <lb/>virtual reassembly buffer mechanism whereby the datagram tag in the <lb/>6LoWPAN Fragment is used as a label for switching at the 6LoWPAN <lb/>sublayer. <lb/>Building on this technique, [I-D.ietf-6lo-fragment-recovery] <lb/>introduces a new format for 6LoWPAN fragments that enables the <lb/>selective recovery of individual fragments, and allows for a degree <lb/>of flow control based on an Explicit Congestion Notification. <lb/>| Packet flowing across the network ^ <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>IPv6 <lb/>| <lb/>| <lb/>+----+ <lb/>+----+ <lb/>| <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| 6LoWPAN HC | <lb/>| <lb/>learn <lb/>learn <lb/>| <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>6top <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>TSCH MAC <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>LLN PHY <lb/>| <lb/>+-------+ <lb/>+--...-----+ <lb/>+-------+ <lb/>+--------------+ <lb/>Source <lb/>Ingress <lb/>Egress <lb/>Destination <lb/>Stack Layer <lb/>Node <lb/>Router <lb/>Router <lb/>Node <lb/>Figure 15: Forwarding First Fragment <lb/>In that model, the first fragment is routed based on the IPv6 header <lb/>that is present in that fragment. The 6LoWPAN sublayer learns the <lb/>next hop selection, generates a new datagram tag for transmission to <lb/>the next hop, and stores that information indexed by the incoming MAC <lb/>address and datagram tag. The next fragments are then switched based <lb/>on that stored state. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 47] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>| Packet flowing across the network ^ <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>IPv6 <lb/>| <lb/>| <lb/>| <lb/>+--------------+ <lb/>| <lb/>| <lb/>| 6LoWPAN HC | <lb/>| <lb/>replay <lb/>replay <lb/>| <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>6top <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>TSCH MAC <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>+--------------+ <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>LLN PHY <lb/>| <lb/>+-------+ <lb/>+--...-----+ <lb/>+-------+ <lb/>+--------------+ <lb/>Source <lb/>Ingress <lb/>Egress <lb/>Destination <lb/>Stack Layer <lb/>Node <lb/>Router <lb/>Router <lb/>Node <lb/>Figure 16: Forwarding Next Fragment <lb/>A bitmap and an ECN echo in the end-to-end acknowledgment enable the <lb/>source to resend the missing fragments selectively. The first <lb/>fragment may be resent to carve a new path in case of a path failure. <lb/>The ECN echo set indicates that the number of outstanding fragments <lb/>should be reduced. <lb/>4.7. Advanced 6TiSCH Routing <lb/>4.7.1. Packet Marking and Handling <lb/>All packets inside a 6TiSCH domain must carry the RPLInstanceID that <lb/>identifies the 6TiSCH topology that is to be used for routing and <lb/>forwarding that packet. The location of that information must be the <lb/>same for all packets forwarded inside the domain. <lb/>For packets that are routed by a PCE along a Track, the tuple formed <lb/>by the IPv6 source address and a local RPLInstanceID in the packet <lb/>identify uniquely the Track and associated transmit bundle. <lb/>For packets that are routed by RPL, that information is the <lb/>RPLInstanceID which is carried in the RPL Packet Information (RPI), <lb/>as discussed in section 11.2 of [RFC6550], &quot;Loop Avoidance and <lb/>Detection&quot;. The RPI is transported by a RPL option in the IPv6 Hop-<lb/>By-Hop Header [RFC6553]. <lb/>A compression mechanism for the RPL packet artifacts that integrates <lb/>the compression of IP-in-IP encapsulation and the Routing Header type <lb/>3 [RFC6554] with that of the RPI in a 6LoWPAN dispatch/header type is <lb/>specified in [RFC8025] and [RFC8138]. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 48] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>Either way, the method and format used for encoding the RPLInstanceID <lb/>is generalized to all 6TiSCH topological Instances, which include <lb/>both RPL Instances and Tracks. <lb/>4.7.2. Replication, Retries and Elimination <lb/>6TiSCH supports the PREOF operations of elimination and reordering of <lb/>packets along a complex Track, but has no requirement about whether a <lb/>sequence number is tagged in the packet for that purpose. With <lb/>6TiSCH, the schedule can tell when multiple receive timeslots <lb/>correspond to copies of a same packet, in which case the receiver may <lb/>avoid listening to the extra copies once it had received one instance <lb/>of the packet. <lb/>The semantics of the configuration will enable correlated timeslots <lb/>to be grouped for transmit (and respectively receive) with a &apos;OR&apos; <lb/>relations, and then a &apos;AND&apos; relation would be configurable between <lb/>groups. The semantics is that if the transmit (and respectively <lb/>receive) operation succeeded in one timeslot in a &apos;OR&apos; group, then <lb/>all the other timeslots in the group are ignored. Now, if there are <lb/>at least two groups, the &apos;AND&apos; relation between the groups indicates <lb/>that one operation must succeed in each of the groups. <lb/>On the transmit side, timeslots provisioned for retries along a same <lb/>branch of a Track are placed a same &apos;OR&apos; group. The &apos;OR&apos; relation <lb/>indicates that if a transmission is acknowledged, then <lb/>retransmissions of that packet should not be attempted for remaining <lb/>timeslots in that group. There are as many &apos;OR&apos; groups as there are <lb/>branches of the Track departing from this node. Different &apos;OR&apos; <lb/>groups are programmed for the purpose of replication, each group <lb/>corresponding to one branch of the Track. The &apos;AND&apos; relation between <lb/>the groups indicates that transmission over any of branches must be <lb/>attempted regardless of whether a transmission succeeded in another <lb/>branch. It is also possible to place cells to different next-hop <lb/>routers in a same &apos;OR&apos; group. This allows to route along multi-path <lb/>Tracks, trying one next-hop and then another only if sending to the <lb/>first fails. <lb/>On the receive side, all timeslots are programmed in a same &apos;OR&apos; <lb/>group. Retries of a same copy as well as converging branches for <lb/>elimination are converged, meaning that the first successful <lb/>reception is enough and that all the other timeslots can be ignored. <lb/>A &apos;AND&apos; group denotes different packets that must all be received and <lb/>transmitted over the associated transmit groups within their <lb/>respected &apos;AND&apos; or &apos;OR&apos; rules. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 49] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>As an example say that we have a simple network as represented in <lb/>Figure 17, and we want to enable PREOF between an ingress node I and <lb/>an egress node E. <lb/>+-+ <lb/>+-+ <lb/>--|A| ------|C| --<lb/>/ <lb/>+-+ <lb/>+-+ <lb/>\ <lb/>/ <lb/>\ <lb/>+-+ <lb/>+-+ <lb/>|I| <lb/>|E| <lb/>+-+ <lb/>+-+ <lb/>\ <lb/>/ <lb/>\ <lb/>+-+ <lb/>+-+ <lb/>/ <lb/>--|B| -------|D| --<lb/>+-+ <lb/>+-+ <lb/>Figure 17: Scheduling PREOF on a Simple Network <lb/>The assumption for this particular problem is that a 6TiSCH node has <lb/>a single radio, so it cannot perform 2 receive and/or transmit <lb/>operations at the same time, even on 2 different channels. <lb/>Say we have 6 possible channels, and at least 10 timeslots per <lb/>slotframe. Figure 18 shows a possible schedule whereby each <lb/>transmission is retried 2 or 3 times, and redundant copies are <lb/>forwarded in parallel via A and C on the one hand, and B and D on the <lb/>other, providing time diversity, spatial diversity though different <lb/>physical paths, and frequency diversity. <lb/>slotOffset <lb/>0 <lb/>1 <lb/>2 <lb/>3 <lb/>4 <lb/>5 <lb/>6 <lb/>7 <lb/>9 <lb/>+----+----+----+----+----+----+----+----+----+ <lb/>channelOffset 0 | <lb/>| <lb/>| <lb/>| <lb/>| <lb/>| <lb/>|B-&gt;D| <lb/>| <lb/>| ... <lb/>+----+----+----+----+----+----+----+----+----+ <lb/>channelOffset 1 | <lb/>|I-&gt;A| <lb/>|A-&gt;C|B-&gt;D| <lb/>| <lb/>| <lb/>| <lb/>| ... <lb/>+----+----+----+----+----+----+----+----+----+ <lb/>channelOffset 2 |I-&gt;A| <lb/>| <lb/>|I-&gt;B| <lb/>|C-&gt;E| <lb/>|D-&gt;E| <lb/>| ... <lb/>+----+----+----+----+----+----+----+----+----+ <lb/>channelOffset 3 | <lb/>| <lb/>| <lb/>| <lb/>|A-&gt;C| <lb/>| <lb/>| <lb/>| <lb/>| ... <lb/>+----+----+----+----+----+----+----+----+----+ <lb/>channelOffset 4 | <lb/>| <lb/>|I-&gt;B| <lb/>| <lb/>|B-&gt;D| <lb/>| <lb/>|D-&gt;E| ... <lb/>+----+----+----+----+----+----+----+----+----+ <lb/>channelOffset 5 | <lb/>| <lb/>|A-&gt;C| <lb/>| <lb/>| <lb/>|C-&gt;E| <lb/>| <lb/>| ... <lb/>+----+----+----+----+----+----+----+----+----+ <lb/>Figure 18: Example Global Schedule <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 50] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>This translates in a different slotframe for every node that provides <lb/>the waking and sleeping times, and the channelOffset to be used when <lb/>awake. Figure 19 shows the corresponding slotframe for node A. <lb/>slotOffset <lb/>0 <lb/>1 <lb/>2 <lb/>3 <lb/>4 <lb/>5 <lb/>6 <lb/>7 <lb/>9 <lb/>+----+----+----+----+----+----+----+----+----+ <lb/>operation <lb/>|rcv |rcv |xmit|xmit|xmit|none|none|none|none| ... <lb/>+----+----+----+----+----+----+----+----+----+ <lb/>channelOffset <lb/>| 2 | 1 | 5 | 1 | 3 |N/A |N/A |N/A |N/A | ... <lb/>+----+----+----+----+----+----+----+----+----+ <lb/>Figure 19: Example Slotframe for Node A <lb/>The logical relationship between the timeslots is given by the <lb/>following table: <lb/>+------+---------------------+------------------------+ <lb/>| Node | <lb/>rcv slotOffset <lb/>| <lb/>xmit slotOffset <lb/>| <lb/>+------+---------------------+------------------------+ <lb/>| I <lb/>| <lb/>N/A <lb/>| (0 OR 1) AND (2 OR 3) | <lb/>| A <lb/>| <lb/>(0 OR 1) <lb/>| <lb/>(2 OR 3 OR 4) <lb/>| <lb/>| B <lb/>| <lb/>(2 OR 3) <lb/>| <lb/>(4 OR 5 OR 6) <lb/>| <lb/>| C <lb/>| <lb/>(2 OR 3 OR 4) <lb/>| <lb/>(5 OR 6) <lb/>| <lb/>| D <lb/>| <lb/>(4 OR 5 OR 6) <lb/>| <lb/>(7 OR 8) <lb/>| <lb/>| E <lb/>| (5 OR 6 OR 7 OR 8) | <lb/>N/A <lb/>| <lb/>+------+---------------------+------------------------+ <lb/>5. IANA Considerations <lb/>This document does not require IANA action. <lb/>6. Security Considerations <lb/>The &quot;Minimal Security Framework for 6TiSCH&quot; <lb/>[I-D.ietf-6tisch-minimal-security] was optimized for Low-Power and <lb/>TSCH operations. The reader is encouraged to review the Security <lb/>Considerations section of that document, which discusses 6TiSCH <lb/>security issues in more details. <lb/>6.1. Availability of Remote Services <lb/>The operation of 6TiSCH Tracks inherits its high level operation from <lb/>DetNet and is subject to the observations in section 5 of <lb/>[I-D.ietf-detnet-architecture]. The installation and the maintenance <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 51] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>of the 6TiSCH Tracks depends on the availability of a controller with <lb/>a PCE to compute and push them in the network. When that <lb/>connectivity is lost, existing Tracks may continue to operate until <lb/>the end of their lifetime, but cannot be removed or updated, and new <lb/>Tracks cannot be installed. <lb/>In a LLN, the communication with a remote PCE may be slow and <lb/>unreactive to rapid changes in the condition of the wireless <lb/>communication. An attacker may introduce extra delay by selectively <lb/>jamming some packets or some flows. The expectation is that the <lb/>6TiSCH Tracks enable enough redundancy to maintain the critical <lb/>traffic in operation while new routes are calculated and programmed <lb/>into the network. <lb/>As with DetNet in general, the communication with the PCE must be <lb/>secured and should be protected against DoS attacks, including delay <lb/>injection and blackholing attacks, and secured as discussed in the <lb/>security considerations defined for Abstraction and Control of <lb/>Traffic Engineered Networks (ACTN) in Section 9 of [RFC8453], which <lb/>applies equally to DetNet and 6TiSCH. In a similar manner, the <lb/>communication with the JRC must be secured and should be protected <lb/>against DoS attacks when possible. <lb/>6.2. Selective Jamming <lb/>The Hopping Sequence of a TSCH network is well-known, meaning that if <lb/>a rogue manages to identify a cell of a particular flow, then it may <lb/>to selectively jam that cell, without impacting any other traffic. <lb/>This attack can be performed at the PHY layer without any knowledge <lb/>of the Layer-2 keys, and is very hard to detect and diagnose because <lb/>only one flow is impacted. <lb/>[I-D.tiloca-6tisch-robust-scheduling] proposes a method to obfuscate <lb/>the hopping sequence and make it harder to perpetrate that particular <lb/>attack. <lb/>6.3. MAC-Layer Security <lb/>This architecture operates on IEEE Std. 802.15.4 and expects the <lb/>Link-Layer security to be enabled at all times between connected <lb/>devices, except for the very first step of the device join process, <lb/>where a joining device may need some initial, unsecured exchanges so <lb/>as to obtain its initial key material. In a typical deployment, all <lb/>joined nodes use the same keys and rekeying needs to be global. <lb/>The 6TISCH Architecture relies on the join process to deny <lb/>authorization of invalid nodes and preserve the integrity of the <lb/>network keys. A rogue that managed to access the network can perform <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 52] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>a large variety of attacks from DoS to injecting forged packets and <lb/>routing information. &quot;Zero-trust&quot; properties would be highly <lb/>desirable but are mostly not available at the time of this writing. <lb/>[I-D.ietf-6lo-ap-nd] is a notable exception that protects the <lb/>ownership of IPv6 addresses and prevents a rogue node with L2 access <lb/>from stealing and injecting traffic on behalf of a legitimate node. <lb/>6.4. Time Synchronization <lb/>Time Synchronization in TSCH induces another event horizon whereby a <lb/>node will only communicate with another node if they are synchronized <lb/>within a guard time. The pledge discovers the synchronization of the <lb/>network based on the time of reception of the beacon. If an attacker <lb/>synchronizes a pledge outside of the guard time of the legitimate <lb/>nodes then the pledge will never see a legitimate beacon and may not <lb/>discover the attack. <lb/>As discussed in [I-D.ietf-detnet-architecture], measures must be <lb/>taken to protect the time synchronization, and for 6TiSCH this <lb/>includes ensuring that the Absolute Slot Number (ASN), which is the <lb/>node&apos;s sense of time, is not compromised. Once installed and as long <lb/>as the node is synchronized to the network, ASN is implicit in the <lb/>transmissions. <lb/>IEEE Std. 802.15.4 [IEEE802154] specifies that in a TSCH network, the <lb/>nonce that is used for the computation of the Message Integrity Code <lb/>(MIC) to secure Link-Layer frames is composed of the address of the <lb/>source of the frame and of the ASN. The standard assumes that the <lb/>ASN is distributed securely by other means. The ASN is not passed <lb/>explicitly in the data frames and does not constitute a complete <lb/>anti-replay protection. It results that upper layer protocols must <lb/>provide a way to detect duplicates and cope with them. <lb/>If the receiver and the sender have a different sense of ASN, the MIC <lb/>will not validate and the frame will be dropped. In that sense, TSCH <lb/>induces an event horizon whereby only nodes that have a common sense <lb/>of ASN can talk to one another in an authenticated manner. With <lb/>6TiSCH, the pledge discovers a tentative ASN in beacons from nodes <lb/>that have already joined the network. But even if the beacon can be <lb/>authenticated, the ASN cannot be trusted as it could be a replay by <lb/>an attacker and thus could announce an ASN that represents a time in <lb/>the past. If the pledge uses an ASN that is learned from a replayed <lb/>beacon for an encrypted transmission, a nonce-reuse attack becomes <lb/>possible and the network keys may be compromised. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 53] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>6.5. Validating ASN <lb/>After obtaining the tentative ASN, a pledge that wishes to join the <lb/>6TiSCH network must use a join protocol to obtain its security keys. <lb/>The join protocol used in 6TiSCH is the Constrained Join Protocol <lb/>(CoJP). In the minimal setting defined in <lb/>[I-D.ietf-6tisch-minimal-security], the authentication requires a <lb/>pre-shared key, based on which a secure session is derived. The CoJP <lb/>exchange may also be preceded with a zero-touch handshake <lb/>[I-D.ietf-6tisch-dtsecurity-zerotouch-join] in order to enable pledge <lb/>joining based on certificates and/or inter-domain communication. <lb/>As detailed in Section 4.2.1, a Join Proxy (JP) helps the pledge for <lb/>the join procedure by relaying the link-scope Join Request over the <lb/>IP network to a Join Registrar/Coordinator (JRC) that can <lb/>authenticate the pledge and validate that it is attached to the <lb/>appropriate network. As a result of the CoJP exchange, the pledge is <lb/>in possession of a Link-Layer material including keys and a short <lb/>address, and if the ASN is known to be correct, all traffic can now <lb/>be secured using CCM* [CCMstar] at the Link-Layer. <lb/>The authentication steps must be such that they cannot be replayed by <lb/>an attacker, and they must not depend on the tentative ASN being <lb/>valid. During the authentication, the keying material that the <lb/>pledge obtains from the JRC does not provide protection against <lb/>spoofed ASN. Once the pledge has obtained the keys to use in the <lb/>network, it may still need to verify the ASN. If the nonce used in <lb/>the Layer-2 security derives from the extended (MAC-64) address, then <lb/>replaying the ASN alone cannot enable a nonce-reuse attack unless the <lb/>same node is lost its state with a previous ASN. But if the nonce <lb/>derives from the short address (e.g., assigned by the JRC) then the <lb/>JRC must ensure that it never assigns short addresses that were <lb/>already given to this or other nodes with the same keys. In other <lb/>words, the network must be rekeyed before the JRC runs out of short <lb/>addresses. <lb/>6.6. Network Keying and Rekeying <lb/>Section 4.2.1 provides an overview of the CoJP process described in <lb/>[I-D.ietf-6tisch-minimal-security] by which an LLN can be assembled <lb/>in the field, having been provisioned in a lab. <lb/>[I-D.ietf-6tisch-dtsecurity-zerotouch-join] is future work that <lb/>preceeds and then leverages the CoJP protocol using the <lb/>[I-D.ietf-anima-constrained-voucher] constrained profile of <lb/>[I-D.ietf-anima-bootstrapping-keyinfra] (BRSKI). This later work <lb/>requires a yet-to-be standardized Lighweight Authenticated Key <lb/>Exchange protocol. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 54] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>The CoJP protocol results in distribution of a network-wide key that <lb/>is to be used with [IEEE802154] security. The details of use are <lb/>described in [I-D.ietf-6tisch-minimal-security] sections 9.2 and <lb/>9.3.2. <lb/>The BRSKI mechanism may lead the use of the CoJP protocol, in which <lb/>case it also results in distribution of a network-wide key. <lb/>Alternatively the BRSKI mechanism may be followed by use of <lb/>[I-D.ietf-ace-coap-est] to enroll certificates for each device. In <lb/>that case, the certificates may be used with an [IEEE802154] key <lb/>agreement protocol. The description of this mechanism, while <lb/>conceptually straight forward still has significant standardization <lb/>hurdles to pass. <lb/>[I-D.ietf-6tisch-minimal-security] section 9.2 describes a mechanism <lb/>to change (rekey) the network. There are a number of reasons to <lb/>initiate a network rekey: to remove unwanted (corrupt/malicious) <lb/>nodes, to recover unused 2-byte short addresses, due to limits in <lb/>encryption algorithms. For all of the mechanisms that distribute a <lb/>network-wide key, rekeying is also needed on a periodic basis. In <lb/>more details: <lb/>o The mechanism described in [I-D.ietf-6tisch-minimal-security] <lb/>section 9.2 requires advance communication between the JRC and <lb/>every one of the nodes before the key change. Given that many <lb/>nodes may be sleepy, this operation may take a significant amount <lb/>of time, and may consume a significant portion of the available <lb/>bandwidth. As such, network-wide rekeys in order to exclude nodes <lb/>that have become malicious will not be particularly quick. If a <lb/>rekey is already in progress, but the unwanted node has not yet <lb/>been updated, then it is possible to to just continue the <lb/>operation. If the unwanted node has already received the update, <lb/>then the rekey operation will need to be restarted. <lb/>o The cryptographic mechanisms used by [IEEE802154] include the <lb/>2-byte short address in the calculation of the context. If the <lb/>2-byte short address is reassigned to another node while the same <lb/>network-wide keys are in operation, it is possible that this could <lb/>result in disclosure of the network-wide key due to reused of the <lb/>nonce. A network that gains and loses nodes on a regular basis is <lb/>likely to reach the 65536 limit of the 2-byte (16-bit) short <lb/>addresses, even if the network has only a few thousand nodes. <lb/>Network planners should consider the need to rekey the network on <lb/>a periodic basis in order to recover 2-byte addresses. The rekey <lb/>can update the short addresses for active nodes if desired, but <lb/>there is actually no need to do this as long as the key has been <lb/>changed. <lb/></body>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 55] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<body>o Many cipher algorithms have some suggested limits on how many <lb/>bytes should be encrypted with that algorithm before a new key is <lb/>used. These numbers are typically in the many to hundreds of <lb/>gigabytes of data. On very fast backbone networks this becomes an <lb/>important concern. On LLNs with typical data rates in the <lb/>kilobits/second, this concern is significantly less. However, the <lb/>LLN may be expected to operate for decades at a time, and <lb/>operators are advised to plan for the need to rekey. <lb/>Except for urgent rekeys caused by malicious nodes, the rekey <lb/>operation described in [I-D.ietf-6tisch-minimal-security] can be done <lb/>as a background task and can be done incrementally. It is a make-<lb/>before-break mechanism. The switch over to the new key is not <lb/>signaled by time, but rather by observation that the new key is in <lb/>use. As such, the update can take as long as needed, or occur in as <lb/>short a time as practical. <lb/></body>

			<div type="acknowledgement">7. Acknowledgments <lb/>7.1. Contributors <lb/>The co-authors of this document are listed below: <lb/>Thomas Watteyne for his contribution to the whole design, in <lb/>particular on TSCH and security, and to the open source <lb/>community with openWSN that he created. <lb/>Xavier Vilajosana who lead the design of the minimal support with <lb/>RPL and contributed deeply to the 6top design and the G-MPLS <lb/>operation of Track switching; <lb/>Kris Pister for creating TSCH and his continuing guidance through <lb/>the elaboration of this design; <lb/>Malisa Vucinic for the work on the one-touch join process and his <lb/>contribution to the Security Design Team; <lb/>Michael Richardson for his leadership role in the Security Design <lb/>Team and his contribution throughout this document; <lb/>Tero Kivinen for his contribution to the security work in general <lb/>and the security section in particular. <lb/>Maria Rita Palattella for managing the Terminology document merged <lb/>into this through the work of 6TiSCH; <lb/></div>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 56] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<div type="acknowledgement">Simon Duquennoy for his contribution to the open source community <lb/>with the 6TiSCH implementaton of contiki, and for his <lb/>contribution to MSF and autonomous unicast cells. <lb/>Qin Wang who lead the design of the 6top sublayer and contributed <lb/>related text that was moved and/or adapted in this document; <lb/>Rene Struik for the security section and his contribution to the <lb/>Security Design Team; <lb/>Robert Assimiti for his breakthrough work on RPL over TSCH and <lb/>initial text and guidance; <lb/>7.2. Special Thanks <lb/>Special thanks to Jonathan Simon, Giuseppe Piro, Subir Das and <lb/>Yoshihiro Ohba for their deep contribution to the initial security <lb/>work, to Yasuyuki Tanaka for his work on implementation and <lb/>simulation that tremendously helped build a robust system, to Diego <lb/>Dujovne for starting and leading the SF0 effort and to Tengfei Chang <lb/>for evolving it in the MSF. <lb/>Special thanks also to Pat Kinney, Charlie Perkins and Bob Heile for <lb/>their support in maintaining the connection active and the design in <lb/>line with work happening at IEEE 802.15. <lb/>Special thanks to Ted Lemon who was the INT Area A-D while this <lb/>document was initiated for his great support and help throughout, and <lb/>to Suresh Krishnan who took over with that kind efficiency of his <lb/>till publication. <lb/>Also special thanks to Ralph Droms who performed the first INT Area <lb/>Directorate review, that was very deep and thorough and radically <lb/>changed the orientations of this document, and then to Eliot Lear and <lb/>Carlos Pignataro who help finalize this document in preparation to <lb/>the IESG reviews, and to Gorry Fairhurst, David Mandelberg, Qin Wu, <lb/>Francis Dupont, Eric Vyncke, Mirja Kuhlewind, Roman Danyliw, Benjamin <lb/>Kaduk and Andrew Malis, who contributed to the final shaping of this <lb/>document through the IESG review procedure. <lb/>7.3. And Do not Forget <lb/>This document is the result of multiple interactions, in particular <lb/>during the 6TiSCH (bi)Weekly Interim call, relayed through the 6TiSCH <lb/>mailing list at the IETF, over the course of more than 5 years. <lb/>The authors wish to thank in arbitrary order: Alaeddine Weslati, <lb/>Chonggang Wang, Georgios Exarchakos, Zhuo Chen, Georgios <lb/></div>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 57] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<div type="acknowledgement">Papadopoulos, Eric Levy-Abegnoli, Alfredo Grieco, Bert Greevenbosch, <lb/>Cedric Adjih, Deji Chen, Martin Turon, Dominique Barthel, Elvis <lb/>Vogli, Geraldine Texier, Guillaume Gaillard, Herman Storey, Kazushi <lb/>Muraoka, Ken Bannister, Kuor Hsin Chang, Laurent Toutain, Maik <lb/>Seewald, Michael Behringer, Nancy Cam Winget, Nicola Accettura, <lb/>Nicolas Montavont, Oleg Hahm, Patrick Wetterwald, Paul Duffy, Peter <lb/>van der Stock, Rahul Sen, Pieter de Mil, Pouria Zand, Rouhollah <lb/>Nabati, Rafa Marin-Lopez, Raghuram Sudhaakar, Sedat Gormus, Shitanshu <lb/>Shah, Steve Simlo, Tina Tsou, Tom Phinney, Xavier Lagrange, Ines <lb/>Robles and Samita Chakrabarti for their participation and various <lb/>contributions. <lb/></div>

			<listBibl>8. References <lb/>8.1. Normative References <lb/>[I-D.ietf-6lo-ap-nd] <lb/>Thubert, P., Sarikaya, B., Sethi, M., and R. Struik, <lb/>&quot;Address Protected Neighbor Discovery for Low-power and <lb/>Lossy Networks&quot;, draft-ietf-6lo-ap-nd-12 (work in <lb/>progress), April 2019. <lb/>[I-D.ietf-6lo-backbone-router] <lb/>Thubert, P., Perkins, C., and E. Levy-Abegnoli, &quot;IPv6 <lb/>Backbone Router&quot;, draft-ietf-6lo-backbone-router-11 (work <lb/>in progress), February 2019. <lb/>[I-D.ietf-6lo-fragment-recovery] <lb/>Thubert, P., &quot;6LoWPAN Selective Fragment Recovery&quot;, draft-<lb/>ietf-6lo-fragment-recovery-05 (work in progress), July <lb/>2019. <lb/>[I-D.ietf-6lo-minimal-fragment] <lb/>Watteyne, T., Bormann, C., and P. Thubert, &quot;6LoWPAN <lb/>Fragment Forwarding&quot;, draft-ietf-6lo-minimal-fragment-03 <lb/>(work in progress), July 2019. <lb/>[I-D.ietf-6tisch-enrollment-enhanced-beacon] <lb/>Dujovne, D. and M. Richardson, &quot;IEEE802.15.4 Informational <lb/>Element encapsulation of 6tisch Join and Enrollment <lb/>Information&quot;, draft-ietf-6tisch-enrollment-enhanced-<lb/>beacon-02 (work in progress), March 2019. <lb/>[I-D.ietf-6tisch-minimal-security] <lb/>Vucinic, M., Simon, J., Pister, K., and M. Richardson, <lb/>&quot;Minimal Security Framework for 6TiSCH&quot;, draft-ietf-<lb/>6tisch-minimal-security-12 (work in progress), July 2019. <lb/></listBibl>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 58] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<listBibl>[I-D.ietf-6tisch-msf] <lb/>Chang, T., Vucinic, M., Vilajosana, X., Duquennoy, S., and <lb/>D. Dujovne, &quot;6TiSCH Minimal Scheduling Function (MSF)&quot;, <lb/>draft-ietf-6tisch-msf-06 (work in progress), August 2019. <lb/>[I-D.ietf-detnet-architecture] <lb/>Finn, N., Thubert, P., Varga, B., and J. Farkas, <lb/>&quot;Deterministic Networking Architecture&quot;, draft-ietf-<lb/>detnet-architecture-13 (work in progress), May 2019. <lb/>[I-D.ietf-roll-unaware-leaves] <lb/>Thubert, P., &quot;Routing for RPL Leaves&quot;, draft-ietf-roll-<lb/>unaware-leaves-02 (work in progress), July 2019. <lb/>[I-D.ietf-roll-useofrplinfo] <lb/>Robles, I., Richardson, M., and P. Thubert, &quot;Using RPL <lb/>Option Type, Routing Header for Source Routes and IPv6-in-<lb/>IPv6 encapsulation in the RPL Data Plane&quot;, draft-ietf-<lb/>roll-useofrplinfo-31 (work in progress), August 2019. <lb/>[RFC0768] Postel, J., &quot;User Datagram Protocol&quot;, STD 6, RFC 768, <lb/>DOI 10.17487/RFC0768, August 1980, <lb/>&lt;https://www.rfc-editor.org/info/rfc768&gt;. <lb/>[RFC4861] Narten, T., Nordmark, E., Simpson, W., and H. Soliman, <lb/>&quot;Neighbor Discovery for IP version 6 (IPv6)&quot;, RFC 4861, <lb/>DOI 10.17487/RFC4861, September 2007, <lb/>&lt;https://www.rfc-editor.org/info/rfc4861&gt;. <lb/>[RFC4862] Thomson, S., Narten, T., and T. Jinmei, &quot;IPv6 Stateless <lb/>Address Autoconfiguration&quot;, RFC 4862, <lb/>DOI 10.17487/RFC4862, September 2007, <lb/>&lt;https://www.rfc-editor.org/info/rfc4862&gt;. <lb/>[RFC4944] Montenegro, G., Kushalnagar, N., Hui, J., and D. Culler, <lb/>&quot;Transmission of IPv6 Packets over IEEE 802.15.4 <lb/>Networks&quot;, RFC 4944, DOI 10.17487/RFC4944, September 2007, <lb/>&lt;https://www.rfc-editor.org/info/rfc4944&gt;. <lb/>[RFC5889] Baccelli, E., Ed. and M. Townsley, Ed., &quot;IP Addressing <lb/>Model in Ad Hoc Networks&quot;, RFC 5889, DOI 10.17487/RFC5889, <lb/>September 2010, &lt;https://www.rfc-editor.org/info/rfc5889&gt;. <lb/>[RFC6282] Hui, J., Ed. and P. Thubert, &quot;Compression Format for IPv6 <lb/>Datagrams over IEEE 802.15.4-Based Networks&quot;, RFC 6282, <lb/>DOI 10.17487/RFC6282, September 2011, <lb/>&lt;https://www.rfc-editor.org/info/rfc6282&gt;. <lb/></listBibl>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 59] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<listBibl>[RFC6550] Winter, T., Ed., Thubert, P., Ed., Brandt, A., Hui, J., <lb/>Kelsey, R., Levis, P., Pister, K., Struik, R., Vasseur, <lb/>JP., and R. Alexander, &quot;RPL: IPv6 Routing Protocol for <lb/>Low-Power and Lossy Networks&quot;, RFC 6550, <lb/>DOI 10.17487/RFC6550, March 2012, <lb/>&lt;https://www.rfc-editor.org/info/rfc6550&gt;. <lb/>[RFC6551] Vasseur, JP., Ed., Kim, M., Ed., Pister, K., Dejean, N., <lb/>and D. Barthel, &quot;Routing Metrics Used for Path Calculation <lb/>in Low-Power and Lossy Networks&quot;, RFC 6551, <lb/>DOI 10.17487/RFC6551, March 2012, <lb/>&lt;https://www.rfc-editor.org/info/rfc6551&gt;. <lb/>[RFC6552] Thubert, P., Ed., &quot;Objective Function Zero for the Routing <lb/>Protocol for Low-Power and Lossy Networks (RPL)&quot;, <lb/>RFC 6552, DOI 10.17487/RFC6552, March 2012, <lb/>&lt;https://www.rfc-editor.org/info/rfc6552&gt;. <lb/>[RFC6553] Hui, J. and JP. Vasseur, &quot;The Routing Protocol for Low-<lb/>Power and Lossy Networks (RPL) Option for Carrying RPL <lb/>Information in Data-Plane Datagrams&quot;, RFC 6553, <lb/>DOI 10.17487/RFC6553, March 2012, <lb/>&lt;https://www.rfc-editor.org/info/rfc6553&gt;. <lb/>[RFC6554] Hui, J., Vasseur, JP., Culler, D., and V. Manral, &quot;An IPv6 <lb/>Routing Header for Source Routes with the Routing Protocol <lb/>for Low-Power and Lossy Networks (RPL)&quot;, RFC 6554, <lb/>DOI 10.17487/RFC6554, March 2012, <lb/>&lt;https://www.rfc-editor.org/info/rfc6554&gt;. <lb/>[RFC6775] Shelby, Z., Ed., Chakrabarti, S., Nordmark, E., and C. <lb/>Bormann, &quot;Neighbor Discovery Optimization for IPv6 over <lb/>Low-Power Wireless Personal Area Networks (6LoWPANs)&quot;, <lb/>RFC 6775, DOI 10.17487/RFC6775, November 2012, <lb/>&lt;https://www.rfc-editor.org/info/rfc6775&gt;. <lb/>[RFC7102] Vasseur, JP., &quot;Terms Used in Routing for Low-Power and <lb/>Lossy Networks&quot;, RFC 7102, DOI 10.17487/RFC7102, January <lb/>2014, &lt;https://www.rfc-editor.org/info/rfc7102&gt;. <lb/>[RFC7228] Bormann, C., Ersue, M., and A. Keranen, &quot;Terminology for <lb/>Constrained-Node Networks&quot;, RFC 7228, <lb/>DOI 10.17487/RFC7228, May 2014, <lb/>&lt;https://www.rfc-editor.org/info/rfc7228&gt;. <lb/></listBibl>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 60] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<listBibl>[RFC7252] Shelby, Z., Hartke, K., and C. Bormann, &quot;The Constrained <lb/>Application Protocol (CoAP)&quot;, RFC 7252, <lb/>DOI 10.17487/RFC7252, June 2014, <lb/>&lt;https://www.rfc-editor.org/info/rfc7252&gt;. <lb/>[RFC7554] Watteyne, T., Ed., Palattella, M., and L. Grieco, &quot;Using <lb/>IEEE 802.15.4e Time-Slotted Channel Hopping (TSCH) in the <lb/>Internet of Things (IoT): Problem Statement&quot;, RFC 7554, <lb/>DOI 10.17487/RFC7554, May 2015, <lb/>&lt;https://www.rfc-editor.org/info/rfc7554&gt;. <lb/>[RFC8025] Thubert, P., Ed. and R. Cragie, &quot;IPv6 over Low-Power <lb/>Wireless Personal Area Network (6LoWPAN) Paging Dispatch&quot;, <lb/>RFC 8025, DOI 10.17487/RFC8025, November 2016, <lb/>&lt;https://www.rfc-editor.org/info/rfc8025&gt;. <lb/>[RFC8137] Kivinen, T. and P. Kinney, &quot;IEEE 802.15.4 Information <lb/>Element for the IETF&quot;, RFC 8137, DOI 10.17487/RFC8137, May <lb/>2017, &lt;https://www.rfc-editor.org/info/rfc8137&gt;. <lb/>[RFC8138] Thubert, P., Ed., Bormann, C., Toutain, L., and R. Cragie, <lb/>&quot;IPv6 over Low-Power Wireless Personal Area Network <lb/>(6LoWPAN) Routing Header&quot;, RFC 8138, DOI 10.17487/RFC8138, <lb/>April 2017, &lt;https://www.rfc-editor.org/info/rfc8138&gt;. <lb/>[RFC8180] Vilajosana, X., Ed., Pister, K., and T. Watteyne, &quot;Minimal <lb/>IPv6 over the TSCH Mode of IEEE 802.15.4e (6TiSCH) <lb/>Configuration&quot;, BCP 210, RFC 8180, DOI 10.17487/RFC8180, <lb/>May 2017, &lt;https://www.rfc-editor.org/info/rfc8180&gt;. <lb/>[RFC8200] Deering, S. and R. Hinden, &quot;Internet Protocol, Version 6 <lb/>(IPv6) Specification&quot;, STD 86, RFC 8200, <lb/>DOI 10.17487/RFC8200, July 2017, <lb/>&lt;https://www.rfc-editor.org/info/rfc8200&gt;. <lb/>[RFC8453] Ceccarelli, D., Ed. and Y. Lee, Ed., &quot;Framework for <lb/>Abstraction and Control of TE Networks (ACTN)&quot;, RFC 8453, <lb/>DOI 10.17487/RFC8453, August 2018, <lb/>&lt;https://www.rfc-editor.org/info/rfc8453&gt;. <lb/>[RFC8480] Wang, Q., Ed., Vilajosana, X., and T. Watteyne, &quot;6TiSCH <lb/>Operation Sublayer (6top) Protocol (6P)&quot;, RFC 8480, <lb/>DOI 10.17487/RFC8480, November 2018, <lb/>&lt;https://www.rfc-editor.org/info/rfc8480&gt;. <lb/></listBibl>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 61] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<listBibl>[RFC8505] Thubert, P., Ed., Nordmark, E., Chakrabarti, S., and C. <lb/>Perkins, &quot;Registration Extensions for IPv6 over Low-Power <lb/>Wireless Personal Area Network (6LoWPAN) Neighbor <lb/>Discovery&quot;, RFC 8505, DOI 10.17487/RFC8505, November 2018, <lb/>&lt;https://www.rfc-editor.org/info/rfc8505&gt;. <lb/>8.2. Informative References <lb/>[AMI] <lb/>US Department of Energy, &quot;Advanced Metering Infrastructure <lb/>and Customer Systems&quot;, 2006, <lb/>&lt;https://www.energy.gov/sites/prod/files/2016/12/f34/ <lb/>AMI%20Summary%20Report_09-26-16.pdf&gt;. <lb/>[ANIMA] <lb/>IETF, &quot;Autonomic Networking Integrated Model and <lb/>Approach&quot;, <lb/>&lt;https://dataTracker.ietf.org/doc/charter-ietf-anima/&gt;. <lb/>[CCAMP] <lb/>IETF, &quot;Common Control and Measurement Plane&quot;, <lb/>&lt;https://dataTracker.ietf.org/doc/charter-ietf-ccamp/&gt;. <lb/>[CCMstar] Struik, R., &quot;Formal Specification of the CCM* Mode of <lb/>Operation&quot;, September 2004, &lt;www.ieee802.org/15/ <lb/>pub/2004/15-04-0537-00-004b-formal-specification-ccm-star-<lb/>mode-operation.doc&gt;. <lb/>[HART] <lb/>www.hartcomm.org, &quot;Highway Addressable remote Transducer, <lb/>a group of specifications for industrial process and <lb/>control devices administered by the HART Foundation&quot;. <lb/>[I-D.bernardos-raw-use-cases] <lb/>Papadopoulos, G., Thubert, P., Theoleyre, F., and C. <lb/>Bernardos, &quot;RAW use cases&quot;, draft-bernardos-raw-use-<lb/>cases-00 (work in progress), July 2019. <lb/>[I-D.ietf-6tisch-dtsecurity-zerotouch-join] <lb/>Richardson, M., &quot;6tisch Zero-Touch Secure Join protocol&quot;, <lb/>draft-ietf-6tisch-dtsecurity-zerotouch-join-04 (work in <lb/>progress), July 2019. <lb/>[I-D.ietf-ace-coap-est] <lb/>Stok, P., Kampanakis, P., Richardson, M., and S. Raza, <lb/>&quot;EST over secure CoAP (EST-coaps)&quot;, draft-ietf-ace-coap-<lb/>est-12 (work in progress), June 2019. <lb/></listBibl>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 62] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<listBibl>[I-D.ietf-anima-bootstrapping-keyinfra] <lb/>Pritikin, M., Richardson, M., Eckert, T., Behringer, M., <lb/>and K. Watsen, &quot;Bootstrapping Remote Secure Key <lb/>Infrastructures (BRSKI)&quot;, draft-ietf-anima-bootstrapping-<lb/>keyinfra-26 (work in progress), August 2019. <lb/>[I-D.ietf-anima-constrained-voucher] <lb/>Richardson, M., Stok, P., and P. Kampanakis, &quot;Constrained <lb/>Voucher Artifacts for Bootstrapping Protocols&quot;, draft-<lb/>ietf-anima-constrained-voucher-05 (work in progress), July <lb/>2019. <lb/>[I-D.ietf-core-object-security] <lb/>Selander, G., Mattsson, J., Palombini, F., and L. Seitz, <lb/>&quot;Object Security for Constrained RESTful Environments <lb/>(OSCORE)&quot;, draft-ietf-core-object-security-16 (work in <lb/>progress), March 2019. <lb/>[I-D.ietf-detnet-ip] <lb/>Varga, B., Farkas, J., Berger, L., Fedyk, D., Malis, A., <lb/>Bryant, S., and J. Korhonen, &quot;DetNet Data Plane: IP&quot;, <lb/>draft-ietf-detnet-ip-01 (work in progress), July 2019. <lb/>[I-D.ietf-detnet-use-cases] <lb/>Grossman, E., &quot;Deterministic Networking Use Cases&quot;, draft-<lb/>ietf-detnet-use-cases-20 (work in progress), December <lb/>2018. <lb/>[I-D.ietf-lwig-6lowpan-virtual-reassembly] <lb/>Bormann, C. and T. Watteyne, &quot;Virtual reassembly buffers <lb/>in 6LoWPAN&quot;, draft-ietf-lwig-6lowpan-virtual-reassembly-01 <lb/>(work in progress), March 2019. <lb/>[I-D.ietf-manet-aodvv2] <lb/>Perkins, C., Ratliff, S., Dowdell, J., Steenbrink, L., and <lb/>V. Mercieca, &quot;Ad Hoc On-demand Distance Vector Version 2 <lb/>(AODVv2) Routing&quot;, draft-ietf-manet-aodvv2-16 (work in <lb/>progress), May 2016. <lb/>[I-D.ietf-roll-aodv-rpl] <lb/>Anamalamudi, S., Zhang, M., Perkins, C., Anand, S., and B. <lb/>Liu, &quot;Asymmetric AODV-P2P-RPL in Low-Power and Lossy <lb/>Networks (LLNs)&quot;, draft-ietf-roll-aodv-rpl-07 (work in <lb/>progress), April 2019. <lb/></listBibl>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 63] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<listBibl>[I-D.ietf-roll-dao-projection] <lb/>Thubert, P., Jadhav, R., Gillmore, M., and J. Pylakutty, <lb/>&quot;Root initiated routing state in RPL&quot;, draft-ietf-roll-<lb/>dao-projection-06 (work in progress), May 2019. <lb/>[I-D.ietf-roll-rpl-industrial-applicability] <lb/>Phinney, T., Thubert, P., and R. Assimiti, &quot;RPL <lb/>applicability in industrial networks&quot;, draft-ietf-roll-<lb/>rpl-industrial-applicability-02 (work in progress), <lb/>October 2013. <lb/>[I-D.rahul-roll-mop-ext] <lb/>Jadhav, R. and P. Thubert, &quot;RPL Mode of Operation <lb/>extension&quot;, draft-rahul-roll-mop-ext-01 (work in <lb/>progress), June 2019. <lb/>[I-D.selander-ace-cose-ecdhe] <lb/>Selander, G., Mattsson, J., and F. Palombini, &quot;Ephemeral <lb/>Diffie-Hellman Over COSE (EDHOC)&quot;, draft-selander-ace-<lb/>cose-ecdhe-13 (work in progress), March 2019. <lb/>[I-D.thubert-6lo-bier-dispatch] <lb/>Thubert, P., Brodard, Z., Jiang, H., and G. Texier, &quot;A <lb/>6loRH for BitStrings&quot;, draft-thubert-6lo-bier-dispatch-06 <lb/>(work in progress), January 2019. <lb/>[I-D.thubert-6man-unicast-lookup] <lb/>Thubert, P. and E. Levy-Abegnoli, &quot;IPv6 Neighbor Discovery <lb/>Unicast Lookup&quot;, draft-thubert-6man-unicast-lookup-00 <lb/>(work in progress), July 2019. <lb/>[I-D.thubert-bier-replication-elimination] <lb/>Thubert, P., Eckert, T., Brodard, Z., and H. Jiang, &quot;BIER-<lb/>TE extensions for Packet Replication and Elimination <lb/>Function (PREF) and OAM&quot;, draft-thubert-bier-replication-<lb/>elimination-03 (work in progress), March 2018. <lb/>[I-D.thubert-raw-technologies] <lb/>Thubert, P., Cavalcanti, D., Vilajosana, X., and C. <lb/>Schmitt, &quot;Reliable and Available Wireless Technologies&quot;, <lb/>draft-thubert-raw-technologies-03 (work in progress), July <lb/>2019. <lb/>[I-D.thubert-roll-bier] <lb/>Thubert, P., &quot;RPL-BIER&quot;, draft-thubert-roll-bier-02 (work <lb/>in progress), July 2018. <lb/></listBibl>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 64] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<listBibl>[I-D.tiloca-6tisch-robust-scheduling] <lb/>Tiloca, M., Duquennoy, S., and G. Dini, &quot;Robust Scheduling <lb/>against Selective Jamming in 6TiSCH Networks&quot;, draft-<lb/>tiloca-6tisch-robust-scheduling-02 (work in progress), <lb/>June 2019. <lb/>[IEC62439] <lb/>IEC, &quot;Industrial communication networks -High <lb/>availability automation networks -Part 3: Parallel <lb/>Redundancy Protocol (PRP) and High-availability Seamless <lb/>Redundancy (HSR) -IEC62439-3&quot;, 2012, <lb/>&lt;https://webstore.iec.ch/publication/7018&gt;. <lb/>[IEEE802154] <lb/>IEEE standard for Information Technology, &quot;IEEE Std. <lb/>802.15.4, Part. 15.4: Wireless Medium Access Control (MAC) <lb/>and Physical Layer (PHY) Specifications for Low-Rate <lb/>Wireless Personal Area Networks&quot;. <lb/>[IEEE802154e] <lb/>IEEE standard for Information Technology, &quot;IEEE standard <lb/>for Information Technology, IEEE Std. 802.15.4, Part. <lb/>15.4: Wireless Medium Access Control (MAC) and Physical <lb/>Layer (PHY) Specifications for Low-Rate Wireless Personal <lb/>Area Networks, June 2011 as amended by IEEE Std. <lb/>802.15.4e, Part. 15.4: Low-Rate Wireless Personal Area <lb/>Networks (LR-WPANs) Amendment 1: MAC sublayer&quot;, April <lb/>2012. <lb/>[ISA100] <lb/>ISA/ANSI, &quot;ISA100, Wireless Systems for Automation&quot;, <lb/>&lt;https://www.isa.org/isa100/&gt;. <lb/>[ISA100.11a] <lb/>ISA/ANSI, &quot;Wireless Systems for Industrial Automation: <lb/>Process Control and Related Applications -ISA100.11a-2011 <lb/>-IEC 62734&quot;, 2011, &lt;http://www.isa.org/Community/ <lb/>SP100WirelessSystemsforAutomation&gt;. <lb/>[PCE] <lb/>IETF, &quot;Path Computation Element&quot;, <lb/>&lt;https://dataTracker.ietf.org/doc/charter-ietf-pce/&gt;. <lb/>[RFC2474] Nichols, K., Blake, S., Baker, F., and D. Black, <lb/>&quot;Definition of the Differentiated Services Field (DS <lb/>Field) in the IPv4 and IPv6 Headers&quot;, RFC 2474, <lb/>DOI 10.17487/RFC2474, December 1998, <lb/>&lt;https://www.rfc-editor.org/info/rfc2474&gt;. <lb/></listBibl>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 65] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<listBibl>[RFC2545] Marques, P. and F. Dupont, &quot;Use of BGP-4 Multiprotocol <lb/>Extensions for IPv6 Inter-Domain Routing&quot;, RFC 2545, <lb/>DOI 10.17487/RFC2545, March 1999, <lb/>&lt;https://www.rfc-editor.org/info/rfc2545&gt;. <lb/>[RFC3209] Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan, V., <lb/>and G. Swallow, &quot;RSVP-TE: Extensions to RSVP for LSP <lb/>Tunnels&quot;, RFC 3209, DOI 10.17487/RFC3209, December 2001, <lb/>&lt;https://www.rfc-editor.org/info/rfc3209&gt;. <lb/>[RFC3444] Pras, A. and J. Schoenwaelder, &quot;On the Difference between <lb/>Information Models and Data Models&quot;, RFC 3444, <lb/>DOI 10.17487/RFC3444, January 2003, <lb/>&lt;https://www.rfc-editor.org/info/rfc3444&gt;. <lb/>[RFC3963] Devarapalli, V., Wakikawa, R., Petrescu, A., and P. <lb/>Thubert, &quot;Network Mobility (NEMO) Basic Support Protocol&quot;, <lb/>RFC 3963, DOI 10.17487/RFC3963, January 2005, <lb/>&lt;https://www.rfc-editor.org/info/rfc3963&gt;. <lb/>[RFC4080] Hancock, R., Karagiannis, G., Loughney, J., and S. Van den <lb/>Bosch, &quot;Next Steps in Signaling (NSIS): Framework&quot;, <lb/>RFC 4080, DOI 10.17487/RFC4080, June 2005, <lb/>&lt;https://www.rfc-editor.org/info/rfc4080&gt;. <lb/>[RFC4291] Hinden, R. and S. Deering, &quot;IP Version 6 Addressing <lb/>Architecture&quot;, RFC 4291, DOI 10.17487/RFC4291, February <lb/>2006, &lt;https://www.rfc-editor.org/info/rfc4291&gt;. <lb/>[RFC4903] Thaler, D., &quot;Multi-Link Subnet Issues&quot;, RFC 4903, <lb/>DOI 10.17487/RFC4903, June 2007, <lb/>&lt;https://www.rfc-editor.org/info/rfc4903&gt;. <lb/>[RFC4919] Kushalnagar, N., Montenegro, G., and C. Schumacher, &quot;IPv6 <lb/>over Low-Power Wireless Personal Area Networks (6LoWPANs): <lb/>Overview, Assumptions, Problem Statement, and Goals&quot;, <lb/>RFC 4919, DOI 10.17487/RFC4919, August 2007, <lb/>&lt;https://www.rfc-editor.org/info/rfc4919&gt;. <lb/>[RFC5340] Coltun, R., Ferguson, D., Moy, J., and A. Lindem, &quot;OSPF <lb/>for IPv6&quot;, RFC 5340, DOI 10.17487/RFC5340, July 2008, <lb/>&lt;https://www.rfc-editor.org/info/rfc5340&gt;. <lb/>[RFC5974] Manner, J., Karagiannis, G., and A. McDonald, &quot;NSIS <lb/>Signaling Layer Protocol (NSLP) for Quality-of-Service <lb/>Signaling&quot;, RFC 5974, DOI 10.17487/RFC5974, October 2010, <lb/>&lt;https://www.rfc-editor.org/info/rfc5974&gt;. <lb/></listBibl>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 66] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<listBibl>[RFC6275] Perkins, C., Ed., Johnson, D., and J. Arkko, &quot;Mobility <lb/>Support in IPv6&quot;, RFC 6275, DOI 10.17487/RFC6275, July <lb/>2011, &lt;https://www.rfc-editor.org/info/rfc6275&gt;. <lb/>[RFC6347] Rescorla, E. and N. Modadugu, &quot;Datagram Transport Layer <lb/>Security Version 1.2&quot;, RFC 6347, DOI 10.17487/RFC6347, <lb/>January 2012, &lt;https://www.rfc-editor.org/info/rfc6347&gt;. <lb/>[RFC6606] Kim, E., Kaspar, D., Gomez, C., and C. Bormann, &quot;Problem <lb/>Statement and Requirements for IPv6 over Low-Power <lb/>Wireless Personal Area Network (6LoWPAN) Routing&quot;, <lb/>RFC 6606, DOI 10.17487/RFC6606, May 2012, <lb/>&lt;https://www.rfc-editor.org/info/rfc6606&gt;. <lb/>[RFC6830] Farinacci, D., Fuller, V., Meyer, D., and D. Lewis, &quot;The <lb/>Locator/ID Separation Protocol (LISP)&quot;, RFC 6830, <lb/>DOI 10.17487/RFC6830, January 2013, <lb/>&lt;https://www.rfc-editor.org/info/rfc6830&gt;. <lb/>[RFC7426] Haleplidis, E., Ed., Pentikousis, K., Ed., Denazis, S., <lb/>Hadi Salim, J., Meyer, D., and O. Koufopavlou, &quot;Software-<lb/>Defined Networking (SDN): Layers and Architecture <lb/>Terminology&quot;, RFC 7426, DOI 10.17487/RFC7426, January <lb/>2015, &lt;https://www.rfc-editor.org/info/rfc7426&gt;. <lb/>[S-ALOHA] Roberts, L. G., &quot;ALOHA Packet System With and Without <lb/>Slots and Capture&quot;, doi 10.1145/1024916.1024920, April <lb/>1975, &lt;https://dl.acm.org/citation.cfm?id=1024920&gt;. <lb/>[TEAS] <lb/>IETF, &quot;Traffic Engineering Architecture and Signaling&quot;, <lb/>&lt;https://dataTracker.ietf.org/doc/charter-ietf-teas/&gt;. <lb/>[WirelessHART] <lb/>www.hartcomm.org, &quot;Industrial Communication Networks -<lb/>Wireless Communication Network and Communication Profiles <lb/>-WirelessHART -IEC 62591&quot;, 2010. <lb/></listBibl>

			<div type="annex">Appendix A. Related Work In Progress <lb/>This document has been incremented as the work progressed following <lb/>the evolution of the WG charter and the availability of dependent <lb/>work. The intent was to publish when the WG concludes on the covered <lb/>items. At the time of publishing the following specification are <lb/>still in progress and may affect the evolution of the stack in a <lb/>6TiSCH-aware node. <lb/></div>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 67] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<div type="annex">A.1. Unchartered IETF work items <lb/>A.1.1. 6TiSCH Zerotouch security <lb/>The security model and in particular the zerotouch join process <lb/>[I-D.ietf-6tisch-dtsecurity-zerotouch-join] depends on the ANIMA <lb/>[ANIMA] Bootstrapping Remote Secure Key Infrastructures (BRSKI) <lb/>[I-D.ietf-anima-bootstrapping-keyinfra] to enable zero-touch security <lb/>provisionning; for highly constrained nodes, a minimal model based on <lb/>pre-shared keys (PSK) is also available. As written to this day, it <lb/>also depends on a number of documents in progress as CORE, and on <lb/>&quot;Ephemeral Diffie-Hellman Over COSE (EDHOC)&quot; <lb/>[I-D.selander-ace-cose-ecdhe], which is being considered for adoption <lb/>at the LAKE WG. <lb/>A.1.2. 6TiSCH Track Setup <lb/>ROLL is now standardizing a reactive routing protocol based on RPL <lb/>[I-D.ietf-roll-aodv-rpl] The need of a reactive routing protocol to <lb/>establish on-demand constraint-optimized routes and a reservation <lb/>protocol to establish Layer-3 Tracks is being discussed at 6TiSCH but <lb/>not chartered for. <lb/>At the time of this writing, the formation of a new working group <lb/>called RAW for Reliable and Available Wireless networking is being <lb/>considered. The work on centralized Track computation is deferred to <lb/>a subsequent work, not necessarily at 6TiSCH. A Predictable and <lb/>Available Wireless (PAW) bar-BoF took place. RAW may form as a WG <lb/>and develop a generic specification for Track operations that would <lb/>cover 6TiSCH requirements as expressed in this architecture, more in <lb/>[I-D.thubert-raw-technologies]. In a large LLN, it is not feasible <lb/>to update the routes from a central controller that resides far over <lb/>the constrained network at the speed at which the quality of the <lb/>wireless links varies. RAW would focus on forwarding behaviors to <lb/>react quickly and locally to the changes in the wireless links. <lb/>ROLL is also standardizing an extension to RPL to setup centrally-<lb/>computed routes [I-D.ietf-roll-dao-projection] <lb/>The 6TiSCH Architecture should thus inherit from the DetNet <lb/>[I-D.ietf-detnet-architecture] architecture and thus depends on it. <lb/>The Path Computation Element (PCE) should be a core component of that <lb/>architecture. An extension to RPL or to TEAS [TEAS] will be required <lb/>to expose the 6TiSCH node capabilities and the network peers to the <lb/>PCE, possibly in combination with [I-D.rahul-roll-mop-ext]. A <lb/>protocol such as a lightweight PCEP or an adaptation of CCAMP [CCAMP] <lb/>G-MPLS formats and procedures could be used in combination to <lb/></div>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 68] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			<div type="annex">[I-D.ietf-roll-dao-projection] to install the Tracks, as computed by <lb/>the PCE, to the 6TiSCH nodes. <lb/>A.1.3. Using BIER in a 6TiSCH Network <lb/>ROLL is actively working on Bit Index Explicit Replication (BIER) as <lb/>a method to compress both the dataplane packets and the routing <lb/>tables in storing mode [I-D.thubert-roll-bier]. <lb/>BIER could also be used in the context of the DetNet service layer. <lb/>BIER-TE-based OAM, Replication and Elimination <lb/>[I-D.thubert-bier-replication-elimination] leverages BIER Traffic <lb/>Engineering (TE) to control in the data plane the DetNet Replication <lb/>and Elimination activities, and to provide traceability on links <lb/>where replication and loss happen, in a manner that is abstract to <lb/>the forwarding information. <lb/>a 6loRH for BitStrings [I-D.thubert-6lo-bier-dispatch] proposes a <lb/>6LoWPAN compression for the BIER Bitstring based on 6LoWPAN Routing <lb/>Header [RFC8138]. <lb/>A.2. External (non-IETF) work items <lb/>The current charter positions 6TiSCH on IEEE Std. 802.15.4 only. <lb/>Though most of the design should be portable on other link types, <lb/>6TiSCH has a strong dependency on IEEE Std. 802.15.4 and its <lb/>evolution. The impact of changes to TSCH on this Architecture should <lb/>be minimal to non-existent, but deeper work such as 6top and security <lb/>may be impacted. A 6TiSCH Interest Group at the IEEE maintains the <lb/>synchronization and helps foster work at the IEEE should 6TiSCH <lb/>demand it. <lb/>Work is being proposed at IEEE (802.15.12 PAR) for an LLC that would <lb/>logically include the 6top sublayer. The interaction with the 6top <lb/>sublayer and the Scheduling Functions described in this document are <lb/>yet to be defined. <lb/>ISA100 [ISA100] Common Network Management (CNM) is another external <lb/>work of interest for 6TiSCH. The group, referred to as ISA100.20, <lb/>defines a Common Network Management framework that should enable the <lb/>management of resources that are controlled by heterogeneous <lb/>protocols such as ISA100.11a [ISA100.11a], WirelessHART <lb/>[WirelessHART], and 6TiSCH. Interestingly, the establishment of <lb/>6TiSCH Deterministic paths, called Tracks, are also in scope, and <lb/>ISA100.20 is working on requirements for DetNet. <lb/></div>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 69] <lb/></page>

			<note place="headnote">Internet-Draft <lb/>6tisch-architecture <lb/>August 2019 <lb/></note>

			Author&apos;s Address <lb/>

			<front>Pascal Thubert (editor) <lb/>Cisco Systems, Inc <lb/>Building D <lb/>45 Allee des Ormes -BP1200 <lb/>MOUGINS -Sophia Antipolis 06254 <lb/>FRANCE <lb/>Phone: +33 497 23 26 34 <lb/>Email: pthubert@cisco.com <lb/></front>

			<note place="footnote">Thubert <lb/>Expires February 28, 2020 <lb/></note>

			<page>[Page 70] </page>


	</text>
</tei>
