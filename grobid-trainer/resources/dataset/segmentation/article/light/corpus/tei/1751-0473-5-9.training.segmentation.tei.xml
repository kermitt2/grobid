<?xml version="1.0" ?>
<tei xml:space="preserve">
	<teiHeader>
		<fileDesc xml:id="_0"/>
	</teiHeader>
	<text xml:lang="en">
			<front>S O F T W A R E R E V I E W <lb/>Open Access <lb/>IHE cross-enterprise document sharing for <lb/>imaging: interoperability testing software <lb/>Rita Noumeir * † , Bérubé Renaud † <lb/>Abstract <lb/>Background: With the deployments of Electronic Health Records (EHR), interoperability testing in healthcare is <lb/>becoming crucial. EHR enables access to prior diagnostic information in order to assist in health decisions. It is a <lb/>virtual system that results from the cooperation of several heterogeneous distributed systems. Interoperability <lb/>between peers is therefore essential. Achieving interoperability requires various types of testing. Implementations <lb/>need to be tested using software that simulates communication partners, and that provides test data and test <lb/>plans. <lb/>Results: In this paper we describe a software that is used to test systems that are involved in sharing medical <lb/>images within the EHR. Our software is used as part of the Integrating the Healthcare Enterprise (IHE) testing <lb/>process to test the Cross Enterprise Document Sharing for imaging (XDS-I) integration profile. We describe its <lb/>architecture and functionalities; we also expose the challenges encountered and discuss the elected design <lb/>solutions. <lb/>Conclusions: EHR is being deployed in several countries. The EHR infrastructure will be continuously evolving to <lb/>embrace advances in the information technology domain. Our software is built on a web framework to allow for <lb/>an easy evolution with web technology. The testing software is publicly available; it can be used by system <lb/>implementers to test their implementations. It can also be used by site integrators to verify and test the <lb/>interoperability of systems, or by developers to understand specifications ambiguities, or to resolve <lb/>implementations difficulties. <lb/></front>

			<body>Background <lb/>The Electronic Health Record (EHR) enables access to <lb/>relevant diagnostic information in order to assist in <lb/>health decisions; and this, independently from the geo-<lb/>graphic location of the point of access or the institution <lb/>where the information was initially gathered. However, <lb/>EHR is not a single system that can be provided by a <lb/>single manufacturer. It is a virtual system that results <lb/>from the cooperation of several heterogeneous distribu-<lb/>ted systems. Interoperability is therefore essential. <lb/>Achieving interoperability requires the use of communi-<lb/>cation standards; it also requires common vocabularies, <lb/>common semantics, as well as process flows that are <lb/>agreed on. Therefore, ensuring interoperability requires <lb/>various types of testing: testing peers&apos; ability to commu-<lb/>nicate and exchange data; testing peers&apos; ability to parse <lb/>and extract information from the successfully exchanged <lb/>messages; and testing peers&apos; ability to react to the <lb/>extracted information by changing information in their <lb/>systems or by influencing subsequent workflow actions. <lb/>Interoperability challenges in healthcare are important: <lb/>healthcare systems have to deal with extremely diverse <lb/>clinical information such as diagnostic images, lab or <lb/>cardiology results, as well as with various healthcare <lb/>specific standards. Moreover, interoperability testing in <lb/>healthcare is very new. To our knowledge, it started in <lb/>1999 with the first Integrating the Healthcare (IHE) con-<lb/>nect-a-thon [1]. It is a face-to face testing event where <lb/>hundreds of systems from various healthcare manufac-<lb/>turers test their software implementation of IHE profiles <lb/>by executing real clinical scenarios. By putting in place <lb/>this testing event, IHE has been a pioneer in healthcare <lb/>testing. <lb/></body>

			<front>* Correspondence: rita.noumeir@etsmtl.ca <lb/> † Contributed equally <lb/>Department of Electrical Engineering, École de Technologie Supérieure, <lb/>University of Quebec, 1100 Notre-Dame West, Montreal, Quebec, H3C 1K3, <lb/>Canada <lb/>Noumeir and Renaud Source Code for Biology and Medicine 2010, 5:9 <lb/>http://www.scfbm.org/content/5/1/9 <lb/>© 2010 Noumeir and Renaud; licensee BioMed Central Ltd. This is an Open Access article distributed under the terms of the Creative <lb/>Commons Attribution License (http://creativecommons.org/licenses/by/2.0), which permits unrestricted use, distribution, and <lb/>reproduction in any medium, provided the original work is properly cited. <lb/></front>

			<body>In order to ensure interoperability and to conduct <lb/>testing accordingly, detailed specifications are needed. <lb/>One could think that medical standards such as the <lb/>Digital Imaging and Communications in Medicine <lb/>(DICOM) [2] and Health Level 7 (HL7) are enough to <lb/>ensure interoperability. But medical interoperability his-<lb/>tory has demonstrated that this is not the case. These <lb/>standards have existed for almost three decades without <lb/>ensuring interoperability in healthcare. In fact, standards <lb/>are necessary. Without them interoperability is simply <lb/>impossible. However, standards alone are not sufficient. <lb/>They specify how systems can exchange messages or <lb/>information without specifying how messages can or <lb/>should be combined to conduct a workflow. Also, to <lb/>ensure their long term viability standards tend to <lb/>encompass many if not all possible situations. Therefore, <lb/>they suffer from various ambiguities and offer multiple <lb/>possible choices that hinder interoperability. <lb/>Filling the gap between standards and systems imple-<lb/>mentation has required expensive, site-specific interface <lb/>development to integrate even standards-compliant sys-<lb/>tems. To close that gap, a framework for the implemen-<lb/>tation of standards has become an urgent need that lead <lb/>to the creation of the IHE initiative. IHE started in 1998 <lb/>and was initially jointly sponsored by the Radiological <lb/>Society of North America (RSNA) and the Healthcare <lb/>Information and Management Systems Society (HIMSS). <lb/>The first IHE integration profile, the Radiology Sched-<lb/>uled Workflow (SWF) provided a solution for integrat-<lb/>ing multiple systems involved in the fulfilment of a <lb/>radiology order [3]. IHE follows an approach where care <lb/>providers identify the key interoperability problems they <lb/>face, and where healthcare manufacturers and informa-<lb/>tion technology experts agree upon an implementation <lb/>that uses established standards to provide a solution for <lb/>each identified interoperability problem [1]. Interoper-<lb/>ability demonstrations are regularly organised at major <lb/>conferences worldwide, such as the annual meetings of <lb/>RSNA, HIMSS and the American College of Cardiology <lb/>(ACC). The main objective of such demonstrations is to <lb/>inform and educate end users about existing integration <lb/>profiles ready to solve their interoperability problems. <lb/>During the interoperability demonstrations, real clinical <lb/>scenarios are executed by sharing health information <lb/>between participating systems from various manufac-<lb/>turers. Therefore, to ensure the success of such demon-<lb/>strations, participating systems test their interoperability <lb/>capabilities in advance, during a weeklong live-testing <lb/>event where participants&apos; systems are gathered in the <lb/>same place at the same time. During this face-to-face <lb/>testing event, systems test their ability to exchange infor-<lb/>mation with peer systems from multiple other vendors. <lb/>Again, to ensure the success of the live-testing event, <lb/>participants test their implementation with a software-<lb/>testing tool, beforehand. This testing tool consists of <lb/>documents and software that simulates communication <lb/>partners, in addition to providing test data and test <lb/>plans. Succeeding in all tests for a specific actor in a <lb/>specific integration profile is required to participate in <lb/>the face-to-face testing event, and to subsequently parti-<lb/>cipate in demonstrations. <lb/>Currently, IHE has expanded over several clinical <lb/>domains, and its activities are solving, every year, new <lb/>integration problems in domains such as radiology, <lb/>laboratory services, cardiology, radiation oncology, <lb/>ophthalmology and healthcare devices. Moreover, IHE is <lb/>setting up the foundation for the EHR by enabling inter-<lb/>operability amongst care domains within a single health-<lb/>care enterprise and across many healthcare enterprises. <lb/>For example, the Patient Identifier Cross-referencing <lb/>Integration Profile (PIX) enables a system to query for <lb/>other identifiers of a specific patient, and the Cross-<lb/>Enterprise Document Sharing Integration Profile (XDS) <lb/>addresses the needs for the registration, distribution and <lb/>access across health enterprises of patient&apos;s clinical <lb/>information. Several live-testing events are taken place <lb/>around the world every year. Even though IHE testing <lb/>early purpose was to support educational demonstra-<lb/>tions, its uniqueness, its technical team experience and <lb/>the large number of systems tested, have contributed to <lb/>propel this event to the level of the de-facto testing in <lb/>healthcare. <lb/>Amongst IHE integration profiles, XDS lays the archi-<lb/>tectural foundations for EHR. The XDS architecture <lb/>enables patient&apos;s information, from separate care deliv-<lb/>ery systems, to be shared in the form of documents, <lb/>between cooperating enterprises [4]. Another IHE inte-<lb/>gration profile, the Cross-Enterprise Document Sharing <lb/>for Imaging (XDS-I) leverages the XDS architecture to <lb/>enable the sharing of imaging information such as <lb/>images and imaging diagnostic reports [5]. <lb/>In this paper we discuss the interoperability concerns <lb/>and describe the architecture of the XDS-I testing soft-<lb/>ware. We first describe the XDS architecture and intro-<lb/>duce how XDS-I enables the sharing of imaging <lb/>information. Next, we briefly present the communica-<lb/>tion protocols and discuss the challenges they introduce. <lb/>Then, we discuss the interoperability concerns, describe <lb/>the software architecture and detail design decisions to <lb/>overcome challenges and constraints. We also present <lb/>the software functionalities and discuss their extensibil-<lb/>ity and limitations. <lb/>XDS Architecture <lb/>The XDS architecture enables patient information to be <lb/>shared, in the form of documents, between multiple <lb/>institutions. It is document content neutral so that any <lb/>type of document encoded in compliance with a widely <lb/></body>

			<note place="headnote">Noumeir and Renaud Source Code for Biology and Medicine 2010, 5:9 <lb/>http://www.scfbm.org/content/5/1/9 <lb/></note>

			<page>Page 2 of 15 <lb/></page>

			<body>accepted standard can be shared. Therefore, this docu-<lb/>ment centric architecture offers mechanisms to publish <lb/>query and retrieve specific clinical documents for a spe-<lb/>cific patient. <lb/>The architectural model is based on a central registry <lb/>that holds metadata describing every published docu-<lb/>ment. Documents reside in repositories and the registry <lb/>metadata includes an address that allows a consumer sys-<lb/>tem to retrieve a specific document from the repository <lb/>where it is located. The central registry is responsible for <lb/>storing information about documents. It maintains meta-<lb/>data about each registered document and responds to <lb/>queries about documents meeting specific criteria. The <lb/>registry does not store the document itself. However, it <lb/>maintains information about the location from which <lb/>documents may be retrieved. Therefore, the architecture <lb/>includes one or multiple distributed document reposi-<lb/>tories. A repository stores documents in a persistent <lb/>manner and responds to document retrieval requests. <lb/>Systems that produce information relevant to patient&apos;s <lb/>continuity of care, such as laboratory, cardiology, or <lb/>radiology reporting systems, publish information as <lb/>documents. Figure 1 depicts the basic architecture and <lb/>data flow. Systems that are interested in accessing the <lb/>patient&apos;s record query the registry for documents meet-<lb/>ing certain criteria. Within the response to a query, the <lb/>registry includes information about the document <lb/>address, enabling the document consumer system to <lb/>retrieve the document from its repository. <lb/>On the other hand, the XDS architecture allows <lb/>systems to share information about the identity of the <lb/>patient using a patient identity feed transaction. This <lb/>transaction is not described here because we focus on <lb/>the data flow for sharing images. The complete descrip-<lb/>tion of the XDS architecture can be found in the ITI-<lb/>Technical Framework [3]. <lb/>Sharing of imaging information <lb/>Images represent important components of a patient&apos;s <lb/>health record. Leveraging the XDS architecture to <lb/>enable the sharing of imaging information allows the <lb/>central registry and the document repository to treat <lb/>imaging documents as any other clinical document. <lb/>More importantly, a document consumer would be able <lb/>to query and retrieve an imaging report as well as any <lb/>another clinical document such as a laboratory result. <lb/>Leveraging the XDS architecture requires specifying <lb/>shared documents and metadata in addition to specify-<lb/>ing additional process flow actions on some actors. <lb/>Sharing of manifests <lb/>In order to publish a set of images, a manifest that con-<lb/>tains references to those images is the document that is <lb/>published. With this solution, the manifest is published <lb/>and not the images. Medical images are encoded in con-<lb/>formance with the DICOM standard. Accordingly, images <lb/>are grouped into Series that are grouped into Studies. Stu-<lb/>dies, Series and Instances of images are uniquely identified <lb/>with Universal Identifier (UID). Therefore, the manifest is <lb/>another type of DICOM object that contains the structure, <lb/>in terms of UIDs, of the images that are referenced. More-<lb/>over, the manifest contains, at the Series level, the Applica-<lb/>tion Entity (AE) of the DICOM server from which the <lb/>Series can be retrieved. AE can also be considered as the <lb/>name of that server. <lb/>Process flow <lb/>A system that wants to share a set of images would thus <lb/>construct a manifest that references the images and sub-<lb/>mits that manifest to the repository/registry. Figure 2 <lb/>shows the process flow followed by an imaging docu-<lb/>ment source to share a set of images. Moreover, the <lb/>publishing system, or the system whose AE title is refer-<lb/>enced inside the manifest, is required to make the refer-<lb/>enced images available to be retrieved. <lb/>On the other hand, a system that is interested in <lb/>retrieving previously published images, starts by query-<lb/>ing the registry and receives the address of the pub-<lb/>lished manifest. Then, it retrieves the manifest and <lb/>decodes it to get the list of referenced images. Each <lb/>referenced object is specified by its study, series and <lb/>instance UID along with the AE title where to retrieve <lb/>it. The consumer can then issue a DICOM transaction, <lb/>such as retrieve (C-MOVE) or a Web Access to <lb/>DICOM Persistent Objects (WADO) request, to retrieve <lb/>the images. <lb/>A WADO request is an HTTP request to a WADO <lb/>server requesting a specific DICOM instance using spe-<lb/>cific WADO query keys [2]. Query keys can be specified <lb/>in a way to enable medical image streaming according <lb/>to JPEG 2000 Interactive Protocol (JPIP) [6]. Figure 3 <lb/>shows the process flow followed by an imaging docu-<lb/>ment consumer to retrieve a set of images. <lb/>XDS communication infrastructure <lb/>The XDS architecture is built on the Electronic Business <lb/>Extensible Markup Language (ebXML) [7]. ebXML is a <lb/>Document &amp; <lb/>Metadata <lb/>Document <lb/>Registry <lb/>Repository <lb/>Document <lb/>Source <lb/>Document <lb/>Consumer <lb/>Metadata <lb/>Query <lb/>Parameters <lb/>Figure 1 XDS architecture and data flow. <lb/></body>

			<note place="headnote">Noumeir and Renaud Source Code for Biology and Medicine 2010, 5:9 <lb/>http://www.scfbm.org/content/5/1/9 <lb/></note>

			<page>Page 3 of 15 <lb/></page>

			<body>joint initiative by the Organization for Advancement of <lb/>Structured Information Standards (OASIS) and the Uni-<lb/>ted Nations Centre for Trade Facilitation and Electronic <lb/>Business (UN/CEFACT). Its goal is to create a global <lb/>electronic market place where enterprises can find each <lb/>other electronically, conduct business by exchanging <lb/>XML messages in accordance to standard business pro-<lb/>cess sequences and with clear business semantics. The <lb/>ebXML specifications are intended to cover the entire <lb/>business-to-business process. <lb/>A registry is a central piece of to the ebXML architec-<lb/>ture. An ebXML registry provides a set of services that <lb/>enables the sharing of information between trading part-<lb/>ners. It maintains metadata for a registered item. Access <lb/>to an ebXML registry is provided through standard <lb/>interfaces exposed by Registry Services (RS). Moreover, <lb/>ebXML Registry Information Model (RIM) defines the <lb/>type of metadata that is stored in the Registry as well as <lb/>the relationships among metadata classes. An ebXML <lb/>registry serves as the index and a gateway for a reposi-<lb/>tory to the outside world; it is a sort of a database for <lb/>sharing relevant company information needed in <lb/>ebXML business transactions, such as business process, <lb/>order forms, or invoices. <lb/>The XDS architecture is built on the ebXML RIM and <lb/>RS. This allows generic ebXML registry to be used as an <lb/>XDS registry. However, XDS assigns the responsibilities <lb/>of indexing a document and that of archiving it to sepa-<lb/>rate actors: a Document Registry and Document Reposi-<lb/>tory respectively. This separation of duties offers an <lb/>important additional flexibility in the healthcare domain, <lb/>which consists in having a single document registry <lb/>indexing content for multiple document repositories. <lb/>According to the XDS specifications, a document source <lb/>submits the metadata and the documents to the docu-<lb/>ment repository actor who forwards the metadata to the <lb/>document registry actor. A detailed description about <lb/>how ebXML has been specialized to build XDS can be <lb/>found in [4]. <lb/>Of relevance here is that XDS metadata specifications <lb/>add constraints on the ebXML registry information <lb/>model. While conforming to ebXML RIM, several XDS <lb/>: XDS Document <lb/>Repository <lb/>:Imaging <lb/>Document Source <lb/>:XDS Document <lb/>Registry <lb/>Provide and Register <lb/>Document Set <lb/>Register Document Set <lb/>Create Key Object Selection <lb/>Figure 2 Process flow for publishing a set of images. <lb/>Retrieve Document <lb/>: XDS Document <lb/>Repository <lb/>:Imaging <lb/>Document Source <lb/>:XDS Document <lb/>Registry <lb/>:Imaging Document <lb/>Consumer <lb/>Query Documents <lb/>Retrieve Images <lb/>Decode Manifest <lb/>Figure 3 Process flow for retrieving a set of images. <lb/></body>

			<note place="headnote">Noumeir and Renaud Source Code for Biology and Medicine 2010, 5:9 <lb/>http://www.scfbm.org/content/5/1/9 <lb/></note>

			<page>Page 4 of 15 <lb/></page>

			<body>metadata content are derived from other medical stan-<lb/>dards data types such as HL7, and are encoded as such <lb/>in the registry. Moreover, in addition to the definition of <lb/>an XDS metadata vocabulary, additional requirements <lb/>on metadata are defined such as required presence or <lb/>uniqueness enforcement of specific data, as well as par-<lb/>ticular metadata content validation. Therefore, con-<lb/>straints are imposed on metadata and specific validation <lb/>is required from the XDS registry. <lb/>Although XDS registry is needed to implement any <lb/>XDS-I process flow, it is not specific to XDS-I. To the <lb/>contrary, an XDS registry has many specific responsibil-<lb/>ities, mainly with regards to metadata validation and <lb/>query implementations, as defined by the XDS specifica-<lb/>tions. Therefore, it is common sense to reuse an XDS <lb/>registry implementation in order to put in place the <lb/>architecture needed for XDS-I testing. Such XDS regis-<lb/>try implementation is provided by the National Institute <lb/>of Standards and Technology (NIST) and is publicly <lb/>available [8]. <lb/>Related Work <lb/>The objective of testing can be either to validate confor-<lb/>mance to standards, or to validate interoperability <lb/>according to integration profiles. <lb/>Conformance testing consists in validating that rele-<lb/>vant requirements in a standard have been correctly <lb/>implemented. It follows a black box approach where the <lb/>tester sees the system under test as a closed box without <lb/>having any knowledge about neither its internal struc-<lb/>ture nor its implementation. This is usually done by <lb/>sending messages to the system under test and by obser-<lb/>ving its response in terms of acknowledge or response <lb/>messages that are sent back. If at least one error is <lb/>encountered, the system under test does not conform to <lb/>the standard. However, the absence of errors, while a <lb/>prerequisite to interoperability, does not guarantee it; <lb/>this is the same thing as acknowledging that a standard <lb/>is necessary to interoperability but not sufficient. Intero-<lb/>perability testing on the other hand is a way to ensure <lb/>that different systems can co-operate to perform a speci-<lb/>fied business sub-process. By exchanging messages that <lb/>conform to one or multiple standards, the co-operating <lb/>systems react to the received information by changing <lb/>their internal data or state, or by triggering actions or <lb/>message exchanges with the same peer or others. Intero-<lb/>perability testing aims at observing that the system <lb/>under test, not only can exchange information with <lb/>peers, but also reacts correctly according to an agreed <lb/>interoperability profile. <lb/>Conformance and interoperability testing are not new <lb/>to the communication industry. One only needs to think <lb/>of the Bluetooth technology for which many private <lb/>companies offer interoperability testing. ebXML <lb/>conformance and interoperability testing is another <lb/>example from the electronic business industry. In this <lb/>domain, interoperability is pushed a bit further: in order <lb/>to support testing, the OASIS ebXML Implementation, <lb/>Interoperability and Conformance Technical Committee <lb/>has defined detailed specification for a test conformance <lb/>framework [9] for which some implementations exist <lb/>[10,11]. This test framework describes a standard archi-<lb/>tecture for the test system, as well as standard specifica-<lb/>tions for defining test scripts. Designing a new test case <lb/>is eased and reduced to writing a new test script. But, <lb/>interoperability testing in this case is defined as a way to <lb/>verify that two implementations or more can interope-<lb/>rate according to an agreement which is compliant with <lb/>the specification, along with additional restrictions. The <lb/>main gap here is that the agreement is neither standar-<lb/>dized, nor shared. It has to be defined every time het-<lb/>erogeneous systems decide to cooperate together. In the <lb/>domain of robots communication, [12] describes a test <lb/>suite for conformance and interoperability testing of <lb/>web service communication between different robots. <lb/>Although the test suite validates syntax, communication <lb/>and message sequencing, the emphasis is put on reliable <lb/>communication and therefore, the test suite provides <lb/>tests for errors cases by simulating various forms of <lb/>intentional communication errors. <lb/>In healthcare, conformance and interoperability testing <lb/>are at their very early stages. As pointed out by [13], <lb/>conformance testing, interoperability tools and techni-<lb/>ques are needed in all healthcare domains to ensure the <lb/>integration of healthcare enterprises. Also in [13], the <lb/>authors reviewed many healthcare domains such as elec-<lb/>tronic health records and bio-imaging to analyse specific <lb/>aspects where additional standards are needed in order <lb/>to achieve automation; they pointed out that current <lb/>standards deal only with syntactic issues whereas the <lb/>disparate nature of healthcare vocabularies requires the <lb/>development of semantic interoperability too. Very few <lb/>projects exist for interoperability testing in healthcare. <lb/>In [14], a test framework is proposed to design and exe-<lb/>cute testing of HL7 communication, document, and <lb/>business layers. The business layer is described in terms <lb/>of scenarios that are expressed in the HL7 specifications. <lb/>These scenarios usually require the exchange of mes-<lb/>sages between two actors. Their test system can also act <lb/>as proxy between two testing peers. This framework <lb/>enables the fast and easy design of new tests. It follows <lb/>the Upper-Lower Tester model described by [15] and <lb/>tests only HL7 interoperability, as opposed to our sys-<lb/>tem that is based on an actor approach [15] to test a <lb/>specific interoperability profile using several communi-<lb/>cation standards for information exchange. The frame-<lb/>work described in [14], as well as our system, propose <lb/>tests for HL7 communication, document and business <lb/></body>

			<note place="headnote">Noumeir and Renaud Source Code for Biology and Medicine 2010, 5:9 <lb/>http://www.scfbm.org/content/5/1/9 <lb/></note>

			<page>Page 5 of 15 <lb/></page>

			<body>layers as opposed to document validation only for the <lb/>Picasso platform [16]. This is a commercial tool that <lb/>acts as a central interface between various communicat-<lb/>ing peers to transform a message from one version of <lb/>HL7 to another. The Picasso interoperability platform is <lb/>based on an internal HL7 version 3 structured represen-<lb/>tation of the data and uses style sheet transformation <lb/>technology to transform data between different formats. <lb/>In [16] a method for automatically validating such trans-<lb/>formations is presented and discussed. <lb/>As mentioned earlier, two different approaches for <lb/>testing are identified and discussed in [15]. The com-<lb/>mon approach to healthcare system testing is the <lb/>Upper-Lower Tester. Using this approach, the system <lb/>under test communicates with a Lower Tester via a spe-<lb/>cific communication protocol, and with the Upper Tes-<lb/>ter being the user or the business application under test. <lb/>Although this approach is widely used, it suffers from <lb/>many limitations: it usually allows the testing of one sys-<lb/>tem and one message at a time. In other words, the test-<lb/>ing environment does not simulate the working <lb/>environment in which communication between multiple <lb/>applications take place by exchanging a series of mes-<lb/>sages in order to collaboratively conduct a business pro-<lb/>cess. Even when this approach is expanded to test a <lb/>choreography, e.g. more than one message between <lb/>more than one system as in [14], it still suffers from the <lb/>lack of business level testing that can be achieved with <lb/>the actor based testing. An actor is an application that <lb/>has specific business responsibilities and communicates <lb/>with other actors according to constrained messages <lb/>that all cooperating actors agree on. Actor based testing <lb/>allows the construction of an environment that simu-<lb/>lates the real operation environment in which the sys-<lb/>tem under test is expected to operate. Actor based <lb/>testing does not suffer from the limitation of the Upper-<lb/>Lower Tester. However, it requires the business process <lb/>to be specified in terms of profiles between actors with <lb/>identified responsibilities. <lb/>Our testing system is based on an actor testing <lb/>approach. Testing can take place at the communication <lb/>level and the content level by validating the content of <lb/>exchanged messages. Moreover, testing can take place at <lb/>a high business level by validating that the system under <lb/>test has either changed its internal data or triggered <lb/>data exchange with other parties. Validating the change <lb/>to the internal data can be achieved by exchanging dif-<lb/>ferent messages with the tested system. Validating the <lb/>triggering of data exchange can be achieved by simulat-<lb/>ing the other peers or by monitoring the communica-<lb/>tion with them. IHE testing is based on actor testing. <lb/>The Mesa testing tools [17] have been used to test inter-<lb/>operability in preparation for connectathon [1]. IHE <lb/>Gazelle project, also an actor based approach, is a <lb/>multi-organization work in progress effort that allows <lb/>the testing of multiple systems. <lb/>Implementation <lb/>Specifications <lb/>For defining the specifications of our testing system, we <lb/>based our analysis on: 1-a detailed study of the XDS-I <lb/>integration profile specific requirements in terms of addi-<lb/>tional communication constraints, semantic and business <lb/>requirements; 2-the integration concerns as identified by <lb/>a study [18] whose objective was to analyze the losses <lb/>encountered in the U.S. automotive supply chain due to <lb/>integration problems. Such losses, in the billions each <lb/>year, are incurred due to: 1-the lack of information <lb/>flows; 2-the flow of incomplete, inaccurate, or impro-<lb/>perly represented data; 3-or the misinterpretation of <lb/>received data [19]. In an attempt to analyze and study <lb/>potential automations for this particular integration pro-<lb/>blem, a NIST report [18] has identified several integration <lb/>concerns; these concerns are based on the Model for <lb/>Open Distributed Processing (RM-ODP) [20]. This model <lb/>is developed by the International Organization for Stan-<lb/>dardization (ISO) in collaboration with the International <lb/>Electro-technical Commission (IEC) and the International <lb/>Telecommunication Union (ITU). RM-ODP defines <lb/>essential concepts necessary to specify open distributed <lb/>processing systems from five viewpoints: <lb/>1-Technical: where integration aspects relate to the <lb/>underlying communications, message structures and <lb/>content as well as control flow. <lb/>2-Semantic: where integration aspects concern the <lb/>consistent interpretation of the exchanged information <lb/>which requires an agreement on common concepts and <lb/>terms used to refer to those concepts. <lb/>3-Functional: where integration aspects concern beha-<lb/>viors of systems in consistency with their roles in the <lb/>overall process; these concerns include the objects to be <lb/>acted on and the actions to be done. <lb/>4-Policy: where integration aspects concern the ability <lb/>to support the business process in an acceptable way; <lb/>these aspects include security, reliability, availability, <lb/>accuracy, and timeliness. <lb/>5-Logistical: where integration aspects relate to trade-<lb/>offs between limitations to integration and the overall <lb/>value of the system such as cost, flexibility and <lb/>openness. <lb/>Our system verifies technical, semantic and functional <lb/>integration aspects. Likewise other IHE testing tools, the <lb/>possibility of verifying not only technical aspects but <lb/>also semantic and functional integration concerns is due <lb/>to interoperability requirements that constrain commu-<lb/>nication standards and that are defined and detailed in <lb/>integration profiles. These integration profiles are pub-<lb/>licly available; they are also agreed on by almost all <lb/></body>

			<note place="headnote">Noumeir and Renaud Source Code for Biology and Medicine 2010, 5:9 <lb/>http://www.scfbm.org/content/5/1/9 <lb/></note>

			<page>Page 6 of 15 <lb/></page>

			<body>vendors in the targeted domains. Conversely, most other <lb/>testing projects deal only with the verification of techni-<lb/>cal concerns. Even verifying the choreography, as speci-<lb/>fied by HL7 version 3, lies in our opinion under a <lb/>technical concern as it can be considered a control <lb/>conflict. <lb/>In Tables 1, 2 and 3, we describe the technical, <lb/>semantic, and functional concerns respectively along <lb/>with their impact on the specifications of our system. <lb/>For each type of concerns a list of conflicts as identified <lb/>in [18] are given in the first column; a brief definition of <lb/>each conflict is provided in the second column along <lb/>with examples from the healthcare domain for clarifica-<lb/>tions when necessary; in the third column we describe <lb/>how testing for the specific conflict has influenced the <lb/>specifications of our system. <lb/>Challenges: discussion and solution <lb/>XDS is built on ebXML and uses Simple Object Access <lb/>Protocol (SOAP) [21] as its transport mechanism. <lb/>ebXML as well as SOAP have evolved recently; this <lb/>introduces challenges that will be discusses hereafter. <lb/>On the other hand, NIST registry provides the valida-<lb/>tion and the functionalities of an XDS registry, but it <lb/>imposes architectural constraints that will also be pre-<lb/>sented and discussed. <lb/>Leveraging of NIST Registry <lb/>NIST Registry is accessible over the Internet; it will be <lb/>used in our overall architecture to fulfil the role of an <lb/>XDS registry because it provides an extensive validation <lb/>for the registry functionalities, transactions and data. <lb/>However, in order to use NIST registry, any published <lb/>document needs to belong to a patient that is already <lb/>known to it; therefore, the patient identification that is <lb/>used must be already known to NIST registry. As a <lb/>solution, a patient is registered using a specific web page <lb/>provided by the NIST registry, beforehand. The patient <lb/>identification obtained is then used throughout testing <lb/>sessions by including it in a specific configuration file. <lb/>Different versions of the underlying communication <lb/>protocol <lb/>XDS transactions are wrapped into SOAP message and <lb/>transported over HTTP. However, SOAP has evolved <lb/>recently to overcome some challenges. Its newer version <lb/>includes the ability to attach binary parts in an opti-<lb/>mized way; it also includes the ability to insert, part of <lb/>the message and in a standard way, addressing informa-<lb/>tion for more flexible networking topologies. This has a <lb/>direct impact on our testing software. <lb/>In fact, the communication between the document <lb/>source and the document repository involves the trans-<lb/>mission of metadata along with documents whose origi-<lb/>nal format may be in binary (i.e. DICOM manifest). <lb/>With SOAP 1.1, two approaches are possible for hand-<lb/>ling the issue of binary data communication: 1-Embed-<lb/>ding such data in XML as text-encoded (base64) octets <lb/>which increases the message size and impacts perfor-<lb/>mance; 2-referencing the binary data in the XML docu-<lb/>ment, with the binary data bundled as an attachment <lb/>(SOAP with attachments). The initial version of XDS <lb/>adopted the second approach by specifying a standard <lb/>way to bundle the ebXML message and the binary <lb/>Table 1 Technical concerns <lb/>Conflict <lb/>name <lb/>Definition <lb/>Impact on specifications <lb/>Connection <lb/>conflict <lb/>There is a disagreement at the communication level including <lb/>the lower layers. <lb/>Since we do not execute conformance testing, we only require <lb/>that the communication successfully takes place while verifying <lb/>additional communication requirements when necessary. Such <lb/>additional communication requirements include for example the <lb/>presence of web addressing at the SOAP level as required by the <lb/>integration profile. <lb/>Syntactic <lb/>conflict <lb/>Different data structures or representations are used between <lb/>peers. <lb/>In addition to verifying the structure of a message, we verify the <lb/>presence of all required data, and the correct structure of any <lb/>published document: published documents are constrained to be <lb/>of specific types such as CDA or DICOM manifest. <lb/>Control <lb/>conflict <lb/>The communication peers do not agree on their roles (e.g. which <lb/>peer is the server) or in the flow of control of a communication <lb/>interaction (e.g. immediate or deferred acknowledgment). <lb/>We do not perform any specific verification of this conflict, as we <lb/>only require that the communication be successful. <lb/>Quality-of-<lb/>service <lb/>conflict <lb/>The behavior of a communication peer does not satisfy technical <lb/>requirements derived from &quot;policy&quot; concerns, such as a timely <lb/>response to a communication response. <lb/>Using a timeout, our system will consider the communication as <lb/>failed, if not timely achieved. <lb/>Data <lb/>consistency <lb/>conflict <lb/>Peers do not consistently use information that is not directly <lb/>communicated in the interaction (e.g. configuration data). In our <lb/>case, such data include information about peers&apos; addresses, <lb/>procedure codes, document types and other codes that would <lb/>generally be shared in a healthcare enterprise. <lb/>Our system requires that the tested system uses shared <lb/>configuration information with the testing software. <lb/></body>

			<note place="headnote">Noumeir and Renaud Source Code for Biology and Medicine 2010, 5:9 <lb/>http://www.scfbm.org/content/5/1/9 <lb/></note>

			<page>Page 7 of 15 <lb/></page>

			<body>attachments in a MIME multipart package. This <lb/>approach does not describe how intermediaries should <lb/>deal with this referenced data, limiting therefore net-<lb/>working flexibility. <lb/>SOAP 1.2 brings a solution for these problems by <lb/>adopting the Message Transmission Optimization <lb/>Mechanism (MTOM) along with the XML-binary Opti-<lb/>mized Packaging (XOP). XOP defines how to serialize <lb/>the binary data as parts of a MIME multipart related <lb/>packaging format, while MTOM describes how to serial-<lb/>ize a SOAP envelope using XOP. More information on <lb/>the dependencies of XDS on SOAP can be found in [4]. <lb/>What is of relevance here is that two different versions <lb/>of SOAP exist and each one is used in a different ver-<lb/>sion of XDS. This variability introduces challenges <lb/>because both versions need to be tested by the same <lb/>software. We have designed the system with the ability <lb/>to run the tests in either flavour. <lb/>Different versions of specifications <lb/>With the new version of SOAP (version 1.2), and the <lb/>release of a new version of ebXML (version 3.0), a new <lb/>version of XDS (XDS-b as opposed to the initial version <lb/>that was renamed XDS-a) has been designed to benefit <lb/>from the advancements in these fields. From the testing <lb/>point of view, this is a challenge. While, the process <lb/>flow and medical content exchange is not changed, the <lb/>underlying communication mechanism is different <lb/>between the two versions. But, both versions need to be <lb/>tested, even though the newer version is expected to <lb/>deprecate the initial one. The definition of a new version <lb/>of the specifications does not eliminate the need for <lb/>testing of the version to be deprecated in the future. In <lb/>fact, the initial version is being deployed presently in <lb/>many national projects; therefore testing of systems <lb/>cooperating according to this initial version will still be <lb/>needed. The testing software is designed to test imple-<lb/>mentations according to one version or the other. <lb/>The initial version of XDS (XDS-a) is based on SOAP <lb/>1.1 and ebXML 2.1. It specifies the usage of SQL queries <lb/>to query the registry. This specification requires the <lb/>consumer system to know about the registry data <lb/>model, therefore puts limitations on the evolution of <lb/>that data model. In order to hide the registry data <lb/>model from the outside world, stored queries have been <lb/>introduced where the knowledge of the data model is <lb/>no more needed at the consumer system. The end result <lb/>is an infrastructure with two possible ways of imple-<lb/>menting registry queries. Moreover, each query type has <lb/>been designed with a different ebXML version: SQL <lb/>queries are specified with ebXML 2.1 and stored queries <lb/>are specified with ebXML 3.0. Therefore, XDS-a comes <lb/>with 2 flavours of queries, each specified with a different <lb/>version of ebXML. <lb/>The new version of XDS (XDS-b) is based on SOAP 1.2 <lb/>and ebXML 3.0. ebXML data structure is different from <lb/>Table 2 Semantic concerns <lb/>Conflict name <lb/>Definition <lb/>Impact on specifications <lb/>Conceptualization <lb/>conflict <lb/>Communicating applications have incompatible representation <lb/>of the same concept. Examples include how to describe an <lb/>address, a person, a document. <lb/>IHE integration profiles define common concepts. In our <lb/>system, concepts central to sharing documents are validated <lb/>by NIST registry while those specific to sharing images are <lb/>validated by our system. Amongst validated concepts is the <lb/>manifest that must relate to specific images; this is validated <lb/>by verifying the manifest content. <lb/>Conceptual scope <lb/>conflict <lb/>An important concept is not communicated by one of the <lb/>peers. <lb/>Important concepts are made required in IHE profiles and their <lb/>presence is validated in communication transactions. <lb/>Interpretation <lb/>conflict <lb/>The message has a different meaning to the listener than it <lb/>does to the speaker; in other words, the technical <lb/>communication is completely successful, but the intent is not <lb/>fulfilled. <lb/>In IHE profiles, expected actions are specified and our testing <lb/>software validates that expected actions have been <lb/>accomplished mainly in two ways: if the receiving system is <lb/>required to trigger a communication, the testing software <lb/>awaits this and validates the communication content; if the <lb/>receiving system is required to change its internal state, the <lb/>testing software triggers a transaction to the tested system <lb/>and validates the response content. When testing an imaging <lb/>document source, the testing software verifies that the images <lb/>referenced in a published manifest are available by issuing <lb/>WADO transactions to the image archive. Likewise, when <lb/>testing an imaging document consumer, the testing software <lb/>awaits for image query from the tested system to ensure that <lb/>the received manifest has been successfully decoded and <lb/>interpreted. <lb/>Reference conflict The communicating applications use different systems of <lb/>reference for identical concepts. Examples include how to <lb/>reference an imaging procedure, whether this is done with the <lb/>accession number or the procedure id. <lb/>The testing software validates the structure used to reference <lb/>images inside a manifest, as well as the consistent <lb/>identification of the manifest i.e. the use of the manifest UID <lb/>to identify the document inside the ebXML message. <lb/></body>

			<note place="headnote">Noumeir and Renaud Source Code for Biology and Medicine 2010, 5:9 <lb/>http://www.scfbm.org/content/5/1/9 <lb/></note>

			<page>Page 8 of 15 <lb/></page>

			<body>the one of ebXML 1.2. Moreover, it uses Web Service <lb/>Addressing specification (WS-Addressing) and provides <lb/>informative Web Services Description Language (WSDL) <lb/>contracts for its transactions [22]. WS-Addressing per-<lb/>mits the specification of endpoint addresses as part of the <lb/>SOAP header to allow routing flexibility. But most <lb/>importantly, it enables an abstract separation between <lb/>the application layer, the Web services messaging infra-<lb/>structure layer, and the message transport layer. These <lb/>abstraction layers allow the developer to concentrate on <lb/>the application layer by using special framework such as <lb/>Apache AXIS2 [23]. AXIS2 takes care of the infrastruc-<lb/>ture layer according to the rules set in the WSDL. There-<lb/>fore, it simplifies the implementation and we have <lb/>chosen to use it. <lb/>One last difference between the two versions is that <lb/>the initial version uses HTTP GET to retrieve a docu-<lb/>ment while the newer version uses Web Service Retrieve <lb/>instead. The later uses MTOM and offers the possibility <lb/>to retrieve multiple documents with a single request. <lb/>Our system design isolates the business logic from the <lb/>communication mechanisms. The business logic consists <lb/>in specific test flows along with specific validation, while <lb/>high level transactions may differ by the underlying <lb/>communication protocols. The software implements <lb/>different versions of the same high level transactions <lb/>and can instantiate a specific version depending on a <lb/>user&apos;s setup. <lb/>Web Services technology <lb/>XDS-a uses SOAP with attachments. SOAP, HTTP <lb/>requests and HTTP retrieves can be implemented with <lb/>standard Java API in addition to some external libraries. <lb/>XDS-b brought in more advanced Web technologies <lb/>that are not implemented in standard Java API. That is <lb/>why we have decided that AXIS2 could bring an impor-<lb/>tant value added. <lb/>AXIS2 is a core engine for Web services [23]. It pro-<lb/>vides the capability to add Web services interfaces to <lb/>Web applications and can also be used as a standalone <lb/>server application. <lb/>AXIS2 uses its own XML model called AXIOM (AXIS <lb/>Object Model) for parsing XML. The SOAP implementa-<lb/>tion within AXIS2 is based on AXIOM. It is a pull parser <lb/>Table 3 Functional concerns <lb/>Conflict <lb/>name <lb/>Definition <lb/>Impact on specifications <lb/>Functional <lb/>model <lb/>conflict <lb/>Two applications have incompatible factorings of the process <lb/>activity space: there may be a task that each expects the other to <lb/>do (&quot;nobody&apos;s job&quot;), or a task that both expect to do themselves <lb/>(&quot;overlapping roles&quot;). <lb/>Roles and responsibilities are specified in the IHE integration <lb/>profile. When testing a system, our software tests a specific role <lb/>and therefore tests all responsibilities associated with that role as <lb/>required by the profile. <lb/>Functional <lb/>scope <lb/>conflict <lb/>One party&apos;s behavioral model for a function contains more <lb/>activities than the other party&apos;s model: 1-when the requester&apos;s <lb/>model is larger than the performer&apos;s model, the performing <lb/>application executes a subset of the expected behavior, leaving <lb/>some expected tasks not done; 2-when the requester&apos;s model is <lb/>smaller than the performer&apos;s model, the performing application <lb/>executes unexpected activities as well as those requested. One <lb/>example of functional scope from the IHE radiology technical <lb/>framework relates to the Modality Performed Procedure Step <lb/>(MPPS) transaction where the expected behavior of the receiving <lb/>system is not specified in details; therefore this transaction is <lb/>usually successfully received but does not trigger actions or state <lb/>change as implicitly expected. <lb/>In the profile of interest here, functional scope conflict is avoided <lb/>as far as the applications implement the required responsibilities <lb/>of the specific role they play; these responsibilities are verified by <lb/>the testing software as stated above. <lb/>Embedding <lb/>conflict <lb/>The behavior of an application is affected by the integration with <lb/>other peers. This happens when the application is capable of <lb/>some adaptability in behavior which might be configured. <lb/>This kind of conflict is supposed to be detected and fixed by the <lb/>testing engineers while using the testing software. The testing <lb/>software does not detect en embedding conflict per se; but <lb/>performing the testing with the help of our testing software <lb/>simulates the integrated environment in which the application is <lb/>supposed to operate in a real situation; therefore, an eventual <lb/>embedding conflict would be fixed before deployment. <lb/>Intention <lb/>conflict <lb/>The application is being used in a way its design did not <lb/>anticipate, resulting in unexpected behaviors. This relates to <lb/>differences in the details of the application specification versus the <lb/>specification as needed for the role of that application in the <lb/>larger system. This kind of conflict is hard to grasp. One example <lb/>of such conflict is encountered in the way x-ray images are <lb/>organized into series: one acquisition equipment may group <lb/>multiple x-ray images into one series, while another one may put <lb/>each image in a different series. Although both equipments have <lb/>the right to do so, the receiving system may not be able to <lb/>function with one or the other type of image grouping. <lb/>Even though the testing software helps in detecting some <lb/>intention conflicts, such conflicts may arise anytime during the <lb/>operation of the integrated larger system. <lb/></body>

			<note place="footnote">Noumeir and Renaud Source Code for Biology and Medicine 2010, 5:9 <lb/>http://www.scfbm.org/content/5/1/9 <lb/></note>

			<page>Page 9 of 15 <lb/></page>

			<body>as compared to DOM or XOM that are push parsers. This <lb/>means that AXIOM controls the parser and builds the <lb/>XML representation in memory only when specific infor-<lb/>mation is needed as opposed to parsing the complete XML <lb/>tree at once. Therefore, it can partially build the tree so <lb/>unnecessary data won&apos;t be loaded in memory. This trans-<lb/>lates into a performance gain therefore, overcoming one of <lb/>the major disadvantages of XML which is slow parsing. <lb/>We have decided to use AXIS2 because it takes care <lb/>of the web infrastructure. As a result, we can focus on <lb/>interoperability testing while mitigating the risk caused <lb/>by the evolution impact of web technologies on our test-<lb/>ing software. <lb/>Architecture <lb/>The objective of our system is to test an application that <lb/>can play the role of either an imaging document consu-<lb/>mer or an imaging document source. Each of these two <lb/>roles is tested separately and the tests are described in <lb/>section 3. In order to implement the various tests, our <lb/>system simulates the peers needed by the tested applica-<lb/>tion. Moreover, it controls the data used during the <lb/>tests, imposes a specific test flow and validates the con-<lb/>tent of all received transactions. <lb/>An overview of the system architecture is depicted in <lb/>Figure 4. Components with gray background are third-<lb/>party software available for public use: DICOM Toolkit <lb/>provides the functionalities of a DICOM archive [24]; <lb/>pixelMed provides software tools for converting between <lb/>multiple image and report formats [25]; AXIS2 provides <lb/>a high level API for web services, SOAP and XML pro-<lb/>gramming. Moreover, our system relies on NIST public <lb/>registry to provide the functionality of an XDS registry. <lb/>In the following sections, we describe the testing sys-<lb/>tem&apos;s components. <lb/>Registry adaptor <lb/>The adaptor is as a proxy to NIST registry/repository. It <lb/>logs the SOAP messages and the attachments for testing <lb/>purposes. It analyse the incoming SOAP messages to <lb/>decide whether it is a submission request or a query. <lb/>In case of a submission request, it archives the attached <lb/>files in the local repository before sending the request to <lb/>the registry. In this sense, it acts as a document reposi-<lb/>tory as it archives the published documents. <lb/>It also receives requests for retrieving documents from <lb/>a tested document consumer system. To serve a retrieve <lb/>request, it forwards the query to NIST, modifies the <lb/>response so it references the local documents, and sends <lb/>the response to the query initiator. <lb/>When testing an imaging document source system, <lb/>the adaptor acts as document consumer because it <lb/>queries NIST for the submitted manifest. <lb/>Simple Publisher <lb/>This software component constructs a manifest along <lb/>with a submission request to be sent to the registry. <lb/>It retrieves images from the WADO server, creates the <lb/>manifest, and publishes it to the registry. <lb/>It is used by the testing software for publishing the <lb/>manifest to NIST Registry in order to test an imaging <lb/>document consumer system. It can also be used by a <lb/>software developer to publish his/her own manifest to <lb/>the registry. <lb/>Registry Client <lb/>This registry client is a utility software that can be used <lb/>by a software developer to interact with NIST Registry. <lb/>It can be used to publish or to query for a document. <lb/>Image Database/DICOM Retrieve SCP <lb/>This is a DICOM Server provided by a third party soft-<lb/>ware [12]. It accesses and manages a database for <lb/>archiving DICOM instances. <lb/>WADO server <lb/>The WADO Server receives a HTTP GET request and <lb/>returns the required DICOM instance. The WADO <lb/>XDS-I TESTKIT <lb/>NIST PUBLIC <lb/>ONLINE REGISTRY <lb/>REGISTRY CLIENT <lb/>Imaging Document Consumer / <lb/>Imaging Document Source <lb/>AXIS2 <lb/>CLIENT <lb/>REGISTRY ADAPTOR (Acts as Registry, Repository <lb/>and Document Consumer) <lb/>AXIS2 <lb/>SERVER <lb/>AXIS2 <lb/>CLIENT <lb/>WADO <lb/>SERVER <lb/>(dcmtk) <lb/>IMAGE <lb/>DATABASE <lb/>(dcmtk) <lb/>PixelMed <lb/>Java DICOM <lb/>Toolkit <lb/>Forward query <lb/>Send back response <lb/>TESTED APPLICATION <lb/>Imaging Document Consumer / <lb/>Imaging Document Source <lb/>Send transaction to adaptor <lb/>Forward response to client <lb/>FILE <lb/>SERVER <lb/>TEST <lb/>MODULES <lb/>TEST <lb/>CONTROL <lb/>INTERFACE <lb/>WADO / SCP retrieve <lb/>DICOM file <lb/>WADO / SCP retrieve <lb/>DICOM file <lb/>Send transaction to adaptor <lb/>Forward response to client <lb/>INFORMATI-<lb/>ON LOGGER <lb/>NIST PUBLIC <lb/>ONLINE <lb/>REPOSITORY <lb/>Register <lb/>document <lb/>Forward provide document <lb/>Send back response <lb/>Figure 4 Overview of the system architecture. <lb/></body>

			<note place="headnote">Noumeir and Renaud Source Code for Biology and Medicine 2010, 5:9 <lb/>http://www.scfbm.org/content/5/1/9 <lb/></note>

			<page>Page 10 of 15 <lb/></page>

			<body>server contacts the DICOM SCP Server to retrieve the <lb/>required DICOM instance. It converts the instance <lb/>before sending the response according to the requested <lb/>content type. For its conversion needs, it uses the <lb/>DICOM Toolkit [12] for converting reports into XML <lb/>or HTML and uses PixelMed [13] for converting images <lb/>into JPEG. <lb/>Information logger <lb/>The logger logs information gathered at various steps of <lb/>a test so it can be verified at the end of the test execu-<lb/>tion. Information logged includes all messages content <lb/>(requests as well as responses), third party console out-<lb/>put (such as DCMTK output), and explicit test output. <lb/>Logger also saves attachments. <lb/>Web Test Control Interface <lb/>The control interface provides the GUI to the user and <lb/>controls the test flow. It presents to the user available <lb/>tests and instantiate a specific test execution that is <lb/>associated with the chosen test. During a test execution, <lb/>it presents to the user information on expected next <lb/>actions and the test state. A test is divided into multiple <lb/>stages. This controller calls &apos;next Stage&apos; or &apos;cancel&apos; <lb/>method on the test. Upon reaching the final stage, an <lb/>evaluation is performed and the evaluation result is pre-<lb/>sented to the user. The test instance logs valuable infor-<lb/>mation in a XML format; also, it evaluates the XML <lb/>logs using an XSLT. <lb/>Test modules <lb/>These modules group different classes and software <lb/>responsible for specific test flows and test evaluation. <lb/>AXIS2 Client <lb/>AXIS2 Client uses AXIS2 API for sending SOAP mes-<lb/>sages to a remote WEB Server. <lb/>AXIS2 Server <lb/>AXIS2 Server uses AXIS2 to act as a WEB service. It <lb/>provides to AXIS2 a file describing its WEB Server end-<lb/>points allowing the received message to be redirected to <lb/>the appropriate class capable of handling the business <lb/>logic. <lb/>Design for dealing with two different versions of <lb/>specifications <lb/>The main differences between the two different versions <lb/>are the following: <lb/>Profile A: SQL Query, ebXML 2.1, SOAP 1.1, SOAP <lb/>with attachment, HTTP GET, and Stored Query that <lb/>requires ebXML 3.0. <lb/>Profile B: Stored Query only, ebXML 3.0, SOAP 1.2, <lb/>MTOM/XOP, WS-Addressing, and WS-Retrieve. <lb/>Our design goal is to have a single version of the com-<lb/>mon business logic for an easier maintenance and evolu-<lb/>tion. Therefore, this logic has been factored out in <lb/>abstract classes whereas specific logic has been imple-<lb/>mented with sub-classes. The Abstract Factory [26] <lb/>design pattern has been used as shown in figure 5 to <lb/>manage the instantiation of the family of classes. In fact, <lb/>there are two different versions of factories; each is <lb/>responsible of instantiating classes for a specific version <lb/>of the profile. Both factories inherit from the same <lb/>abstract factory. Furthermore, factory instantiation is <lb/>managed by a singleton that reads information from a <lb/>configuration file and decides the type of factory to <lb/>instantiate. This design decision ensures that, both client <lb/>and web service, function according to the same version <lb/>even though they run each in a completely different <lb/>environment. A mechanism to override the default <lb/>ebXML version to be used has also been implemented <lb/>to allow for various underlying communication versions. <lb/>Results <lb/>Tests description <lb/>Testing an imaging document consumer actor <lb/>To test a specific actor, the testing software simulates <lb/>the other actors involved in the test flow. For testing an <lb/>imaging document consumer actor, the software simu-<lb/>lates the document registry, the document repository, <lb/>and provides an imaging document source actor. This <lb/>test consists of the following steps: <lb/>Preparation of the testing data The testing software <lb/>builds its internal DICOM archive by loading in it the <lb/>image instances to be published. It ensures that its <lb/>archive is able to receive connections. The user is asked <lb/>to use a software tool, part of the testing software pack-<lb/>age, in order to publish a manifest referencing the <lb/>images in the archive. <lb/>Query to the registry The imaging document consumer <lb/>system under test is required to query the registry. It <lb/>sends a query to the XDS adaptor that forwards it to <lb/>NIST registry after validation; the XDS adaptor receives <lb/>NIST response, changes the reference to the published <lb/>document so it points to the local one and sends it to <lb/>the system under test. <lb/>Retrieve of the manifest The imaging document consu-<lb/>mer system under test is required to extract, from the <lb/>response to its query, the reference to the manifest of <lb/>interest and to retrieve it. The testing software logs <lb/>every retrieved manifest for evaluation. <lb/>Image retrieve The testing software starts its internal <lb/>archive so it can accept retrieve transactions (by <lb/>C-MOVE or WADO). The imaging document consumer <lb/>system under test is required to parse the manifest, to <lb/>extract the referenced UIDs and to use them in order to <lb/>retrieve, at least one of the referenced DICOM <lb/></body>

			<note place="footnote">Noumeir and Renaud Source Code for Biology and Medicine 2010, 5:9 <lb/>http://www.scfbm.org/content/5/1/9 <lb/></note>

			<page>Page 11 of 15 <lb/></page>

			<body>instances, using either WADO or DICOM C-MOVE <lb/>from the testing software archive. The output of the <lb/>archive software (DICOM Toolkit) is logged in a file for <lb/>evaluation. <lb/>Testing an imaging document source actor <lb/>The process flow of this test is depicted in Figure 6, <lb/>where references to IHE transactions are indicated <lb/>within square brackets. The test&apos;s steps are as follows: <lb/>Preparation of the testing data The imaging document <lb/>source system under test is required to send a submis-<lb/>sion request with a DICOM manifest to the XDS adap-<lb/>tor. The manifest references images that are managed <lb/>by the system under test. <lb/>Publishing of the manifest The testing software verifies <lb/>that the newly submitted manifest has not been pre-<lb/>viously submitted to NIST registry. It does so by query-<lb/>ing the NIST registry for the identification of the <lb/>manifest to be published. After the registration with <lb/>NIST registry is completed, the testing software verifies <lb/>that the registration step with NIST registry was suc-<lb/>cessfully completed by querying for the new document <lb/>identification. <lb/>Image retrieve The testing software parses the received <lb/>manifest, extracts all referenced UIDs and retrieves from <lb/>the imaging document source system under test, all <lb/>DICOM instances that are referenced in the published <lb/>manifest. The test completes successfully if at least one <lb/>instance is retrieved. The image retrieve transaction is <lb/>done using either DICOM C-MOVE or WADO. Two <lb/>tests are provided to support each flavours of this <lb/>transaction. <lb/>Discussion <lb/>Building the testing software on top of AXIS2 is a first <lb/>step towards a better and full support of WEB Service <lb/>technologies as they become more common. In the <lb/>future, mechanisms that enable the testing software to <lb/>make use of WSDL would be implemented. At the <lb/>moment this article is written, neither NIST registry nor <lb/>AXIS2 infrastructure were ready to fully use WSDL. <lb/>However, as WSDL technology can be expected to be in <lb/>place in the very near future, the testing software would <lb/>largely benefit from relaying on it. <lb/>The design of the testing software has been carried <lb/>out to reduce the impact of schema modifications and <lb/>to allow easy extension either for adding new tests or <lb/>adding new transactions. Schemas are retrieved directly <lb/>from the WEB and used for validating messages&apos; con-<lb/>tent. This ensures that the latest version of the schema <lb/>is used. On the other hand, the implementation of the <lb/>testing software can be easily extended to include new <lb/>tests or to include new transactions. Adding a new test <lb/>has been simplified by the design of the software; the <lb/>test execution has been factored in a single class that <lb/>can be extended. Adding a new transaction requires the <lb/>specialization of some message-type classes along with <lb/>the implementation of their adequate evaluation. <lb/>Conclusions <lb/>We have presented the architecture of a web application <lb/>for testing interoperability in healthcare. The proposed <lb/>software provides functionalities to test peers involved <lb/>in sharing images between different institutions. We <lb/>have also presented various challenges encountered and <lb/>discussed the elected solutions. Furthermore, we have <lb/>described the web technologies underlying the XDS fra-<lb/>mework, corner stone of the Electronic Health Record <lb/>that is in deployment in several countries. <lb/>This software, available from [27,28], can be used by <lb/>system implementers to test their implementations. <lb/> Abstract Class <lb/>Abstract Factory <lb/>Concrete Factory <lb/>Profile B <lb/>&lt;&lt; Creates &gt;&gt; <lb/>Concrete Class <lb/>Profile B <lb/>Concrete Class <lb/>Profile A <lb/>Concrete Factory <lb/>Profile A <lb/>&lt;&lt; Creates &gt;&gt; <lb/>Figure 5 Overview of the software design for dealing with various versions of standards. <lb/></body>

			<note place="headnote">Noumeir and Renaud Source Code for Biology and Medicine 2010, 5:9 <lb/>http://www.scfbm.org/content/5/1/9 <lb/></note>

			<page>Page 12 of 15 <lb/></page>

			<body>It can also be used by site integrators to verify and test <lb/>the interoperability of systems, peers in the same health-<lb/>care process. Moreover, developers can use it to under-<lb/>stand specifications ambiguities, if present, and to <lb/>resolve implementations difficulties. <lb/>The software is built on evolving technologies. XDS <lb/>specification is evolving; it evolved recently to benefit <lb/>from new versions of ebXML and of SOAP; XDS <lb/>specifications also evolved to enhance interoperability, <lb/>maintainability, flexibility and efficiency: one such exam-<lb/>ple was the introduction to Stored Queries as compared <lb/>to ad-hoc Queries. XDS underlying technology is also <lb/>evolving; web technologies are continuously developing <lb/>and they directly impact XDS and XDS-I. The architec-<lb/>ture and design of the testing software were worked out <lb/>to mitigate the impact of such changes. More precisely, <lb/>Figure 6 Process flow for testing an Imaging Document Source. <lb/></body>

			<note place="headnote">Noumeir and Renaud Source Code for Biology and Medicine 2010, 5:9 <lb/>http://www.scfbm.org/content/5/1/9 <lb/></note>

			<page>Page 13 of 15 <lb/></page>

			<body>relying on Apache AXIS2 infrastructure to effectively <lb/>handle web communications, message packaging and <lb/>XML efficient parsing, is expected to have contributed <lb/>to isolate the software from the web infrastructure layer. <lb/>Thus, we think that the proposed testing software is <lb/>ready to support new web development easily, and that <lb/>it will evolve without major difficulties. <lb/></body>

			<div type="availability">Availability and requirements <lb/>Project name: IHE-XDS-Imaging <lb/>Project home page: http://sourceforge.net/projects/ihe-<lb/>xds-imaging/ <lb/>Operating system(s): Platform independent <lb/>Programming language: Java <lb/>Other requirements: Java 1.6, Apache Tomcat 6.0, <lb/>dcmtk 3.5.4 <lb/>License: GNU GPL version 3 <lb/>Any restrictions to use by non-academics: None <lb/></div>

			<div type="acknowledgement">Acknowledgements <lb/>The development of the initial version of the software has been funded by <lb/>Canada Health Infoway. The development of additional features has been <lb/>funded by the Radiological Society of North America. The architecture <lb/>refactoring has been funded by the Natural Sciences and Engineering <lb/>Research Council of Canada. Thanks to Stephan Friese who implemented <lb/>the initial version of the software, and to Richard Labbé-Moreau who <lb/>implemented the stored queries as well as the integration with NIST public <lb/>Registry. Renaud Bérubé, co-author of this paper, re-engineered the software <lb/>to use Apache AXIS2 infrastructure. <lb/></div>

			<div type="annex">Authors&apos; contributions <lb/>RB implemented the refactoring of the software to integrate AXIS2 and to <lb/>support two versions of XDS. RN carried out the test specifications, the <lb/>analysis and interpretation of data as well as writing the article. All authors <lb/>read and approved the final manuscript <lb/></div>

			<div type="annex">Authors&apos; information <lb/>RN has been actively involved with Integrating the Healthcare Enterprise, at <lb/>the international level, since its inception. She is the author of several IHE <lb/>Integration profiles in radiology. In particular, she authored the Cross-<lb/>enterprise Document Sharing for Imaging. She also directed the <lb/>implementation of IHE testing software with the support of Canada Health <lb/>Infoway. The testing software includes XDS-I testing tools, Patient <lb/>Identification Cross-Reference (PIX) using Health Level 7 (HL7) version 3 (v3) <lb/>and Patient Demographics Query (PDQ) with HL7 v3. She also directed the <lb/>XDS-I demonstration during the Radiological Society of North America <lb/>(RSNA) scientific assembly and annual meeting in November 2006 along <lb/>with the face-to-face interoperability testing event (connect-a-thon) in <lb/>preparation to the demonstration. <lb/>RN is a professor at the Department of Electrical Engineering of the <lb/>University of Quebec, École de Technologie Supérieure in Montreal. She <lb/>holds a Master&apos;s and Ph.D. degrees in Biomedical Engineering from École <lb/>Polytechnique, University of Montreal. Her main research interest is the <lb/>Healthcare Information Technology, specifically, Interoperability, Electronic <lb/>Patient Record, Security, Information Confidentiality and Image Processing. <lb/>Dr Noumeir has provided consulting services in architecture analysis, <lb/>workflow analysis, technology assessment and image processing for several <lb/>software and medical companies including Canada Health Infoway. <lb/>RB graduated recently in Electrical Engineering with a major in computer <lb/>science from University of Quebec, École de Technologie Supérieure in <lb/>Montreal. During a research internship under the supervision of Dr Noumeir, <lb/>he participated to the development of the IHE XDS-I testing software by re-<lb/>engineering the software in order to integrate web services and to support <lb/>multiple versions of the integration profile. He also provided technical <lb/>support for developers and implementers that used the testing software. <lb/>Competing interests <lb/>The authors declare that they have no competing interests. <lb/></div>

			<front>Received: 24 September 2009 Accepted: 21 September 2010 <lb/>Published: 21 September 2010 <lb/></front>

			<listBibl>References <lb/>1. Noumeir R: Integrating the Healthcare Enterprise Process. Int J Healthcare <lb/>Technology &amp; Management 2008, 9:167-180. <lb/>2. The Digital Imaging and Communications in Medicine (DICOM) <lb/>standard, (2010, Apr. 20). [http://medical.nema.org], [Online]. <lb/>3. IHE Technical Framework and supplements, (2010, Apr. 20). [http://www. <lb/>ihe.net/Technical_Framework/index.cfm], [Online]. <lb/>4. Noumeir R: Sharing Medical Documents and Images: Architecture and <lb/>Communication infrastructure. accepted for publication in IEEE IT-<lb/>Professional 2010. <lb/>5. Noumeir R: IHE Cross-Enterprise Document Sharing for Imaging: Design <lb/>Challenges. Progress in Biomedical Optics and Imaging, Proc. SPIE, v 6145, <lb/>Medical Imaging, p 61450Q 2006. <lb/>6. Noumeir R, Pambrun JF: Images within the Electronic Health Record. IEEE <lb/>International Conference on Image Processing ICIP09 2009. <lb/>7. OASIS ebXML, (2010, Apr. 20). [http://www.ebxml.org], [Online]. <lb/>8. National Institute of Standards and Technology, NIST XDS Public <lb/>Registry Test Facility, (2010, Apr. 20). [http://ihexds.nist.gov], [Online]. <lb/>9. OASIS ebXML Implementation, Interoperability and Conformance <lb/>Technical Committee, ebXML Test Framework Committee Specification, <lb/>version 1.1. 2004. <lb/>10. NIST Manufacturing Business to Business (B2B) InteroperabilityTestbed. <lb/>(2010, Apr. 12). [http://www.mel.nist.gov/msid/b2btestbed], [Online]. <lb/>11. Dongsoo K, Jung-Hee Y: Development of an ebXML Conformance Test <lb/>System for e-Business Solutions. Lecture Notes in Computer Science, LNCS <lb/>Springer-Verlag/Heidelberg 2003, 2738:145-154. <lb/>12. Narita MIK, Shimamura M, Yamaguchi T: Verifying reliability interactions <lb/>for the robot communication platform and contribution to the <lb/>international standards. SMCia/08 -Proceedings of the 2008 IEEE Conference <lb/>on Soft Computing on Industrial Applications 2008, 281-286. <lb/>13. Sriram RD, Lide B: The role of standards in healthcare automation. 2009 <lb/>IEEE International Conference on Automation Science and Engineering (CASE <lb/>2009) 2009, 79-82. <lb/>14. Namli T, Aluc G, Dogac A: An interoperability test framework for HL7-<lb/>based systems. IEEE Transactions on Information Technology in Biomedicine <lb/>2009, 13(3):389-99. <lb/>15. Gebase L, Snelick R, Skall M: Conformance testing and interoperability: a <lb/>case study in healthcare data exchange. Proceedings of the 2008 <lb/>International Conference on Software Engineering Research &amp; Practice 2008, <lb/>143-9. <lb/>16. Pascale M, Roselli M, Rugani U, Bartolini C, Bertolino A, Lonetti F, <lb/>Marchetti E, Polini A: Automated testing of healthcare document <lb/>transformations in the PICASSO interoperability platform. 2009 31st <lb/>International Conference on Software Engineering -Companion Volume -ICSE-<lb/>Companion 2009, 163-71. <lb/>17. MESA software, IHE Test Tools. (2010, Apr. 12). [http://ihedoc.wustl.edu/ <lb/>mesasoftware/index.htm], [Online]. <lb/>18. Barkmeyer EJ, Barnard Feeney A, Denno PO, Flater DW, Libes DE, Steves MP, <lb/>Wallace EK: Concepts for Automating Systems Integration. NIST <lb/>Interagency/Internal Report (NISTIR) 6928 2003. <lb/>19. Brunnermeier S, Martin S: Interoperability Cost Analysis of the US <lb/>Automotive Supply Chain. Research Triangle Institute 1999. <lb/>20. ISO/IEC 10746-1:1998 Information technology -Open Distributed <lb/>Processing: Reference Model -Part 1: Overview. International <lb/>Organization for Standardization, Geneva, Switzerland 1998. <lb/>21. Simple Object Access Protocol (SOAP): W3C Recommendation (Second <lb/>Edition) 27 April 2007, (2010, Apr. 20) [http://www.w3.org/TR/soap], [Online]. <lb/>22. Web Services Addressing (WS-Addressing), W3C Member Submission 10 <lb/>August 2004, (2010, Apr. 20). [http://www.w3.org/Submission/ws-<lb/>addressing], [Online]. <lb/>23. Apache AXIS2, (2010, Apr. 20). [http://ws.apache.org/axis2], [Online]. <lb/></listBibl>

			<note place="headnote">Noumeir and Renaud Source Code for Biology and Medicine 2010, 5:9 <lb/>http://www.scfbm.org/content/5/1/9 <lb/></note>

			<page>Page 14 of 15 <lb/></page>

			<listBibl>24. DCMTK DICOM Toolkit, (2010, Apr. 20). [http://dicom.offis.de/dcmtk], <lb/>[Online]. <lb/>25. PixelMed Publishing, (2010, Apr. 20). [http://www.pixelmed.com], [Online]. <lb/>26. Grand M: Patterns in Java. Wiley 2002, 1. <lb/>27. IHE-XDS-Imaging, Testing Software Source Code, (2010, Apr. 20). [http:// <lb/>sourceforge.net/projects/ihe-xds-imaging], [Online]. <lb/>28. IHE-XDS-Imaging, Testing Software Installation bundle, (2010, Apr. 20). <lb/>[http://ihe.etsmtl.ca], [Online]. <lb/></listBibl>

			<front>doi:10.1186/1751-0473-5-9 <lb/>Cite this article as: Noumeir and Renaud: IHE cross-enterprise document <lb/>sharing for imaging: interoperability testing software. Source Code for <lb/>Biology and Medicine 2010 5:9. <lb/></front>

			Submit your next manuscript to BioMed Central <lb/>and take full advantage of: <lb/>• Convenient online submission <lb/>• Thorough peer review <lb/>• No space constraints or color figure charges <lb/>• Immediate publication on acceptance <lb/>• Inclusion in PubMed, CAS, Scopus and Google Scholar <lb/>• Research which is freely available for redistribution <lb/>Submit your manuscript at <lb/>www.biomedcentral.com/submit <lb/>

			<note place="headnote">Noumeir and Renaud Source Code for Biology and Medicine 2010, 5:9 <lb/>http://www.scfbm.org/content/5/1/9 <lb/></note>

			<page>Page 15 of 15 </page>


	</text>
</tei>
