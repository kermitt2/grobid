<?xml version="1.0" ?>
<tei>
	<teiHeader>
		<fileDesc xml:id="__euzenat2006c"/>
	</teiHeader>
	<text xml:lang="en">
			<front> A context information manager <lb/>for dynamic environments <lb/> Jérôme Euzenat 1 , Jérôme Pierson 2 , Fano Ramparany 2 <lb/> 1 INRIA Rhône-Alpes, Montbonnot St Martin, France <lb/> Jerome.Euzenat@inrialpes.fr <lb/> 2 France Telecom R&amp;D, Meylan, France <lb/> {Jerome.Pierson, Fano.Ramparany}@francetelecom.com <lb/> Abstract. In a pervasive environment, heterogeneous devices need to <lb/>communicate in order to provide services adapted to users. We have developed <lb/>an extensible context model using semantic web technologies and a context <lb/>information management component that enable the interaction between <lb/>context information producer devices and context information consumer <lb/>devices and as well as their insertion in an open environment. <lb/></front>

			<body> 1. Introduction <lb/> In a pervasive computing environment, various basic services can be provided by <lb/>smart devices (sensors, actuators, human-computer interface, etc.). To provide more <lb/>elaborate services, they have to act together and cooperate. Then they can offer a <lb/>large number of services. It would be better if the devices could adapt their behaviour <lb/>to the user, his/her preference and his/her task, than if users have to find the specific <lb/>service they want among all the smart devices. <lb/>This idea requires the perception of the environment in which devices and users <lb/>interact. There are pieces of information that can be considered common to all <lb/>services. In particular, spatial and temporal location as well as information related to <lb/>the physical environment in which services are made available [1, 2]. These elements <lb/>are part of the context in which applications operate. We are here concerned with <lb/>context-aware applications, i.e., application whose behavior is determined to some <lb/>extent by the context. <lb/>Our goal is to design a context management system general enough for being used by <lb/>different pervasive computing applications, specific enough for encompassing already <lb/>existing services and application, and flexible enough for supporting the dynamic <lb/>addition of new devices. <lb/>First we introduce our proposition for a distributed architecture to manage context <lb/>information (Section 2), then we define a context representation (Section 3) which is <lb/>independent of applications and an architecture enabling their evolution. The <lb/>openness of the system will lead to deal with heterogeneous representations that will <lb/>have to be reconciled before being used (section 4). For that purpose, we will take <lb/>advantage of solutions developed for the &quot; semantic web &quot; . <lb/> 2. A context information management component <lb/> Context is the set of information (partly) characterizing the situation of some <lb/>entity [3]. The notion of context is not universal but relative to some situation, task or <lb/>application [4, 5]. Pervasive Computing applications retrieve context data directly or <lb/>indirectly from sensors, which are grounded in the physical environment. We propose <lb/>an architecture in which applications won&apos;t need to directly connect to each sensor <lb/>available and where adding a new sensor won&apos;t require all applications to be <lb/>recompiled and redeployed. <lb/>Designing architecture for hosting context-aware services, suggests the development <lb/>of a context management service for providing other services or devices context <lb/>information [6, 7, 11]. In our approach, each device (or his proxy if it cannot embed <lb/>enough computing resource) or service embeds a context management component <lb/>(CMC) for maintaining context information for its own use or for the benefit of others <lb/>(Fig. 1). <lb/>This component provides mechanisms for helping context-aware devices to request <lb/>context information from context sensitive devices. For this purpose we design a <lb/>protocol enabling devices to identify a service, know what kind of context <lb/>information it could provide and interact with it in order to access this information. <lb/>Thus the context management component provides few methods. A first method <lb/>allows identifying devices that are available in the environment. The identifier can <lb/>then be used to contact the device. Alternatively, it could be used to get a more <lb/>detailed description of the device (e.g. in case the identifier is a URI pointing to a <lb/>network location where a description of the identified object is stored). A second <lb/>method identifies the class (in OWL terminology) of the device. In theory, this class <lb/>should be accessible from the network and once its definition is found, it provides a <lb/>detailed description of the device. A third method provides the device description (or <lb/>rather that of context information they provide) in a OWL formalism (OWL-S). A <lb/>fourth method is used to post queries to the devices and to get the context information <lb/>returned. <lb/>Thus any device is able to: find out, in its environment, services that are able to <lb/>provide information relevant to its own context, get features of services that have <lb/>been found (for example, measurement precision), connect to the selected service to <lb/>get the information sought. <lb/>We need a language to describe the context model of heterogeneous devices so that <lb/>these devices can interact in a dynamic environment. <lb/> Fig. 1: Each device embeds a context management component (CMC) and a semantic <lb/>description of his context. <lb/> Web <lb/> Alignment <lb/>Service <lb/>  <lb/>  <lb/> <lb/> <lb/> <lb/> <lb/> <lb/> 3. Context model and language <lb/> In this dynamic pervasive environment, each CMC manages context information <lb/>of its device. To express its context model, its needs or its capabilities, we use <lb/>semantic web languages described below. They ensure interoperability between these <lb/>heterogeneous devices. <lb/>The ground language for the semantic web is RDF (Resource Description Framework <lb/>[8]). It enables expressing assertions of the form subject-predicate-object. The <lb/>strength of RDF is that the names of entities (subjects, predicates or objects) are URIs <lb/>(the identifiers of the web that can be seen as a generalization of URLs: <lb/>http://www.w3c.org/sw). This opens the possibility for different RDF documents to <lb/>refer precisely to an entity (it is reasonable to think that a URI denotes the same thing <lb/>for all of its users). <lb/>The OWL language [9], has been designed for expressing « ontologies » or <lb/>conceptual models of a domain of knowledge. It constrains the interpretation of RDF <lb/>graphs concerning this domain. OWL defines classes of objects and predicates and <lb/>makes it possible to declare constraints applying to them (i.e., that the « output » of a <lb/>« thermometer » is a « temperature »). <lb/>The context model that we will use at that stage is very simple: a context is a set of <lb/>RDF assertions. Interoperability is guaranteed through considering that context-aware <lb/>devices are consumer and producer of RDF. However, this is not precise enough and <lb/>devices might want to extract only the relevant information from context sources. For <lb/>that purpose, a language like RDQL [10] is useful for querying or subscribing to <lb/>context sources. In order to post the relevant queries to the adequate components, it is <lb/>necessary that components publish the OWL classes of objects and properties on <lb/>which they can answer. <lb/> 4. Openness, dynamics and heterogeneity <lb/> The languages developed for the semantic web, and particularly RDF and OWL, <lb/>are adapted to context representation in pervasive computing and particularly to the <lb/>representation of dynamically evolving contexts for two reasons: these languages are <lb/>open: they implement the open world assumption under which it is always possible to <lb/>add more information to a context characterization; and they have been designed to <lb/>work in a networked way. <lb/>If we can add components at any time, they are not easily usable. Indeed, there is no a <lb/>priori reason that components available, new applications and new sensors are really <lb/>compatible. Fortunately, using the knowledge representation techniques that are <lb/>integrated in OWL language it is possible to introduce new devices in the <lb/>environment by extending the ontology, through specifying a new concept or a <lb/>property. The applications must be as general as possible to describe the information <lb/>they need whereas the context management system must be as precise as possible on <lb/>the information it makes available. This approach enables the most specialized <lb/>applications to take advantage of CMCs. The essential point is to have sufficiently <lb/>generic ontologies to cover the various concepts implied in pervasive computing <lb/>applications [12]. <lb/> Unfortunately this is not always the case and agreeing on standard, universal and self <lb/>contained context ontology is not a reasonable assumption. This raises the issue of <lb/>matching context information produced to applications context information <lb/>requirements. There are three alternative approaches addressing interoperability in <lb/>pervasive computing environments: (i) A priori standardisation of ontologies, (ii) <lb/>setting up mediators among ontologies and (iii) a dynamical ontology alignment <lb/>service. These three approaches are not incompatible and might even be jointly used. <lb/>We propose to set up one (or more) ontologies alignment service(s) (Fig. 2). The goal <lb/>of such service is to help agents (context managers in our case) to find a matching <lb/>between different ontologies. These services provide mechanisms for finding out <lb/>ontologies close to a given ontology, archiving (and retrieving) past alignments, <lb/>dynamically computing matching between two ontologies and translating queries and <lb/>responses to queries between context managers that use different ontologies [13]. <lb/> Fig. 2: For finding correspondence between his model and the model of the context information <lb/>provider, the window service asks to an alignment service to translate his model to another <lb/>device model. <lb/> 5. Conclusion and perspectives <lb/> We specifically addressed the problem of adaptability of context management to <lb/>an ever-evolving world. This is achieved by providing distributed component based <lb/>architecture and by using semantic web technologies. Components enable the <lb/>addition, at any moment, of new devices that can provide information about the <lb/>context of applications. The use of RDF and OWL ensures interoperability between <lb/>components developed independently by taking advantage of the open character of <lb/>these technologies. Moreover, using ontology alignment modules allows dealing with <lb/>the necessary heterogeneity between components. The proposed approach relies on a <lb/>minimal commitment on basic technologies: RDF, OWL, and some identification <lb/>protocol. <lb/>We are currently developing a demonstrator of this technology. We will develop a <lb/>toolkit for developers of pervasive applications which help them deploy a distributed <lb/>context management system. This toolkit will provide a component to manage <lb/>(search, diffuse and update) context information. <lb/> WEB <lb/>  <lb/>  <lb/> <lb/> <lb/> <lb/> <lb/> isA <lb/> isA <lb/>  <lb/> Alignment <lb/>Service <lb/> isA <lb/> ° <lb/>° <lb/>° <lb/> isA <lb/>isA <lb/>  <lb/> <lb/> <lb/> isA <lb/>isA <lb/>  <lb/> <lb/> <lb/> <lb/> isA <lb/>  <lb/> <lb/> isA <lb/>isA <lb/>isA <lb/>isA <lb/>  <lb/> <lb/> <lb/> isA <lb/>  <lb/> &gt;&gt; <lb/> 
			
		</body>
		
		<back>	
			
			<div type="acknowledgement">Acknowledgement <lb/> T h i s w o r k i s b e i n g p a r t l y s u p p o r t e d b y t h e E u r o p e a n Union IST project <lb/>004182: &quot;Amigo – Ambient Intelligence for the networked home environment&quot;. More <lb/>information on http://www.amigo-project.org. <lb/></div>
		
			<listBibl> References <lb/> 1. R. Guha, Contexts: a formalization and some applications, PhD thesis, Stanford university <lb/>(CA US), 1991 (Technical Report STAN-CS-91-1399-Thesis et MCC ACT-CYC-423-91). <lb/>2. O. Khriyenko, V. Terziyan, Context description framework for the semantic web, <lb/>Proceedings Context 2005 Context representation and reasoning workshop, Paris (FR), <lb/> 2005 <lb/> 3. A. Dey, D. Salber, G. Abowd, A conceptual framework and a toolkit for supporting the <lb/>rapid prototyping of context-aware applications, Human-Computer Interaction 16:97-166., <lb/> 2001 <lb/> 4. P. Dourish, Seeking a foundation for context-aware computing, Human-Computer <lb/>Interaction, 16(2-3), 2001. <lb/>5. M. Chalmers, A Historical View of Context, Computer supported cooperative work 13(3), <lb/>223-247, 2004. <lb/>6. A. Dey, Understanding and using context, Personal and ubiquitous computing 5(1):4-7, <lb/>2001. <lb/>7. J. Coutaz, J. Crowley, S. Dobson, D. Garlan, Context is key, Communications of the ACM <lb/> 48(3):49-53, 2005. <lb/>8. G. Klyne, J. Carroll, Eds., Resource Description Framework (RDF): Concepts and <lb/>Abstract Syntax, W3C Recommendation, 2004 http://www.w3.org/TR/rdf-concepts/ <lb/>9. M. Dean, G. Schreiber Eds, OWL Web Ontology Language: Reference, W3C <lb/>Recommendation, 2004. http://www.w3.org/TR/owl-ref/ <lb/> 10. A. Seaborne, RDQL — A Query Language for RDF, W3C Member submission, 2004. <lb/> http://www.w3.org/Submission/2004/SUBM-RDQL-20040109/ <lb/> 11. J. Crowley, J. Coutaz, G. Rey, P. Reignier, Perceptual components for context aware <lb/>computing, Proceedings International Conference on Ubiquitous Computing, Göteborg <lb/>(SW), pp. 117-134, 2002. <lb/>12. X. H. Wang, D. Q. Zhang, T. Gu, H. Keng Pung, Ontology based context modeling and <lb/>reasoning in OWL, Proceedings 2 nd International conference on pervasive computing and <lb/>communication Workshop on Context Modeling and Reasoning (CoMoRea), Orlando (FL <lb/>US), 2000. <lb/>13. J. Euzenat, Alignment infrastructure for ontology mediation and other applications, <lb/>Proceedings ICSOC 1 st international workshop on Mediation in semantic web services, <lb/>pp.81-95, Amsterdam (NL), 2005. </listBibl>

		</back>
	</text>
</tei>
